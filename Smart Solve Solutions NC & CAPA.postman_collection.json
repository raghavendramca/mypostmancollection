{
	"info": {
		"_postman_id": "ee1f2954-ce4e-46e3-8981-ecda973a5792",
		"name": "Smart Solve Solutions NC & CAPA",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "1 Login APIs",
			"item": [
				{
					"name": "Get Login Method",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"if(jsonData)\r",
									"    {\r",
									"        if(jsonData.hasError)\r",
									"        {\r",
									"                    pm.test(\"Response should be 200\", () => {\r",
									"                        pm.response.to.have.status(200);\r",
									"                        pm.response.to.be.not.empty;\r",
									"                        pm.response.to.be.json;\r",
									"                    });\r",
									"                    pm.test(\"Response should have error\", ()=> {  \r",
									"                        pm.response.to.be.not.empty;\r",
									"                        pm.response.to.be.json; \r",
									"                        pm.expect(jsonData.hasError).to.be.true;\r",
									"                    });\r",
									"                    pm.test(\"Error properties\", () => { \r",
									"                        pm.expect(jsonData.errors).not.empty;\r",
									"                    _.each(jsonData.errors, (item) => {\r",
									"                        console.log(item.errorNumber);\r",
									"                        console.log(item.errorMessage);\r",
									"                        }); \r",
									"                 });\r",
									"        }\r",
									"        else\r",
									"        {\r",
									"            pm.test(\"Test data type of the response\", () => {                \r",
									"                pm.expect(jsonData).to.be.an(\"object\");\r",
									"                pm.expect(jsonData.hasError).to.be.false;\r",
									"            });\r",
									"        }\r",
									"    }\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.globals.set(\"METHOD\", \"POST\");\r",
									"console.log(\"value of base url from data file is: \"+pm.iterationData.get(\"baseUrl\"));\r",
									"console.log(\"value of username from data file is:: \"+pm.iterationData.get(\"Username\"));\r",
									"\r",
									"pm.collectionVariables.set(\"baseUrl\",pm.iterationData.get(\"baseUrl\"));\r",
									"pm.collectionVariables.set(\"Username\",pm.iterationData.get(\"Username\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "{{METHOD}}",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"{{Username}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/apis/getLoginMethod",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"apis",
								"getLoginMethod"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var schema = \r",
									"{\r",
									"    \"type\": \"object\",\r",
									"    \"required\": [\r",
									"        \"ActorFirstName\",\r",
									"        \"ActorLastName\",\r",
									"        \"RequirePasswordChange\",\r",
									"        \"Token\",\r",
									"        \"UserFullName\",\r",
									"        \"ActorCode\",\r",
									"        \"ActorCodeWithDomain\",\r",
									"        \"licId\",\r",
									"        \"sessionExpirationErrorCode\",\r",
									"        \"sessionExpirationErrorMessage\",\r",
									"        \"culture\",\r",
									"        \"LoggedOnRoleCode\",\r",
									"        \"hasError\"\r",
									"    ],\r",
									"    \"additionalProperties\": true,\r",
									"    \"properties\": {\r",
									"        \"ActorFirstName\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"ActorLastName\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"RequirePasswordChange\": {\r",
									"            \"type\": \"boolean\"\r",
									"        },\r",
									"        \"Token\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"UserFullName\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"ActorCode\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"ActorCodeWithDomain\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"licId\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"sessionExpirationErrorCode\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"sessionExpirationErrorMessage\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"culture\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"LoggedOnRoleCode\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"hasError\": {\r",
									"            \"type\": \"boolean\"\r",
									"        }\r",
									"    }\r",
									"};\r",
									"\r",
									"if(schema)\r",
									"{\r",
									" var jsonData = pm.response.json();\r",
									" if(jsonData)\r",
									"    {\r",
									"        if(jsonData.hasError)\r",
									"        {\r",
									"                    pm.test(\"Response should be 200\", () => {\r",
									"                        pm.response.to.have.status(200);\r",
									"                        pm.response.to.be.not.empty;\r",
									"                        pm.response.to.be.json;\r",
									"                    });\r",
									"                    pm.test(\"Response should have error\", ()=> {  \r",
									"                        pm.response.to.be.not.empty;\r",
									"                        pm.response.to.be.json; \r",
									"                        pm.expect(jsonData.hasError).to.be.true;\r",
									"                    });\r",
									"                    pm.test(\"Error properties\", () => { \r",
									"                        pm.expect(jsonData.errors).not.empty;\r",
									"                    _.each(jsonData.errors, (item) => {\r",
									"                        console.log(item.errorNumber);\r",
									"                        console.log(item.errorMessage);\r",
									"                        }); \r",
									"                 });\r",
									"        }\r",
									"        else\r",
									"        {\r",
									"            pm.test(\"Test data type of the response\", () => {                \r",
									"                pm.expect(jsonData).to.be.an(\"object\");\r",
									"                pm.expect(jsonData.hasError).to.be.false;\r",
									"                pm.expect(jsonData.Token).to.be.a(\"string\");\r",
									"                pm.expect(jsonData.ActorCode).to.be.an(\"string\");\r",
									"            });\r",
									"            pm.collectionVariables.set(\"token\", jsonData.Token);\r",
									"            pm.collectionVariables.set(\"culture\", JSON.stringify(jsonData.culture));\r",
									"            pm.collectionVariables.set(\"ActorCode\", jsonData.ActorCode);           \r",
									"        }\r",
									"        var Ajv = require('ajv');\r",
									"        const ajv = new Ajv();\r",
									"        pm.test(\"Login schema validation\", () => {\r",
									"        const validate = ajv.compile(schema);\r",
									"        console.log(validate);\r",
									"        const valid = validate(jsonData);\r",
									"        if(!valid) console.log(validate.errors);\r",
									"        console.log(valid);\r",
									"        pm.expect(valid).to.be.true;\r",
									"        });       \r",
									"    }\r",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.globals.set(\"METHOD\", \"POST\");\r",
									"console.log(\"value of type from data file is: \"+pm.iterationData.get(\"SolutionCode\"));\r",
									"console.log(\"value of type from data file is: \"+pm.iterationData.get(\"Password\"));\r",
									"\r",
									"pm.collectionVariables.set(\"SolutionCode\",pm.iterationData.get(\"SolutionCode\"));\r",
									"pm.collectionVariables.set(\"Password\",pm.iterationData.get(\"Password\"));\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "{{METHOD}}",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"Username\": \"{{Username}}\", \r\n    \"Password\": \"{{Password}}\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/apis/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"apis",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create PAT",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.globals.set(\"METHOD\", \"POST\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									" if(jsonData)\r",
									"    {\r",
									"        if(jsonData.hasError)\r",
									"        {\r",
									"                    pm.test(\"Response should be 200\", () => {\r",
									"                        pm.response.to.have.status(200);\r",
									"                        pm.response.to.be.not.empty;\r",
									"                        pm.response.to.be.json;\r",
									"                    });\r",
									"                    pm.test(\"Response should have error\", ()=> {  \r",
									"                        pm.response.to.be.not.empty;\r",
									"                        pm.response.to.be.json; \r",
									"                        pm.expect(jsonData.hasError).to.be.true;\r",
									"                    });\r",
									"                    pm.test(\"Error properties\", () => { \r",
									"                        pm.expect(jsonData.errors).not.empty;\r",
									"                    _.each(jsonData.errors, (item) => {\r",
									"                        console.log(item.errorNumber);\r",
									"                        console.log(item.errorMessage);\r",
									"                        }); \r",
									"                 });\r",
									"                 \r",
									"        }\r",
									"        else\r",
									"        {\r",
									"            pm.test(\"Test data type of the response\", () => {                \r",
									"                pm.expect(jsonData).to.be.an(\"object\");\r",
									"                pm.expect(jsonData.hasError).to.be.false;\r",
									"                pm.expect(jsonData.pat).to.be.a(\"string\");\r",
									"                pm.expect(jsonData.message).to.be.an(\"string\");\r",
									"            });\r",
									"            pm.collectionVariables.set(\"pat\", jsonData.pat);\r",
									"        }\r",
									"    }    "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{{{token}}}}",
									"type": "string"
								}
							]
						},
						"method": "{{METHOD}}",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{token}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/apis/createpat",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"apis",
								"createpat"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create PAT and Logout",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.globals.set(\"METHOD\", \"POST\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									" if(jsonData)\r",
									"    {\r",
									"        if(jsonData.hasError)\r",
									"        {\r",
									"                    pm.test(\"Response should be 200\", () => {\r",
									"                        pm.response.to.have.status(200);\r",
									"                        pm.response.to.be.not.empty;\r",
									"                        pm.response.to.be.json;\r",
									"                    });\r",
									"                    pm.test(\"Response should have error\", ()=> {  \r",
									"                        pm.response.to.be.not.empty;\r",
									"                        pm.response.to.be.json; \r",
									"                        pm.expect(jsonData.hasError).to.be.true;\r",
									"                    });\r",
									"                    pm.test(\"Error properties\", () => { \r",
									"                        pm.expect(jsonData.errors).not.empty;\r",
									"                    _.each(jsonData.errors, (item) => {\r",
									"                        console.log(item.errorNumber);\r",
									"                        console.log(item.errorMessage);\r",
									"                        }); \r",
									"                 });\r",
									"                 \r",
									"        }\r",
									"        else\r",
									"        {\r",
									"            pm.test(\"Test data type of the response\", () => {                \r",
									"                pm.expect(jsonData).to.be.an(\"object\");\r",
									"                pm.expect(jsonData.hasError).to.be.false;               \r",
									"            });\r",
									"            pm.collectionVariables.unset(\"token\");\r",
									"            pm.collectionVariables.unset(\"baseUrl\");\r",
									"            pm.collectionVariables.unset(\"Username\");\r",
									"            pm.collectionVariables.unset(\"Password\");\r",
									"        }\r",
									"    }    "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{{{token}}}}",
									"type": "string"
								}
							]
						},
						"method": "{{METHOD}}",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/apis/logout",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"apis",
								"logout"
							]
						}
					},
					"response": []
				},
				{
					"name": "LoginFromPat",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.globals.set(\"METHOD\", \"POST\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var schema = \r",
									"{\r",
									"    \"type\": \"object\",\r",
									"    \"required\": [\r",
									"        \"ActorFirstName\",\r",
									"        \"ActorLastName\",\r",
									"        \"RequirePasswordChange\",\r",
									"        \"Token\",\r",
									"        \"UserFullName\",\r",
									"        \"ActorCode\",\r",
									"        \"ActorCodeWithDomain\",\r",
									"        \"licId\",\r",
									"        \"sessionExpirationErrorCode\",\r",
									"        \"sessionExpirationErrorMessage\",\r",
									"        \"culture\",\r",
									"        \"LoggedOnRoleCode\",\r",
									"        \"hasError\"\r",
									"    ],\r",
									"    \"additionalProperties\": true,\r",
									"    \"properties\": {\r",
									"        \"ActorFirstName\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"ActorLastName\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"RequirePasswordChange\": {\r",
									"            \"type\": \"boolean\"\r",
									"        },\r",
									"        \"Token\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"UserFullName\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"ActorCode\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"ActorCodeWithDomain\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"licId\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"sessionExpirationErrorCode\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"sessionExpirationErrorMessage\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"culture\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"LoggedOnRoleCode\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"hasError\": {\r",
									"            \"type\": \"boolean\"\r",
									"        }\r",
									"    }\r",
									"};\r",
									"\r",
									"if(schema)\r",
									"{\r",
									" var jsonData = pm.response.json();\r",
									" if(jsonData)\r",
									"    {\r",
									"        if(jsonData.hasError)\r",
									"        {\r",
									"                    pm.test(\"Response should be 200\", () => {\r",
									"                        pm.response.to.have.status(200);\r",
									"                        pm.response.to.be.not.empty;\r",
									"                        pm.response.to.be.json;\r",
									"                    });\r",
									"                    pm.test(\"Response should have error\", ()=> {  \r",
									"                        pm.response.to.be.not.empty;\r",
									"                        pm.response.to.be.json; \r",
									"                        pm.expect(jsonData.hasError).to.be.true;\r",
									"                    });\r",
									"                    pm.test(\"Error properties\", () => { \r",
									"                        pm.expect(jsonData.errors).not.empty;\r",
									"                    _.each(jsonData.errors, (item) => {\r",
									"                        console.log(item.errorNumber);\r",
									"                        console.log(item.errorMessage);\r",
									"                        }); \r",
									"                 });                 \r",
									"        }\r",
									"        else\r",
									"        {\r",
									"            pm.test(\"Test data type of the response\", () => {                \r",
									"                pm.expect(jsonData).to.be.an(\"object\");\r",
									"                pm.expect(jsonData.hasError).to.be.false;\r",
									"                pm.expect(jsonData.Token).to.be.a(\"string\");\r",
									"                pm.expect(jsonData.ActorCode).to.be.an(\"string\");\r",
									"            });\r",
									"            pm.collectionVariables.set(\"token\", jsonData.Token);\r",
									"            pm.collectionVariables.set(\"culture\", JSON.stringify(jsonData.culture));\r",
									"            pm.collectionVariables.set(\"ActorCode\", jsonData.ActorCode);\r",
									"        }\r",
									"        var Ajv = require('ajv');\r",
									"        const ajv = new Ajv();\r",
									"        pm.test(\"Login from Pat schema validation\", () => {\r",
									"        const validate = ajv.compile(schema);\r",
									"        console.log(validate);\r",
									"        const valid = validate(jsonData);\r",
									"        if(!valid) console.log(validate.errors);\r",
									"        console.log(valid);\r",
									"        pm.expect(valid).to.be.true;\r",
									"        });       \r",
									"    }\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{pat}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{{{token}}}}",
									"type": "string"
								}
							]
						},
						"method": "{{METHOD}}",
						"header": [
							{
								"key": "Authorization",
								"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJQRVJTT05BTEFDQ0VTUyI6IntcIk9yZ2FuaXphdGlvbkNvZGVcIjpcIkdMT0JBTFwiLFwiVXNlck5hbWVcIjpcIlNNQVJUQURNSU5AaXF2aWEuY29tXCIsXCJBcHBsTGljZW5zZVJlZ2lzdHJhdGlvbklEXCI6bnVsbCxcIlVzZXJMaWNlbnNlUmVnaXN0cmF0aW9uSURcIjpudWxsfSIsImlzcyI6IklRVklBIiwiYXVkIjoiU01BUlRTT0xWRSIsImV4cCI6MTY4OTk1ODIyMiwibmJmIjoxNjU4NDIyMjIyfQ.wdkbiQQFzmjSopjEZVjjl29fW65CEjakXacCYHei-Fo",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/apis/loginUsingToken",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"apis",
								"loginUsingToken"
							]
						}
					},
					"response": []
				},
				{
					"name": "Revoke PAT",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.globals.set(\"METHOD\", \"POST\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									" if(jsonData)\r",
									"    {\r",
									"        if(jsonData.hasError)\r",
									"        {\r",
									"                    pm.test(\"Response should be 200\", () => {\r",
									"                        pm.response.to.have.status(200);\r",
									"                        pm.response.to.be.not.empty;\r",
									"                        pm.response.to.be.json;\r",
									"                    });\r",
									"                    pm.test(\"Response should have error\", ()=> {  \r",
									"                        pm.response.to.be.not.empty;\r",
									"                        pm.response.to.be.json; \r",
									"                        pm.expect(jsonData.hasError).to.be.true;\r",
									"                    });\r",
									"                    pm.test(\"Error properties\", () => { \r",
									"                        pm.expect(jsonData.errors).not.empty;\r",
									"                    _.each(jsonData.errors, (item) => {\r",
									"                        console.log(item.errorNumber);\r",
									"                        console.log(item.errorMessage);\r",
									"                        }); \r",
									"                 });\r",
									"                 \r",
									"        }\r",
									"        else\r",
									"        {\r",
									"            pm.test(\"Test data type of the response\", () => {                \r",
									"                pm.expect(jsonData).to.be.an(\"object\");\r",
									"                pm.expect(jsonData.hasError).to.be.false;\r",
									"                pm.expect(jsonData.message).to.be.an(\"string\");\r",
									"                pm.expect(jsonData.message).to.equal(\"Personal Access Token has been successfully Revoked\")\r",
									"            });\r",
									"            pm.collectionVariables.unset(\"pat\");\r",
									"        }\r",
									"    }    "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{{{token}}}}",
									"type": "string"
								}
							]
						},
						"method": "{{METHOD}}",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "\"\"",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/apis/revokepat",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"apis",
								"revokepat"
							]
						}
					},
					"response": []
				},
				{
					"name": "Installedversions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response should be 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.not.empty;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Response should has no error\", () => {\r",
									"    pm.response.to.be.not.empty;\r",
									"    pm.response.to.be.json;\r",
									"\r",
									"    var jsonData = JSON.parse(responseBody)\r",
									"    pm.expect(jsonData.hasError).to.eql(false);\r",
									"});\r",
									"\r",
									"pm.test(\"Response should has the module installed\", () => {\r",
									"    pm.response.to.be.not.empty;\r",
									"    pm.response.to.be.json;\r",
									"\r",
									"    var jsonData = JSON.parse(responseBody)\r",
									"    pm.expect(jsonData.Result).not.empty;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{{{token}}}}",
									"type": "string"
								}
							]
						},
						"method": "{{METHOD}}",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/apis/installedversions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"apis",
								"installedversions"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login After Revoke PAT",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var solution = pm.collectionVariables.get(\"SolutionCode\");\r",
									" \r",
									"var schema = \r",
									"{\r",
									"    \"type\": \"object\",\r",
									"    \"required\": [\r",
									"        \"ActorFirstName\",\r",
									"        \"ActorLastName\",\r",
									"        \"RequirePasswordChange\",\r",
									"        \"Token\",\r",
									"        \"UserFullName\",\r",
									"        \"ActorCode\",\r",
									"        \"ActorCodeWithDomain\",\r",
									"        \"licId\",\r",
									"        \"sessionExpirationErrorCode\",\r",
									"        \"sessionExpirationErrorMessage\",\r",
									"        \"culture\",\r",
									"        \"LoggedOnRoleCode\",\r",
									"        \"hasError\"\r",
									"    ],\r",
									"    \"additionalProperties\": true,\r",
									"    \"properties\": {\r",
									"        \"ActorFirstName\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"ActorLastName\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"RequirePasswordChange\": {\r",
									"            \"type\": \"boolean\"\r",
									"        },\r",
									"        \"Token\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"UserFullName\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"ActorCode\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"ActorCodeWithDomain\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"licId\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"sessionExpirationErrorCode\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"sessionExpirationErrorMessage\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"culture\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"LoggedOnRoleCode\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"hasError\": {\r",
									"            \"type\": \"boolean\"\r",
									"        }\r",
									"    }\r",
									"};\r",
									"\r",
									"if(schema)\r",
									"{\r",
									" var jsonData = pm.response.json();\r",
									" if(jsonData)\r",
									"    {\r",
									"        if(jsonData.hasError)\r",
									"        {\r",
									"                    pm.test(\"Response should be 200\", () => {\r",
									"                        pm.response.to.have.status(200);\r",
									"                        pm.response.to.be.not.empty;\r",
									"                        pm.response.to.be.json;\r",
									"                    });\r",
									"                    pm.test(\"Response should have error\", ()=> {  \r",
									"                        pm.response.to.be.not.empty;\r",
									"                        pm.response.to.be.json; \r",
									"                        pm.expect(jsonData.hasError).to.be.true;\r",
									"                    });\r",
									"                    pm.test(\"Error properties\", () => { \r",
									"                        pm.expect(jsonData.errors).not.empty;\r",
									"                    _.each(jsonData.errors, (item) => {\r",
									"                        console.log(item.errorNumber);\r",
									"                        console.log(item.errorMessage);\r",
									"                        }); \r",
									"                 });\r",
									"        }\r",
									"        else\r",
									"        {\r",
									"            pm.test(\"Test data type of the response\", () => {                \r",
									"                pm.expect(jsonData).to.be.an(\"object\");\r",
									"                pm.expect(jsonData.hasError).to.be.false;\r",
									"                pm.expect(jsonData.Token).to.be.a(\"string\");\r",
									"                pm.expect(jsonData.ActorCode).to.be.an(\"string\");\r",
									"            });\r",
									"            pm.collectionVariables.set(\"token\", jsonData.Token);\r",
									"            pm.collectionVariables.set(\"culture\", JSON.stringify(jsonData.culture));\r",
									"            pm.collectionVariables.set(\"ActorCode\", jsonData.ActorCode);            \r",
									"        }\r",
									"        var Ajv = require('ajv');\r",
									"        const ajv = new Ajv();\r",
									"        pm.test(\"Login schema validation\", () => {\r",
									"        const validate = ajv.compile(schema);\r",
									"        console.log(validate);\r",
									"        const valid = validate(jsonData);\r",
									"        if(!valid) console.log(validate.errors);\r",
									"        console.log(valid);\r",
									"        pm.expect(valid).to.be.true;\r",
									"        });       \r",
									"    }\r",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.globals.set(\"METHOD\", \"POST\");\r",
									"\r",
									"pm.collectionVariables.set(\"baseUrl\",pm.iterationData.get(\"baseUrl\"));\r",
									"pm.collectionVariables.set(\"Username\",pm.iterationData.get(\"Username\"));\r",
									"pm.collectionVariables.set(\"Password\",pm.iterationData.get(\"Password\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "{{METHOD}}",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"Username\": \"{{Username}}\", \r\n    \"Password\": \"{{Password}}\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/apis/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"apis",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Logout",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.globals.set(\"METHOD\", \"POST\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									" if(jsonData)\r",
									"    {\r",
									"        if(jsonData.hasError)\r",
									"        {\r",
									"                    pm.test(\"Response should be 200\", () => {\r",
									"                        pm.response.to.have.status(200);\r",
									"                        pm.response.to.be.not.empty;\r",
									"                        pm.response.to.be.json;\r",
									"                    });\r",
									"                    pm.test(\"Response should have error\", ()=> {  \r",
									"                        pm.response.to.be.not.empty;\r",
									"                        pm.response.to.be.json; \r",
									"                        pm.expect(jsonData.hasError).to.be.true;\r",
									"                    });\r",
									"                    pm.test(\"Error properties\", () => { \r",
									"                        pm.expect(jsonData.errors).not.empty;\r",
									"                    _.each(jsonData.errors, (item) => {\r",
									"                        console.log(item.errorNumber);\r",
									"                        console.log(item.errorMessage);\r",
									"                        }); \r",
									"                 });\r",
									"                 \r",
									"        }\r",
									"        else\r",
									"        {\r",
									"            pm.test(\"Test data type of the response\", () => {                \r",
									"                pm.expect(jsonData).to.be.an(\"object\");\r",
									"                pm.expect(jsonData.hasError).to.be.false;               \r",
									"            });\r",
									"            pm.collectionVariables.unset(\"token\");\r",
									"            pm.collectionVariables.unset(\"culture\");\r",
									"            pm.collectionVariables.unset(\"ActorCode\");\r",
									"            pm.collectionVariables.unset(\"baseUrl\");\r",
									"            pm.collectionVariables.unset(\"Username\");\r",
									"            pm.collectionVariables.unset(\"Password\");\r",
									"        }\r",
									"    }    "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{{{token}}}}",
									"type": "string"
								}
							]
						},
						"method": "{{METHOD}}",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/apis/logout",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"apis",
								"logout"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "2 Attachment",
			"item": [
				{
					"name": "uploadattachment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"        if(jsonData)\r",
									"            {\r",
									"                if(jsonData.hasError)\r",
									"                {\r",
									"                    pm.test(\"Has Error\", ()=> {        \r",
									"                        pm.expect(jsonData.hasError).to.be.true;\r",
									"                    });\r",
									"\r",
									"                    pm.test(\"Error properties\", () => {    \r",
									"                        pm.expect(jsonData.errors).not.empty;\r",
									"                        _.each(jsonData.errors, (item) => {\r",
									"                            console.log(item.errorNumber);\r",
									"                            console.log(item.errorMessage);\r",
									"                        });\r",
									"                    });\r",
									"                    \r",
									"                }\r",
									"                else\r",
									"                {\r",
									"                    pm.test(\"Result\", () => { \r",
									"                        pm.expect(jsonData.Result).to.be.an(\"object\");\r",
									"                        pm.expect(jsonData.hasError).to.be.false; \r",
									"                        var result = jsonData[\"Result\"];\r",
									"                        pm.expect(result.ACO_ID).to.be.a(\"string\");\r",
									"                        pm.expect(result.ACO_FILE_NAME).to.be.a(\"string\");\r",
									"                        var ACO_ID = result[\"ACO_ID\"];\r",
									"                        var ACO_FILE_NAME = result[\"ACO_FILE_NAME\"];\r",
									"                        var ACO_DESCRIPTION = result[\"ACO_DESCRIPTION\"];\r",
									"                        var ACO_CREATED_BY = result[\"ACO_CREATED_BY\"];\r",
									"                        var ACO_CREATED_DATE = result[\"ACO_CREATED_DATE\"];\r",
									"                        pm.collectionVariables.set(\"ACO_ID\", ACO_ID);\r",
									"                        pm.collectionVariables.set(\"ACO_FILE_NAME\",ACO_FILE_NAME);\r",
									"                        pm.collectionVariables.set(\"ACO_DESCRIPTION\",ACO_DESCRIPTION);\r",
									"                        pm.collectionVariables.set(\"ACO_CREATED_BY\",ACO_CREATED_BY);\r",
									"                        pm.collectionVariables.set(\"ACO_CREATED_DATE\",ACO_CREATED_DATE);\r",
									"                        });\r",
									"                }\r",
									"            }"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept": true
						}
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{{{token}}}}",
									"type": "string"
								}
							]
						},
						"method": "{{METHOD}}",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/plain, */*",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "multipart/form-data;",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "FileName",
									"value": "TaskFlow_Full.xml",
									"type": "text"
								},
								{
									"key": "FileDescription",
									"value": "\"\"",
									"type": "text"
								},
								{
									"key": "FileStream",
									"type": "file",
									"src": "/C:/Users/rm/Downloads/TaskFlow_Delta (1).xml"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/apis/uploadattachment",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"apis",
								"uploadattachment"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Language APIs",
			"item": [
				{
					"name": "Login for Language",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"var schema = \r",
									"{\r",
									"    \"type\": \"object\",\r",
									"    \"required\": [\r",
									"        \"ActorFirstName\",\r",
									"        \"ActorLastName\",\r",
									"        \"RequirePasswordChange\",\r",
									"        \"Token\",\r",
									"        \"UserFullName\",\r",
									"        \"ActorCode\",\r",
									"        \"ActorCodeWithDomain\",\r",
									"        \"licId\",\r",
									"        \"sessionExpirationErrorCode\",\r",
									"        \"sessionExpirationErrorMessage\",\r",
									"        \"culture\",\r",
									"        \"LoggedOnRoleCode\",\r",
									"        \"hasError\"\r",
									"    ],\r",
									"    \"additionalProperties\": true,\r",
									"    \"properties\": {\r",
									"        \"ActorFirstName\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"ActorLastName\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"RequirePasswordChange\": {\r",
									"            \"type\": \"boolean\"\r",
									"        },\r",
									"        \"Token\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"UserFullName\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"ActorCode\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"ActorCodeWithDomain\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"licId\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"sessionExpirationErrorCode\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"sessionExpirationErrorMessage\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"culture\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"LoggedOnRoleCode\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"hasError\": {\r",
									"            \"type\": \"boolean\"\r",
									"        }\r",
									"    }\r",
									"};\r",
									"\r",
									"if(schema)\r",
									"{\r",
									" var jsonData = pm.response.json();\r",
									" if(jsonData)\r",
									"    {\r",
									"        if(jsonData.hasError)\r",
									"        {\r",
									"                    pm.test(\"Response should be 200\", () => {\r",
									"                        pm.response.to.have.status(200);\r",
									"                        pm.response.to.be.not.empty;\r",
									"                        pm.response.to.be.json;\r",
									"                    });\r",
									"                    pm.test(\"Response should have error\", ()=> {  \r",
									"                        pm.response.to.be.not.empty;\r",
									"                        pm.response.to.be.json; \r",
									"                        pm.expect(jsonData.hasError).to.be.true;\r",
									"                    });\r",
									"                    pm.test(\"Error properties\", () => { \r",
									"                        pm.expect(jsonData.errors).not.empty;\r",
									"                    _.each(jsonData.errors, (item) => {\r",
									"                        console.log(item.errorNumber);\r",
									"                        console.log(item.errorMessage);\r",
									"                        }); \r",
									"                 });\r",
									"        }\r",
									"        else\r",
									"        {\r",
									"            pm.test(\"Test data type of the response\", () => {                \r",
									"                pm.expect(jsonData).to.be.an(\"object\");\r",
									"                pm.expect(jsonData.hasError).to.be.false;\r",
									"                pm.expect(jsonData.Token).to.be.a(\"string\");\r",
									"                pm.expect(jsonData.ActorCode).to.be.an(\"string\");\r",
									"            });\r",
									"            pm.collectionVariables.set(\"token\", jsonData.Token);\r",
									"            pm.collectionVariables.set(\"culture\", JSON.stringify(jsonData.culture));\r",
									"            pm.collectionVariables.set(\"ActorCode\", jsonData.ActorCode);           \r",
									"        }\r",
									"        var Ajv = require('ajv');\r",
									"        const ajv = new Ajv();\r",
									"        pm.test(\"Login schema validation\", () => {\r",
									"        const validate = ajv.compile(schema);\r",
									"        console.log(validate);\r",
									"        const valid = validate(jsonData);\r",
									"        if(!valid) console.log(validate.errors);\r",
									"        console.log(valid);\r",
									"        pm.expect(valid).to.be.true;\r",
									"        });       \r",
									"    }\r",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.globals.set(\"METHOD\", \"POST\");\r",
									"console.log(\"value of base url from data file is: \"+pm.iterationData.get(\"baseUrl\"));\r",
									"console.log(\"value of username from data file is:: \"+pm.iterationData.get(\"Username\"));\r",
									"console.log(\"value of type from data file is: \"+pm.iterationData.get(\"Password\"));\r",
									"\r",
									"pm.collectionVariables.set(\"baseUrl\",pm.iterationData.get(\"baseUrl\"));\r",
									"pm.collectionVariables.set(\"Username\",pm.iterationData.get(\"Username\"));\r",
									"pm.collectionVariables.set(\"Password\",pm.iterationData.get(\"Password\"));\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "{{METHOD}}",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"Username\": \"{{Username}}\", \r\n    \"Password\": \"{{Password}}\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/apis/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"apis",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Languages",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									" if(jsonData)\r",
									"    {\r",
									"        if(jsonData.hasError)\r",
									"        {\r",
									"                    pm.test(\"Response should be 200\", () => {\r",
									"                        pm.response.to.have.status(200);\r",
									"                        pm.response.to.be.not.empty;\r",
									"                        pm.response.to.be.json;\r",
									"                    });\r",
									"                    pm.test(\"Response should have error\", ()=> {  \r",
									"                        pm.response.to.be.not.empty;\r",
									"                        pm.response.to.be.json; \r",
									"                        pm.expect(jsonData.hasError).to.be.true;\r",
									"                    });\r",
									"                    pm.test(\"Error properties\", () => { \r",
									"                        pm.expect(jsonData.errors).not.empty;\r",
									"                    _.each(jsonData.errors, (item) => {\r",
									"                        console.log(item.errorNumber);\r",
									"                        console.log(item.errorMessage);\r",
									"                        }); \r",
									"                 });\r",
									"        }\r",
									"        else\r",
									"        {\r",
									"            pm.test(\"Test Languages list object in the response\", () => {                \r",
									"                pm.expect(jsonData).to.be.an(\"object\");\r",
									"                pm.expect(jsonData.hasError).to.be.false;\r",
									"                pm.expect(jsonData.languages).to.be.an(\"object\");\r",
									"            });            \r",
									"        }\r",
									"    }\r",
									"\r",
									"\r",
									"// {\r",
									"//     \"languages\": {\r",
									"//         \"čeština (Česká republika)\": \"cs-CZ\",\r",
									"//         \"Deutsch (Deutschland)\": \"de-DE\",\r",
									"//         \"Deutsch (Schweiz)\": \"de-CH\",\r",
									"//         \"English (Australia)\": \"en-AU\",\r",
									"//         \"English (Ireland)\": \"en-IE\",\r",
									"//         \"English (United Kingdom)\": \"en-GB\",\r",
									"//         \"English (United States)\": \"en-US\",\r",
									"//         \"español (España, alfabetización internacional)\": \"es-ES\",\r",
									"//         \"français (France)\": \"fr-FR\",\r",
									"//         \"français (Suisse)\": \"fr-CH\",\r",
									"//         \"italiano (Italia)\": \"it-IT\",\r",
									"//         \"magyar (Magyarország)\": \"hu-HU\",\r",
									"//         \"Nederlands (België)\": \"nl-BE\",\r",
									"//         \"Nederlands (Nederland)\": \"nl-NL\",\r",
									"//         \"norsk, bokmål (Norge)\": \"nb-NO\",\r",
									"//         \"polski (Polska)\": \"pl-PL\",\r",
									"//         \"português (Brasil)\": \"pt-BR\",\r",
									"//         \"русский (Россия)\": \"ru-RU\",\r",
									"//         \"українська (Україна)\": \"uk-UA\",\r",
									"//         \"한국어(대한민국)\": \"ko-KR\",\r",
									"//         \"中文(中华人民共和国)\": \"zh-CN\",\r",
									"//         \"中文(繁體)\": \"zh-Hant\",\r",
									"//         \"日本語 (日本)\": \"ja-JP\"\r",
									"//     },\r",
									"//     \"hasError\": false\r",
									"// }\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{{{token}}}}",
									"type": "string"
								}
							]
						},
						"method": "{{METHOD}}",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/apis/getlanguages",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"apis",
								"getlanguages"
							]
						}
					},
					"response": []
				},
				{
					"name": "Change Language",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response should be 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.not.empty;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Response should has no error\", () => {\r",
									"    pm.response.to.be.not.empty;\r",
									"    pm.response.to.be.json;\r",
									"\r",
									"    var jsonData = JSON.parse(responseBody)\r",
									"    pm.expect(jsonData.hasError).to.eql(false);\r",
									"});\r",
									"\r",
									"pm.test(\"Response should has the updated culture\", () => {\r",
									"    pm.response.to.be.not.empty;\r",
									"    pm.response.to.be.json;\r",
									"\r",
									"    var jsonData = JSON.parse(responseBody)\r",
									"    pm.expect(jsonData.culture).not.empty;\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									" console.log(\"value of type from data file is: \"+pm.iterationData.get(\"Language\"));\r",
									" pm.collectionVariables.set(\"Language\",pm.iterationData.get(\"Language\"));\r",
									"\r",
									"//pm.collectionVariables.set(\"Language\",\"fr-\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{{{token}}}}",
									"type": "string"
								}
							]
						},
						"method": "{{METHOD}}",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"Language\": \"{{Language}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/apis/changelanguage",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"apis",
								"changelanguage"
							]
						}
					},
					"response": []
				},
				{
					"name": "Logout",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.globals.set(\"METHOD\", \"POST\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									" if(jsonData)\r",
									"    {\r",
									"        if(jsonData.hasError)\r",
									"        {\r",
									"                    pm.test(\"Response should be 200\", () => {\r",
									"                        pm.response.to.have.status(200);\r",
									"                        pm.response.to.be.not.empty;\r",
									"                        pm.response.to.be.json;\r",
									"                    });\r",
									"                    pm.test(\"Response should have error\", ()=> {  \r",
									"                        pm.response.to.be.not.empty;\r",
									"                        pm.response.to.be.json; \r",
									"                        pm.expect(jsonData.hasError).to.be.true;\r",
									"                    });\r",
									"                    pm.test(\"Error properties\", () => { \r",
									"                        pm.expect(jsonData.errors).not.empty;\r",
									"                    _.each(jsonData.errors, (item) => {\r",
									"                        console.log(item.errorNumber);\r",
									"                        console.log(item.errorMessage);\r",
									"                        }); \r",
									"                 });\r",
									"                 \r",
									"        }\r",
									"        else\r",
									"        {\r",
									"            pm.test(\"Test data type of the response\", () => {                \r",
									"                pm.expect(jsonData).to.be.an(\"object\");\r",
									"                pm.expect(jsonData.hasError).to.be.false;               \r",
									"            });\r",
									"            // pm.collectionVariables.unset(\"token\");\r",
									"            // pm.collectionVariables.unset(\"culture\");\r",
									"            // pm.collectionVariables.unset(\"ActorCode\");\r",
									"            // pm.collectionVariables.unset(\"baseUrl\");\r",
									"            // pm.collectionVariables.unset(\"Username\");\r",
									"            // pm.collectionVariables.unset(\"Password\");\r",
									"        }\r",
									"    }    "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{{{token}}}}",
									"type": "string"
								}
							]
						},
						"method": "{{METHOD}}",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/apis/logout",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"apis",
								"logout"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Translation APIs",
			"item": [
				{
					"name": "Login for Translation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"var schema = \r",
									"{\r",
									"    \"type\": \"object\",\r",
									"    \"required\": [\r",
									"        \"ActorFirstName\",\r",
									"        \"ActorLastName\",\r",
									"        \"RequirePasswordChange\",\r",
									"        \"Token\",\r",
									"        \"UserFullName\",\r",
									"        \"ActorCode\",\r",
									"        \"ActorCodeWithDomain\",\r",
									"        \"licId\",\r",
									"        \"sessionExpirationErrorCode\",\r",
									"        \"sessionExpirationErrorMessage\",\r",
									"        \"culture\",\r",
									"        \"LoggedOnRoleCode\",\r",
									"        \"hasError\"\r",
									"    ],\r",
									"    \"additionalProperties\": true,\r",
									"    \"properties\": {\r",
									"        \"ActorFirstName\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"ActorLastName\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"RequirePasswordChange\": {\r",
									"            \"type\": \"boolean\"\r",
									"        },\r",
									"        \"Token\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"UserFullName\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"ActorCode\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"ActorCodeWithDomain\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"licId\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"sessionExpirationErrorCode\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"sessionExpirationErrorMessage\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"culture\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"LoggedOnRoleCode\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"hasError\": {\r",
									"            \"type\": \"boolean\"\r",
									"        }\r",
									"    }\r",
									"};\r",
									"\r",
									"if(schema)\r",
									"{\r",
									" var jsonData = pm.response.json();\r",
									" if(jsonData)\r",
									"    {\r",
									"        if(jsonData.hasError)\r",
									"        {\r",
									"                    pm.test(\"Response should be 200\", () => {\r",
									"                        pm.response.to.have.status(200);\r",
									"                        pm.response.to.be.not.empty;\r",
									"                        pm.response.to.be.json;\r",
									"                    });\r",
									"                    pm.test(\"Response should have error\", ()=> {  \r",
									"                        pm.response.to.be.not.empty;\r",
									"                        pm.response.to.be.json; \r",
									"                        pm.expect(jsonData.hasError).to.be.true;\r",
									"                    });\r",
									"                    pm.test(\"Error properties\", () => { \r",
									"                        pm.expect(jsonData.errors).not.empty;\r",
									"                    _.each(jsonData.errors, (item) => {\r",
									"                        console.log(item.errorNumber);\r",
									"                        console.log(item.errorMessage);\r",
									"                        }); \r",
									"                 });\r",
									"        }\r",
									"        else\r",
									"        {\r",
									"            pm.test(\"Test data type of the response\", () => {                \r",
									"                pm.expect(jsonData).to.be.an(\"object\");\r",
									"                pm.expect(jsonData.hasError).to.be.false;\r",
									"                pm.expect(jsonData.Token).to.be.a(\"string\");\r",
									"                pm.expect(jsonData.ActorCode).to.be.an(\"string\");\r",
									"            });\r",
									"            pm.collectionVariables.set(\"token\", jsonData.Token);\r",
									"            pm.collectionVariables.set(\"culture\", JSON.stringify(jsonData.culture));\r",
									"            pm.collectionVariables.set(\"ActorCode\", jsonData.ActorCode);           \r",
									"        }\r",
									"        var Ajv = require('ajv');\r",
									"        const ajv = new Ajv();\r",
									"        pm.test(\"Login schema validation\", () => {\r",
									"        const validate = ajv.compile(schema);\r",
									"        console.log(validate);\r",
									"        const valid = validate(jsonData);\r",
									"        if(!valid) console.log(validate.errors);\r",
									"        console.log(valid);\r",
									"        pm.expect(valid).to.be.true;\r",
									"        });       \r",
									"    }\r",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.globals.set(\"METHOD\", \"POST\");\r",
									"console.log(\"value of base url from data file is: \"+pm.iterationData.get(\"baseUrl\"));\r",
									"console.log(\"value of username from data file is:: \"+pm.iterationData.get(\"Username\"));\r",
									"console.log(\"value of type from data file is: \"+pm.iterationData.get(\"Password\"));\r",
									"\r",
									"pm.collectionVariables.set(\"baseUrl\",pm.iterationData.get(\"baseUrl\"));\r",
									"pm.collectionVariables.set(\"Username\",pm.iterationData.get(\"Username\"));\r",
									"pm.collectionVariables.set(\"Password\",pm.iterationData.get(\"Password\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "{{METHOD}}",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"Username\": \"{{Username}}\", \r\n    \"Password\": \"{{Password}}\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/apis/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"apis",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Translation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response should be 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.not.empty;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response should has no error\", () => {\r",
									"    pm.response.to.be.not.empty;\r",
									"    pm.response.to.be.json;\r",
									"\r",
									"    var jsonData = JSON.parse(responseBody)\r",
									"    pm.expect(jsonData.hasError).to.eql(false);\r",
									"});\r",
									"\r",
									"pm.test(\"Response should has the translated value\", () => {\r",
									"    pm.response.to.be.not.empty;\r",
									"    pm.response.to.be.json;\r",
									"\r",
									"    var jsonData = JSON.parse(responseBody)\r",
									"    pm.expect(jsonData.Translation).not.empty;\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"value of type from data file is: \"+pm.iterationData.get(\"TranslationKey\"));\r",
									"\r",
									"pm.collectionVariables.set(\"TranslationKey\",pm.iterationData.get(\"TranslationKey\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{{{token}}}}",
									"type": "string"
								}
							]
						},
						"method": "{{METHOD}}",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{ \r\n    \"translationKey\": \"{{TranslationKey}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/apis/translation",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"apis",
								"translation"
							]
						}
					},
					"response": []
				},
				{
					"name": "System Translation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response should be 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.not.empty;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Response should has no error\", () => {\r",
									"    pm.response.to.be.not.empty;\r",
									"    pm.response.to.be.json;\r",
									"\r",
									"    var jsonData = JSON.parse(responseBody)\r",
									"    pm.expect(jsonData.hasError).to.eql(false);\r",
									"});\r",
									"\r",
									"pm.test(\"Response should has 281 system translations\", () => {\r",
									"    pm.response.to.be.not.empty;\r",
									"    pm.response.to.be.json;\r",
									"    var jsonData = JSON.parse(responseBody)\r",
									"    var count = Object.keys(jsonData.SystemTranslations).length;\r",
									"    console.log(\"count\" + count);\r",
									"    pm.expect(count).to.eql(293);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{{{token}}}}",
									"type": "string"
								}
							]
						},
						"method": "{{METHOD}}",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/apis/systemtranslation",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"apis",
								"systemtranslation"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Top Menu APIs",
			"item": [
				{
					"name": "Top Menu",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response should be 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.not.empty;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response should has no error\", () => {\r",
									"    pm.response.to.be.not.empty;\r",
									"    pm.response.to.be.json;\r",
									"\r",
									"    var jsonData = JSON.parse(responseBody)\r",
									"    pm.expect(jsonData.hasError).to.eql(false);\r",
									"});\r",
									"\r",
									"pm.test(\"Response should has the top menu values\", () => {\r",
									"    pm.response.to.be.not.empty;\r",
									"    pm.response.to.be.json;\r",
									"\r",
									"    var jsonData = JSON.parse(responseBody)\r",
									"    pm.expect(jsonData.TopMenu).not.empty;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{{{token}}}}",
									"type": "string"
								}
							]
						},
						"method": "{{METHOD}}",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/apis/topmenu",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"apis",
								"topmenu"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Application Option APIs",
			"item": [
				{
					"name": "Application Options",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response should be 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.not.empty;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response should has no error\", () => {\r",
									"    pm.response.to.be.not.empty;\r",
									"    pm.response.to.be.json;\r",
									"\r",
									"    var jsonData = JSON.parse(responseBody)\r",
									"    pm.expect(jsonData.hasError).to.eql(false);\r",
									"});\r",
									"\r",
									"pm.test(\"Response should has 16 ApplicationOptions\", () => {\r",
									"    pm.response.to.be.not.empty;\r",
									"    pm.response.to.be.json;\r",
									"\r",
									"    var jsonData = JSON.parse(responseBody)\r",
									"    var count = Object.keys(jsonData.ApplicationOptions).length;\r",
									"    console.log(\"count\" + count);\r",
									"    pm.expect(count).to.eql(17);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{{{token}}}}",
									"type": "string"
								}
							]
						},
						"method": "{{METHOD}}",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/apis/getApplicationOptions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"apis",
								"getApplicationOptions"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Module Is Installed APIs",
			"item": [
				{
					"name": "Module Is Installed",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response should be 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.not.empty;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Response should has no error\", () => {\r",
									"    pm.response.to.be.not.empty;\r",
									"    pm.response.to.be.json;\r",
									"\r",
									"    var jsonData = JSON.parse(responseBody)\r",
									"    pm.expect(jsonData.hasError).to.eql(false);\r",
									"});\r",
									"\r",
									"pm.test(\"Response should has the module installed\", () => {\r",
									"    pm.response.to.be.not.empty;\r",
									"    pm.response.to.be.json;\r",
									"\r",
									"    var jsonData = JSON.parse(responseBody)\r",
									"    pm.expect(jsonData.moduleIsInstalled).not.empty;\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"value of type from data file is: \"+pm.iterationData.get(\"ModuleName\"));\r",
									"\r",
									"pm.collectionVariables.set(\"ModuleName\",pm.iterationData.get(\"ModuleName\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{{{token}}}}",
									"type": "string"
								}
							]
						},
						"method": "{{METHOD}}",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"moduleName\": \"{{ModuleName}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/apis/moduleisinstalled",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"apis",
								"moduleisinstalled"
							]
						}
					},
					"response": []
				},
				{
					"name": "Modules Installed",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response should be 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.not.empty;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Response should has no error\", () => {\r",
									"    pm.response.to.be.not.empty;\r",
									"    pm.response.to.be.json;\r",
									"\r",
									"    var jsonData = JSON.parse(responseBody)\r",
									"    pm.expect(jsonData.hasError).to.eql(false);\r",
									"});\r",
									"\r",
									"pm.test(\"Response should has the installed Modules\", () => {\r",
									"    pm.response.to.be.not.empty;\r",
									"    pm.response.to.be.json;\r",
									"\r",
									"    var jsonData = JSON.parse(responseBody)\r",
									"    pm.expect(jsonData.installedModules).not.empty;\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"value of type from data file is: \"+pm.iterationData.get(\"ModuleName\"));\r",
									"\r",
									"pm.collectionVariables.set(\"ModuleName\",pm.iterationData.get(\"ModuleName\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{{{token}}}}",
									"type": "string"
								}
							]
						},
						"method": "{{METHOD}}",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"Application\": \"\",\r\n    \"IncludeVersionNumber\": \"{{IncludeVersionNumber}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/apis/modulesinstalled",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"apis",
								"modulesinstalled"
							]
						}
					},
					"response": []
				},
				{
					"name": "Custom Options Store",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response should be 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.not.empty;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Response should has no error\", () => {\r",
									"    pm.response.to.be.not.empty;\r",
									"    pm.response.to.be.json;\r",
									"\r",
									"    var jsonData = JSON.parse(responseBody)\r",
									"    pm.expect(jsonData.hasError).to.eql(false);\r",
									"});\r",
									"\r",
									"pm.test(\"Response should has the custom options\", () => {\r",
									"    pm.response.to.be.not.empty;\r",
									"    pm.response.to.be.json;\r",
									"\r",
									"    var jsonData = JSON.parse(responseBody)\r",
									"    pm.expect(jsonData.customOptions).not.empty;\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"value of type from data file is: \"+pm.iterationData.get(\"CustApplication\"));\r",
									"\r",
									"pm.collectionVariables.set(\"CustApplication\",pm.iterationData.get(\"CustApplication\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{{{token}}}}",
									"type": "string"
								}
							]
						},
						"method": "{{METHOD}}",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"Application\": \"{{CustApplication}}\",\r\n    \"Module\": \"\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/apis/customoptionsstore",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"apis",
								"customoptionsstore"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "User Role APIs",
			"item": [
				{
					"name": "User Role",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response should be 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.not.empty;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Response should has no error\", () => {\r",
									"    pm.response.to.be.not.empty;\r",
									"    pm.response.to.be.json;\r",
									"\r",
									"    var jsonData = JSON.parse(responseBody)\r",
									"    pm.expect(jsonData.hasError).to.eql(false);\r",
									"});\r",
									"\r",
									"pm.test(\"Response should has the user roles\", () => {\r",
									"    pm.response.to.be.not.empty;\r",
									"    pm.response.to.be.json;\r",
									"\r",
									"    var jsonData = JSON.parse(responseBody)\r",
									"    pm.expect(jsonData.UserRoles).not.empty;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{{{token}}}}",
									"type": "string"
								}
							]
						},
						"method": "{{METHOD}}",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/apis/userroles",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"apis",
								"userroles"
							]
						}
					},
					"response": []
				},
				{
					"name": "Userdata",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response should be 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.not.empty;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Response should has no error\", () => {\r",
									"    pm.response.to.be.not.empty;\r",
									"    pm.response.to.be.json;\r",
									"\r",
									"    var jsonData = JSON.parse(responseBody)\r",
									"    pm.expect(jsonData.hasError).to.eql(false);\r",
									"});\r",
									"\r",
									"pm.test(\"Response should has the user roles\", () => {\r",
									"    pm.response.to.be.not.empty;\r",
									"    pm.response.to.be.json;\r",
									"\r",
									"    var jsonData = JSON.parse(responseBody)\r",
									"    pm.expect(jsonData.UserRoles).not.empty;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{{{token}}}}",
									"type": "string"
								}
							]
						},
						"method": "{{METHOD}}",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/apis/userroles",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"apis",
								"userroles"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Regulatory Terms APIs",
			"item": [
				{
					"name": "Get Regulatory Terms",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"value of type from data file is: \"+pm.iterationData.get(\"TranslationKey\"));\r",
									"\r",
									"pm.collectionVariables.set(\"TranslationKey\",pm.iterationData.get(\"TranslationKey\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response should be 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.not.empty;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Response should has no error\", () => {\r",
									"    pm.response.to.be.not.empty;\r",
									"    pm.response.to.be.json;\r",
									"\r",
									"    var jsonData = JSON.parse(responseBody)\r",
									"    pm.expect(jsonData.hasError).to.eql(false);\r",
									"});\r",
									"\r",
									"pm.test(\"Response should has the user roles\", () => {\r",
									"    pm.response.to.be.not.empty;\r",
									"    pm.response.to.be.json;\r",
									"\r",
									"    var jsonData = JSON.parse(responseBody)\r",
									"    pm.expect(jsonData.UserRoles).not.empty;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{{{token}}}}",
									"type": "string"
								}
							]
						},
						"method": "{{METHOD}}",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [],
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/apis/getregulatoryterms",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"apis",
								"getregulatoryterms"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Form Definition APIs",
			"item": [
				{
					"name": "Get Form Definition",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var currentWorkflowId = pm.collectionVariables.get(\"currentWorkflowId\");\r",
									"var stepId = pm.collectionVariables.get(\"stepId\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response should be 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.not.empty;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Response should has no error\", () => {\r",
									"    pm.response.to.be.not.empty;\r",
									"    pm.response.to.be.json;\r",
									"\r",
									"    var jsonData = JSON.parse(responseBody)\r",
									"    pm.expect(jsonData.hasError).to.eql(false);\r",
									"});\r",
									"\r",
									"pm.test(\"Response should has the user roles\", () => {\r",
									"    pm.response.to.be.not.empty;\r",
									"    pm.response.to.be.json;\r",
									"\r",
									"    var jsonData = JSON.parse(responseBody)\r",
									"    pm.expect(jsonData.UserRoles).not.empty;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "{{METHOD}}",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"orgId\": \"\",\r\n    \"formKey\": \"\",\r\n    \"containerWorkflowKey\": \"\",\r\n    \"workflowKey\": \"\",\r\n    \"workflowId\": \"{{currentWorkflowId}}\",\r\n    \"stepId\": \"{{stepId}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/apis/getformdefinition",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"apis",
								"getformdefinition"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Form Element Translation APIs",
			"item": [
				{
					"name": "Form Element Translation",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var currentWorkflowId = pm.collectionVariables.get(\"currentWorkflowId\");\r",
									"var stepId = pm.collectionVariables.get(\"stepId\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response should be 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.not.empty;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Response should has no error\", () => {\r",
									"    pm.response.to.be.not.empty;\r",
									"    pm.response.to.be.json;\r",
									"\r",
									"    var jsonData = JSON.parse(responseBody)\r",
									"    pm.expect(jsonData.hasError).to.eql(false);\r",
									"});\r",
									"\r",
									"pm.test(\"Response should has the user roles\", () => {\r",
									"    pm.response.to.be.not.empty;\r",
									"    pm.response.to.be.json;\r",
									"\r",
									"    var jsonData = JSON.parse(responseBody)\r",
									"    pm.expect(jsonData.UserRoles).not.empty;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{{{token}}}}",
									"type": "string"
								}
							]
						},
						"method": "{{METHOD}}",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"formEntityKey\":\"\",\r\n    \"formKey\": \"\",\r\n    \"containerWorkflowKey\": \"\",\r\n    \"workflowKey\": \"\",\r\n    \"workflowId\": \"{{currentWorkflowId}}\",\r\n    \"stepId\": \"{{stepId}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/apis/formelementtranslation",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"apis",
								"formelementtranslation"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Support Data APIs",
			"item": [
				{
					"name": "Get Support Data Type",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response should be 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.not.empty;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Response should has no error\", () => {\r",
									"    pm.response.to.be.not.empty;\r",
									"    pm.response.to.be.json;\r",
									"\r",
									"    var jsonData = JSON.parse(responseBody)\r",
									"    pm.expect(jsonData.hasError).to.eql(false);\r",
									"});\r",
									"\r",
									"pm.test(\"Response should has the support data information\", () => {\r",
									"    pm.response.to.be.not.empty;\r",
									"    pm.response.to.be.json;\r",
									"\r",
									"    var jsonData = JSON.parse(responseBody)\r",
									"    pm.expect(jsonData.GetSupportData).not.empty;\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var solution = pm.collectionVariables.get(\"SolutionCode\");\r",
									"var solname = \"V_SS_\"+solution;\r",
									"let entitydata = '';\r",
									"\r",
									"if (solution == 'CAPA'){\r",
									"    entitydata = {\r",
									"    \"cacheData\": true,\r",
									"    \"caseInsensitiveSearch\": false,\r",
									"    \"columnList\": [\r",
									"        \"LST_ID\",\r",
									"        \"LST_OBJECT_NAME\",\r",
									"        \"LST_ORG_ID\",\r",
									"        \"LST_PARENT_OBJECT\",\r",
									"        \"LST_PARENT_VALUE\",\r",
									"        \"LST_SORT_ORDER\",\r",
									"        \"LST_VALUE\",\r",
									"        \"LST_VALUE1\",\r",
									"        \"LST_VALUE2\",\r",
									"        \"LST_VALUE3\",\r",
									"        \"LST_VALUE4\",\r",
									"        \"LST_VALUE5\"\r",
									"    ],\r",
									"    \"dataKeyField\": \"\",\r",
									"    \"dataSourceName\": \"CAPA Type\",\r",
									"    \"dataSourceType\": 6,\r",
									"    \"dataSourceTypeStr\": \"LISTDATA\",\r",
									"    \"filter\": [],\r",
									"    \"getTotalRows\": false,\r",
									"    \"orderBy\": null,\r",
									"    \"sortExpression\": \"\",\r",
									"    \"pageNumber\": 1,\r",
									"    \"pageSize\": 0,\r",
									"    \"queryName\": null,\r",
									"    \"searchOption\": null,\r",
									"    \"searchText\": null\r",
									"};\r",
									"}\r",
									"pm.collectionVariables.unset('typeentitydata');\r",
									"pm.collectionVariables.set('typeentitydata', JSON.stringify(entitydata));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{{{token}}}}",
									"type": "string"
								}
							]
						},
						"method": "{{METHOD}}",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{typeentitydata}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/apis/getSupportData",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"apis",
								"getSupportData"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Support Data Category",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response should be 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.not.empty;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Response should has no error\", () => {\r",
									"    pm.response.to.be.not.empty;\r",
									"    pm.response.to.be.json;\r",
									"\r",
									"    var jsonData = JSON.parse(responseBody)\r",
									"    pm.expect(jsonData.hasError).to.eql(false);\r",
									"});\r",
									"\r",
									"pm.test(\"Response should has the support data information\", () => {\r",
									"    pm.response.to.be.not.empty;\r",
									"    pm.response.to.be.json;\r",
									"\r",
									"    var jsonData = JSON.parse(responseBody)\r",
									"    pm.expect(jsonData.GetSupportData).not.empty;\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var solution = pm.collectionVariables.get(\"SolutionCode\");\r",
									"var solname = \"V_SS_\"+solution;\r",
									"let entitydata = '';\r",
									"\r",
									"if (solution == 'CAPA'){\r",
									"    entitydata = {\r",
									"    \"cacheData\": true,\r",
									"    \"caseInsensitiveSearch\": false,\r",
									"    \"columnList\": [\r",
									"        \"LST_ID\",\r",
									"        \"LST_OBJECT_NAME\",\r",
									"        \"LST_ORG_ID\",\r",
									"        \"LST_PARENT_OBJECT\",\r",
									"        \"LST_PARENT_VALUE\",\r",
									"        \"LST_SORT_ORDER\",\r",
									"        \"LST_VALUE\",\r",
									"        \"LST_VALUE1\",\r",
									"        \"LST_VALUE2\",\r",
									"        \"LST_VALUE3\",\r",
									"        \"LST_VALUE4\",\r",
									"        \"LST_VALUE5\"\r",
									"    ],\r",
									"    \"dataKeyField\": \"\",\r",
									"    \"dataSourceName\": \"CAPA Category\",\r",
									"    \"dataSourceType\": 6,\r",
									"    \"dataSourceTypeStr\": \"LISTDATA\",\r",
									"    \"filter\": [],\r",
									"    \"getTotalRows\": false,\r",
									"    \"orderBy\": null,\r",
									"    \"sortExpression\": \"\",\r",
									"    \"pageNumber\": 1,\r",
									"    \"pageSize\": 0,\r",
									"    \"queryName\": null,\r",
									"    \"searchOption\": null,\r",
									"    \"searchText\": null\r",
									"};\r",
									"}\r",
									"pm.collectionVariables.unset('categoryentitydata');\r",
									"pm.collectionVariables.set('categoryentitydata', JSON.stringify(entitydata));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{{{token}}}}",
									"type": "string"
								}
							]
						},
						"method": "{{METHOD}}",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{categoryentitydata}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/apis/getSupportData",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"apis",
								"getSupportData"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Support Data Source",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response should be 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.not.empty;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Response should has no error\", () => {\r",
									"    pm.response.to.be.not.empty;\r",
									"    pm.response.to.be.json;\r",
									"\r",
									"    var jsonData = JSON.parse(responseBody)\r",
									"    pm.expect(jsonData.hasError).to.eql(false);\r",
									"});\r",
									"\r",
									"pm.test(\"Response should has the support data information\", () => {\r",
									"    pm.response.to.be.not.empty;\r",
									"    pm.response.to.be.json;\r",
									"\r",
									"    var jsonData = JSON.parse(responseBody)\r",
									"    pm.expect(jsonData.GetSupportData).not.empty;\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var solution = pm.collectionVariables.get(\"SolutionCode\");\r",
									"var solname = \"V_SS_\"+solution;\r",
									"let entitydata = '';\r",
									"\r",
									"if (solution == 'CAPA'){\r",
									"    entitydata = {\r",
									"    \"cacheData\": true,\r",
									"    \"caseInsensitiveSearch\": false,\r",
									"    \"columnList\": [\r",
									"        \"LST_ID\",\r",
									"        \"LST_OBJECT_NAME\",\r",
									"        \"LST_ORG_ID\",\r",
									"        \"LST_PARENT_OBJECT\",\r",
									"        \"LST_PARENT_VALUE\",\r",
									"        \"LST_SORT_ORDER\",\r",
									"        \"LST_VALUE\",\r",
									"        \"LST_VALUE1\",\r",
									"        \"LST_VALUE2\",\r",
									"        \"LST_VALUE3\",\r",
									"        \"LST_VALUE4\",\r",
									"        \"LST_VALUE5\"\r",
									"    ],\r",
									"    \"dataKeyField\": \"\",\r",
									"    \"dataSourceName\": \"CAPA Source\",\r",
									"    \"dataSourceType\": 6,\r",
									"    \"dataSourceTypeStr\": \"LISTDATA\",\r",
									"    \"filter\": [],\r",
									"    \"getTotalRows\": false,\r",
									"    \"orderBy\": null,\r",
									"    \"sortExpression\": \"\",\r",
									"    \"pageNumber\": 1,\r",
									"    \"pageSize\": 0,\r",
									"    \"queryName\": null,\r",
									"    \"searchOption\": null,\r",
									"    \"searchText\": null\r",
									"};\r",
									"}\r",
									"pm.collectionVariables.unset('sourceentitydata');\r",
									"pm.collectionVariables.set('sourceentitydata', JSON.stringify(entitydata));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{{{token}}}}",
									"type": "string"
								}
							]
						},
						"method": "{{METHOD}}",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{sourceentitydata}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/apis/getSupportData",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"apis",
								"getSupportData"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Support Data Occerence Rating",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response should be 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.not.empty;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Response should has no error\", () => {\r",
									"    pm.response.to.be.not.empty;\r",
									"    pm.response.to.be.json;\r",
									"\r",
									"    var jsonData = JSON.parse(responseBody)\r",
									"    pm.expect(jsonData.hasError).to.eql(false);\r",
									"});\r",
									"\r",
									"pm.test(\"Response should has the support data information\", () => {\r",
									"    pm.response.to.be.not.empty;\r",
									"    pm.response.to.be.json;\r",
									"\r",
									"    var jsonData = JSON.parse(responseBody)\r",
									"    pm.expect(jsonData.GetSupportData).not.empty;\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var solution = pm.collectionVariables.get(\"SolutionCode\");\r",
									"var solname = \"V_SS_\"+solution;\r",
									"let entitydata = '';\r",
									"\r",
									"if (solution == 'CAPA'){\r",
									"    entitydata = {\r",
									"    \"cacheData\": true,\r",
									"    \"caseInsensitiveSearch\": false,\r",
									"    \"columnList\": [\r",
									"        \"LST_ID\",\r",
									"        \"LST_OBJECT_NAME\",\r",
									"        \"LST_ORG_ID\",\r",
									"        \"LST_PARENT_OBJECT\",\r",
									"        \"LST_PARENT_VALUE\",\r",
									"        \"LST_SORT_ORDER\",\r",
									"        \"LST_VALUE\",\r",
									"        \"LST_VALUE1\",\r",
									"        \"LST_VALUE2\",\r",
									"        \"LST_VALUE3\",\r",
									"        \"LST_VALUE4\",\r",
									"        \"LST_VALUE5\"\r",
									"    ],\r",
									"    \"dataKeyField\": \"\",\r",
									"    \"dataSourceName\": \"CAPA RA Occurence Rating\",\r",
									"    \"dataSourceType\": 6,\r",
									"    \"dataSourceTypeStr\": \"LISTDATA\",\r",
									"    \"filter\": [],\r",
									"    \"getTotalRows\": false,\r",
									"    \"orderBy\": null,\r",
									"    \"sortExpression\": \"\",\r",
									"    \"pageNumber\": 1,\r",
									"    \"pageSize\": 0,\r",
									"    \"queryName\": null,\r",
									"    \"searchOption\": null,\r",
									"    \"searchText\": null\r",
									"};\r",
									"}\r",
									"pm.collectionVariables.unset('orentitydata');\r",
									"pm.collectionVariables.set('orentitydata', JSON.stringify(entitydata));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{{{token}}}}",
									"type": "string"
								}
							]
						},
						"method": "{{METHOD}}",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{orentitydata}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/apis/getSupportData",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"apis",
								"getSupportData"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Support Data Detection Rating",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response should be 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.not.empty;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Response should has no error\", () => {\r",
									"    pm.response.to.be.not.empty;\r",
									"    pm.response.to.be.json;\r",
									"\r",
									"    var jsonData = JSON.parse(responseBody)\r",
									"    pm.expect(jsonData.hasError).to.eql(false);\r",
									"});\r",
									"\r",
									"pm.test(\"Response should has the support data information\", () => {\r",
									"    pm.response.to.be.not.empty;\r",
									"    pm.response.to.be.json;\r",
									"\r",
									"    var jsonData = JSON.parse(responseBody)\r",
									"    pm.expect(jsonData.GetSupportData).not.empty;\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var solution = pm.collectionVariables.get(\"SolutionCode\");\r",
									"var solname = \"V_SS_\"+solution;\r",
									"let entitydata = '';\r",
									"\r",
									"if (solution == 'CAPA'){\r",
									"    entitydata = {\r",
									"    \"cacheData\": true,\r",
									"    \"caseInsensitiveSearch\": false,\r",
									"    \"columnList\": [\r",
									"        \"LST_ID\",\r",
									"        \"LST_OBJECT_NAME\",\r",
									"        \"LST_ORG_ID\",\r",
									"        \"LST_PARENT_OBJECT\",\r",
									"        \"LST_PARENT_VALUE\",\r",
									"        \"LST_SORT_ORDER\",\r",
									"        \"LST_VALUE\",\r",
									"        \"LST_VALUE1\",\r",
									"        \"LST_VALUE2\",\r",
									"        \"LST_VALUE3\",\r",
									"        \"LST_VALUE4\",\r",
									"        \"LST_VALUE5\"\r",
									"    ],\r",
									"    \"dataKeyField\": \"\",\r",
									"    \"dataSourceName\": \"CAPA RA Detection Rating\",\r",
									"    \"dataSourceType\": 6,\r",
									"    \"dataSourceTypeStr\": \"LISTDATA\",\r",
									"    \"filter\": [],\r",
									"    \"getTotalRows\": false,\r",
									"    \"orderBy\": null,\r",
									"    \"sortExpression\": \"\",\r",
									"    \"pageNumber\": 1,\r",
									"    \"pageSize\": 0,\r",
									"    \"queryName\": null,\r",
									"    \"searchOption\": null,\r",
									"    \"searchText\": null\r",
									"};\r",
									"}\r",
									"pm.collectionVariables.unset('drentitydata');\r",
									"pm.collectionVariables.set('drentitydata', JSON.stringify(entitydata));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{{{token}}}}",
									"type": "string"
								}
							]
						},
						"method": "{{METHOD}}",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{drentitydata}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/apis/getSupportData",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"apis",
								"getSupportData"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Support Data Risk Based",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response should be 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.not.empty;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Response should has no error\", () => {\r",
									"    pm.response.to.be.not.empty;\r",
									"    pm.response.to.be.json;\r",
									"\r",
									"    var jsonData = JSON.parse(responseBody)\r",
									"    pm.expect(jsonData.hasError).to.eql(false);\r",
									"});\r",
									"\r",
									"pm.test(\"Response should has the support data information\", () => {\r",
									"    pm.response.to.be.not.empty;\r",
									"    pm.response.to.be.json;\r",
									"\r",
									"    var jsonData = JSON.parse(responseBody)\r",
									"    pm.expect(jsonData.GetSupportData).not.empty;\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var solution = pm.collectionVariables.get(\"SolutionCode\");\r",
									"var solname = \"V_SS_\"+solution;\r",
									"let entitydata = '';\r",
									"\r",
									"if (solution == 'CAPA'){\r",
									"    entitydata = {\r",
									"    \"cacheData\": true,\r",
									"    \"caseInsensitiveSearch\": false,\r",
									"    \"columnList\": [\r",
									"        \"LST_ID\",\r",
									"        \"LST_OBJECT_NAME\",\r",
									"        \"LST_ORG_ID\",\r",
									"        \"LST_PARENT_OBJECT\",\r",
									"        \"LST_PARENT_VALUE\",\r",
									"        \"LST_SORT_ORDER\",\r",
									"        \"LST_VALUE\",\r",
									"        \"LST_VALUE1\",\r",
									"        \"LST_VALUE2\",\r",
									"        \"LST_VALUE3\",\r",
									"        \"LST_VALUE4\",\r",
									"        \"LST_VALUE5\"\r",
									"    ],\r",
									"    \"dataKeyField\": \"\",\r",
									"    \"dataSourceName\": \"CAPA Risk Based On\",\r",
									"    \"dataSourceType\": 6,\r",
									"    \"dataSourceTypeStr\": \"LISTDATA\",\r",
									"    \"filter\": [],\r",
									"    \"getTotalRows\": false,\r",
									"    \"orderBy\": null,\r",
									"    \"sortExpression\": \"\",\r",
									"    \"pageNumber\": 1,\r",
									"    \"pageSize\": 0,\r",
									"    \"queryName\": null,\r",
									"    \"searchOption\": null,\r",
									"    \"searchText\": null\r",
									"};\r",
									"}\r",
									"pm.collectionVariables.unset('riskbasedentitydata');\r",
									"pm.collectionVariables.set('riskbasedentitydata', JSON.stringify(entitydata));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{{{token}}}}",
									"type": "string"
								}
							]
						},
						"method": "{{METHOD}}",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{riskbasedentitydata}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/apis/getSupportData",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"apis",
								"getSupportData"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Support Data - Group Member Type",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response should be 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.not.empty;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Response should has no error\", () => {\r",
									"    pm.response.to.be.not.empty;\r",
									"    pm.response.to.be.json;\r",
									"\r",
									"    var jsonData = JSON.parse(responseBody)\r",
									"    pm.expect(jsonData.hasError).to.eql(false);\r",
									"});\r",
									"\r",
									"pm.test(\"Response should has the support data information\", () => {\r",
									"    pm.response.to.be.not.empty;\r",
									"    pm.response.to.be.json;\r",
									"\r",
									"    var jsonData = JSON.parse(responseBody)\r",
									"    pm.expect(jsonData.GetSupportData).not.empty;\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var solution = pm.collectionVariables.get(\"SolutionCode\");\r",
									"var solname = \"V_SS_\"+solution;\r",
									"let entitydata = '';\r",
									"\r",
									"if (solution == 'CAPA'){\r",
									"    entitydata = {\r",
									"\t\"cacheData\": true,\r",
									"\t\"caseInsensitiveSearch\": false,\r",
									"\t\"columnList\": [\r",
									"\t\t\"LST_ID\",\r",
									"\t\t\"LST_OBJECT_NAME\",\r",
									"\t\t\"LST_ORG_ID\",\r",
									"\t\t\"LST_PARENT_OBJECT\",\r",
									"\t\t\"LST_PARENT_VALUE\",\r",
									"\t\t\"LST_SORT_ORDER\",\r",
									"\t\t\"LST_VALUE\",\r",
									"\t\t\"LST_VALUE1\",\r",
									"\t\t\"LST_VALUE2\",\r",
									"\t\t\"LST_VALUE3\",\r",
									"\t\t\"LST_VALUE4\",\r",
									"\t\t\"LST_VALUE5\"\r",
									"\t],\r",
									"\t\"dataKeyField\": \"\",\r",
									"\t\"dataSourceName\": \"Group Member Type\",\r",
									"\t\"dataSourceType\": 6,\r",
									"\t\"dataSourceTypeStr\": \"LISTDATA\",\r",
									"\t\"filter\": [\r",
									"\t\t{\r",
									"\t\t\t\"openGroup\": \"false\",\r",
									"\t\t\t\"leftType\": \"datasource\",\r",
									"\t\t\t\"leftValue\": \"LST_VALUE1\",\r",
									"\t\t\t\"op\": \"EQ\",\r",
									"\t\t\t\"rightType\": \"text\",\r",
									"\t\t\t\"rightValue\": \"Approval\",\r",
									"\t\t\t\"closeGroup\": \"false\",\r",
									"\t\t\t\"relationalOp\": \"AND\"\r",
									"\t\t}\r",
									"\t],\r",
									"\t\"getTotalRows\": false,\r",
									"\t\"orderBy\": [],\r",
									"\t\"pageNumber\": 1,\r",
									"\t\"pageSize\": 0,\r",
									"\t\"queryName\": null,\r",
									"\t\"searchOption\": null,\r",
									"\t\"searchText\": null\r",
									"};\r",
									"}\r",
									"pm.collectionVariables.unset('gmtentitydata');\r",
									"pm.collectionVariables.set('gmtentitydata', JSON.stringify(entitydata));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{{{token}}}}",
									"type": "string"
								}
							]
						},
						"method": "{{METHOD}}",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{gmtentitydata}}\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/apis/getSupportData",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"apis",
								"getSupportData"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Support Data Failure Mode Policy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response should be 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.not.empty;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Response should has no error\", () => {\r",
									"    pm.response.to.be.not.empty;\r",
									"    pm.response.to.be.json;\r",
									"\r",
									"    var jsonData = JSON.parse(responseBody)\r",
									"    pm.expect(jsonData.hasError).to.eql(false);\r",
									"});\r",
									"\r",
									"pm.test(\"Response should has the support data information\", () => {\r",
									"    pm.response.to.be.not.empty;\r",
									"    pm.response.to.be.json;\r",
									"\r",
									"    var jsonData = JSON.parse(responseBody)\r",
									"    pm.expect(jsonData.GetSupportData).not.empty;\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var solution = pm.collectionVariables.get(\"SolutionCode\");\r",
									"var solname = \"V_SS_\"+solution;\r",
									"let entitydata = '';\r",
									"\r",
									"if (solution == 'CAPA'){\r",
									"    entitydata = {\r",
									"    \"cacheData\": true,\r",
									"    \"caseInsensitiveSearch\": false,\r",
									"    \"columnList\": [\r",
									"        \"LST_ID\",\r",
									"        \"LST_OBJECT_NAME\",\r",
									"        \"LST_ORG_ID\",\r",
									"        \"LST_PARENT_OBJECT\",\r",
									"        \"LST_PARENT_VALUE\",\r",
									"        \"LST_SORT_ORDER\",\r",
									"        \"LST_VALUE\",\r",
									"        \"LST_VALUE1\",\r",
									"        \"LST_VALUE2\",\r",
									"        \"LST_VALUE3\",\r",
									"        \"LST_VALUE4\",\r",
									"        \"LST_VALUE5\"\r",
									"    ],\r",
									"    \"dataKeyField\": \"\",\r",
									"    \"dataSourceName\": \"CAPA New Failure Mode Policy\",\r",
									"    \"dataSourceType\": 6,\r",
									"    \"dataSourceTypeStr\": \"LISTDATA\",\r",
									"    \"filter\": [],\r",
									"    \"getTotalRows\": false,\r",
									"    \"orderBy\": null,\r",
									"    \"sortExpression\": \"\",\r",
									"    \"pageNumber\": 1,\r",
									"    \"pageSize\": 0,\r",
									"    \"queryName\": null,\r",
									"    \"searchOption\": null,\r",
									"    \"searchText\": null\r",
									"};\r",
									"}\r",
									"pm.collectionVariables.unset('fmpentitydata');\r",
									"pm.collectionVariables.set('fmpentitydata', JSON.stringify(entitydata));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{{{token}}}}",
									"type": "string"
								}
							]
						},
						"method": "{{METHOD}}",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{fmpentitydata}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/apis/getSupportData",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"apis",
								"getSupportData"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Support Data Priority",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response should be 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.not.empty;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Response should has no error\", () => {\r",
									"    pm.response.to.be.not.empty;\r",
									"    pm.response.to.be.json;\r",
									"\r",
									"    var jsonData = JSON.parse(responseBody)\r",
									"    pm.expect(jsonData.hasError).to.eql(false);\r",
									"});\r",
									"\r",
									"pm.test(\"Response should has the support data information\", () => {\r",
									"    pm.response.to.be.not.empty;\r",
									"    pm.response.to.be.json;\r",
									"\r",
									"    var jsonData = JSON.parse(responseBody)\r",
									"    pm.expect(jsonData.GetSupportData).not.empty;\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var solution = pm.collectionVariables.get(\"SolutionCode\");\r",
									"var solname = \"V_SS_\"+solution;\r",
									"let entitydata = '';\r",
									"\r",
									"if (solution == 'CAPA'){\r",
									"    entitydata = {\r",
									"    \"cacheData\": false,\r",
									"    \"caseInsensitiveSearch\": false,\r",
									"    \"columnList\": [\r",
									"        \"XPR_CODE\",\r",
									"        \"XPR_RANK\"\r",
									"    ],\r",
									"    \"dataKeyField\": \"\",\r",
									"    \"dataSourceName\": \"Priority\",\r",
									"    \"dataSourceType\": 3,\r",
									"    \"dataSourceTypeStr\": \"SMARTSOLVEDATA\",\r",
									"    \"filter\": [],\r",
									"    \"getTotalRows\": false,\r",
									"    \"orderBy\": null,\r",
									"    \"sortExpression\": \"XPR_RANK ASC\",\r",
									"    \"pageNumber\": 1,\r",
									"    \"pageSize\": 0,\r",
									"    \"queryName\": null,\r",
									"    \"searchOption\": null,\r",
									"    \"searchText\": null\r",
									"};\r",
									"}\r",
									"pm.collectionVariables.unset('priorityentitydata');\r",
									"pm.collectionVariables.set('priorityentitydata', JSON.stringify(entitydata));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{{{token}}}}",
									"type": "string"
								}
							]
						},
						"method": "{{METHOD}}",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{priorityentitydata}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/apis/getSupportData",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"apis",
								"getSupportData"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Support Data Investigation Tools",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response should be 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.not.empty;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Response should has no error\", () => {\r",
									"    pm.response.to.be.not.empty;\r",
									"    pm.response.to.be.json;\r",
									"\r",
									"    var jsonData = JSON.parse(responseBody)\r",
									"    pm.expect(jsonData.hasError).to.eql(false);\r",
									"});\r",
									"\r",
									"pm.test(\"Response should has the support data information\", () => {\r",
									"    pm.response.to.be.not.empty;\r",
									"    pm.response.to.be.json;\r",
									"\r",
									"    var jsonData = JSON.parse(responseBody)\r",
									"    pm.expect(jsonData.GetSupportData).not.empty;\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var solution = pm.collectionVariables.get(\"SolutionCode\");\r",
									"var solname = \"V_SS_\"+solution;\r",
									"let entitydata = '';\r",
									"\r",
									"if (solution == 'CAPA'){\r",
									"    entitydata = {\r",
									"    \"cacheData\": true,\r",
									"    \"caseInsensitiveSearch\": false,\r",
									"    \"columnList\": [\r",
									"        \"LST_ID\",\r",
									"        \"LST_OBJECT_NAME\",\r",
									"        \"LST_ORG_ID\",\r",
									"        \"LST_PARENT_OBJECT\",\r",
									"        \"LST_PARENT_VALUE\",\r",
									"        \"LST_SORT_ORDER\",\r",
									"        \"LST_VALUE\",\r",
									"        \"LST_VALUE1\",\r",
									"        \"LST_VALUE2\",\r",
									"        \"LST_VALUE3\",\r",
									"        \"LST_VALUE4\",\r",
									"        \"LST_VALUE5\"\r",
									"    ],\r",
									"    \"dataKeyField\": \"\",\r",
									"    \"dataSourceName\": \"CAPA  Investigation Tools\",\r",
									"    \"dataSourceType\": 6,\r",
									"    \"dataSourceTypeStr\": \"LISTDATA\",\r",
									"    \"filter\": [],\r",
									"    \"getTotalRows\": false,\r",
									"    \"orderBy\": null,\r",
									"    \"sortExpression\": \"\",\r",
									"    \"pageNumber\": 1,\r",
									"    \"pageSize\": 0,\r",
									"    \"queryName\": null,\r",
									"    \"searchOption\": null,\r",
									"    \"searchText\": null\r",
									"};\r",
									"}\r",
									"pm.collectionVariables.unset('itentitydata');\r",
									"pm.collectionVariables.set('itentitydata', JSON.stringify(entitydata));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{{{token}}}}",
									"type": "string"
								}
							]
						},
						"method": "{{METHOD}}",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{itentitydata}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/apis/getSupportData",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"apis",
								"getSupportData"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Support Data Root Cause",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response should be 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.not.empty;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Response should has no error\", () => {\r",
									"    pm.response.to.be.not.empty;\r",
									"    pm.response.to.be.json;\r",
									"\r",
									"    var jsonData = JSON.parse(responseBody)\r",
									"    pm.expect(jsonData.hasError).to.eql(false);\r",
									"});\r",
									"\r",
									"pm.test(\"Response should has the support data information\", () => {\r",
									"    pm.response.to.be.not.empty;\r",
									"    pm.response.to.be.json;\r",
									"\r",
									"    var jsonData = JSON.parse(responseBody)\r",
									"    pm.expect(jsonData.GetSupportData).not.empty;\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var solution = pm.collectionVariables.get(\"SolutionCode\");\r",
									"var solname = \"V_SS_\"+solution;\r",
									"let entitydata = '';\r",
									"\r",
									"if (solution == 'CAPA'){\r",
									"    entitydata = {\r",
									"    \"cacheData\": true,\r",
									"    \"caseInsensitiveSearch\": false,\r",
									"    \"columnList\": [\r",
									"        \"LST_ID\",\r",
									"        \"LST_OBJECT_NAME\",\r",
									"        \"LST_ORG_ID\",\r",
									"        \"LST_PARENT_OBJECT\",\r",
									"        \"LST_PARENT_VALUE\",\r",
									"        \"LST_SORT_ORDER\",\r",
									"        \"LST_VALUE\",\r",
									"        \"LST_VALUE1\",\r",
									"        \"LST_VALUE2\",\r",
									"        \"LST_VALUE3\",\r",
									"        \"LST_VALUE4\",\r",
									"        \"LST_VALUE5\"\r",
									"    ],\r",
									"    \"dataKeyField\": \"\",\r",
									"    \"dataSourceName\": \"CAPA Root Cause\",\r",
									"    \"dataSourceType\": 6,\r",
									"    \"dataSourceTypeStr\": \"LISTDATA\",\r",
									"    \"filter\": [],\r",
									"    \"getTotalRows\": false,\r",
									"    \"orderBy\": null,\r",
									"    \"sortExpression\": \"\",\r",
									"    \"pageNumber\": 1,\r",
									"    \"pageSize\": 0,\r",
									"    \"queryName\": null,\r",
									"    \"searchOption\": null,\r",
									"    \"searchText\": null\r",
									"};\r",
									"}\r",
									"pm.collectionVariables.unset('rcentitydata');\r",
									"pm.collectionVariables.set('rcentitydata', JSON.stringify(entitydata));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{{{token}}}}",
									"type": "string"
								}
							]
						},
						"method": "{{METHOD}}",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{rcentitydata}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/apis/getSupportData",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"apis",
								"getSupportData"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Search Data APIs",
			"item": [
				{
					"name": "Get Search Data",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var solution = pm.collectionVariables.get(\"SolutionCode\");\r",
									"var solname = \"V_SS_\"+solution;\r",
									"var prodlinecode = solname+\".PRODUCTLINE_CODE\";\r",
									"var prodlinename = solname+\".PRODUCTLINE_NAME\";\r",
									"var prodname =solname+\".PRODUCT_NAME\";\r",
									"var prodcode =solname+\".PRODUCT_CODE\";\r",
									"\r",
									"let entitydata = '';\r",
									"\r",
									"if (solution == 'CAPA'){\r",
									"    entitydata = {\r",
									"    \"entityName\": \"PlantArea\",\r",
									"    \"currentPageIndex\": 0,\r",
									"    \"pageSize\": 10,\r",
									"    \"filter\": [],\r",
									"    \"sortExpression\": \"\",\r",
									"    \"referencedColumns\": {\r",
									"        \"V_SS_CAPA.PLANT_AREA_NAME\": \"RSR_NAME\",\r",
									"        \"V_SS_CAPA.PLANT_AREA_CODE\": \"RSR_CODE\"\r",
									"    },\r",
									"    \"dynamicParamCollection\": {},\r",
									"    \"savedSearchName\": \"\"\r",
									"};\r",
									"}\r",
									"pm.collectionVariables.unset('PlantAreaentitydata');\r",
									"pm.collectionVariables.set('PlantAreaentitydata', JSON.stringify(entitydata));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{{{token}}}}",
									"type": "string"
								}
							]
						},
						"method": "{{METHOD}}",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/apis/getsearchdata",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"apis",
								"getsearchdata"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Search Data - Site",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var solution = pm.collectionVariables.get(\"SolutionCode\");\r",
									"var solname = \"V_SS_\"+solution;\r",
									"let entitydata = '';\r",
									"\r",
									"if (solution == 'CAPA'){\r",
									"    entitydata = {\r",
									"    \"entityName\": \"OrgUnit\",\r",
									"    \"currentPageIndex\": 0,\r",
									"    \"pageSize\": 10,\r",
									"    \"filter\": [\r",
									"        {\r",
									"            \"openGroup\": true,\r",
									"            \"fieldName\": \"\",\r",
									"            \"sqlOperator\": \"\",\r",
									"            \"value\": \"\",\r",
									"            \"relationalOperator\": \"\",\r",
									"            \"closeGroup\": false\r",
									"        },\r",
									"        {\r",
									"            \"openGroup\": \"false\",\r",
									"            \"fieldName\": \"ORU_TYPE\",\r",
									"            \"sqlOperator\": \"EQ\",\r",
									"            \"value\": \"SITE\",\r",
									"            \"relationalOperator\": \"AND\",\r",
									"            \"closeGroup\": \"false\"\r",
									"        },\r",
									"        {\r",
									"            \"openGroup\": false,\r",
									"            \"fieldName\": \"\",\r",
									"            \"sqlOperator\": \"\",\r",
									"            \"value\": \"\",\r",
									"            \"relationalOperator\": \"\",\r",
									"            \"closeGroup\": true\r",
									"        }\r",
									"    ],\r",
									"    \"sortExpression\": \"\",\r",
									"    \"referencedColumns\": {\r",
									"        \"V_SS_CAPA.OWNING_SITE_NAME\": \"ORU_NAME\",\r",
									"        \"V_SS_CAPA.OWNING_SITE_CODE\": \"ORU_CODE\"\r",
									"    },\r",
									"    \"dynamicParamCollection\": {},\r",
									"    \"savedSearchName\": \"\"\r",
									"};\r",
									"}\r",
									"pm.collectionVariables.unset('siteentitydata');\r",
									"pm.collectionVariables.set('siteentitydata', JSON.stringify(entitydata));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response should be 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.not.empty;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Response should has no error\", () => {\r",
									"    pm.response.to.be.not.empty;\r",
									"    pm.response.to.be.json;\r",
									"\r",
									"    var jsonData = JSON.parse(responseBody)\r",
									"    pm.expect(jsonData.hasError).to.eql(false);\r",
									"});\r",
									"\r",
									"pm.test(\"Response should has the support data information\", () => {\r",
									"    pm.response.to.be.not.empty;\r",
									"    pm.response.to.be.json;\r",
									"\r",
									"    var jsonData = JSON.parse(responseBody)\r",
									"    pm.expect(jsonData.SearchData).not.empty;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{{{token}}}}",
									"type": "string"
								}
							]
						},
						"method": "{{METHOD}}",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{siteentitydata}}"
						},
						"url": {
							"raw": "{{baseUrl}}/apis/getsearchdata",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"apis",
								"getsearchdata"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Search Data - Product",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var solution = pm.collectionVariables.get(\"SolutionCode\");\r",
									"var solname = \"V_SS_\"+solution;\r",
									"var prodlinecode = solname+\".PRODUCTLINE_CODE\";\r",
									"var prodlinename = solname+\".PRODUCTLINE_NAME\";\r",
									"var prodname =solname+\".PRODUCT_NAME\";\r",
									"var prodcode =solname+\".PRODUCT_CODE\";\r",
									"let entitydata = '';\r",
									"\r",
									"if (solution == 'CAPA'){\r",
									"    entitydata = {\r",
									"        \"entityName\": \"Product\",\r",
									"        \"currentPageIndex\": 0,\r",
									"        \"pageSize\": 10,\r",
									"        \"filter\": [],\r",
									"        \"sortExpression\": \"\",\r",
									"        \"referencedColumns\": {\r",
									"            \"V_SS_CAPA.PRODUCTLINE_CODE\": \"PRD_PRL_CODE\",\r",
									"            \"V_SS_CAPA.PRODUCTLINE_NAME\": \"PRD_PRL_NAME\",\r",
									"            \"V_SS_CAPA.PRODUCT_NAME\": \"PRD_NAME\",\r",
									"            \"V_SS_CAPA.PRODUCT_CODE\": \"PRD_CODE\"\r",
									"        },\r",
									"        \"dynamicParamCollection\": {},\r",
									"        \"savedSearchName\": \"\"\r",
									"    };\r",
									"}\r",
									"pm.collectionVariables.unset('prodentitydata');\r",
									"pm.collectionVariables.set('prodentitydata', JSON.stringify(entitydata));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response should be 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.not.empty;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Response should has no error\", () => {\r",
									"    pm.response.to.be.not.empty;\r",
									"    pm.response.to.be.json;\r",
									"\r",
									"    var jsonData = JSON.parse(responseBody)\r",
									"    pm.expect(jsonData.hasError).to.eql(false);\r",
									"});\r",
									"\r",
									"pm.test(\"Response should has the support data information\", () => {\r",
									"    pm.response.to.be.not.empty;\r",
									"    pm.response.to.be.json;\r",
									"\r",
									"    var jsonData = JSON.parse(responseBody)\r",
									"    pm.expect(jsonData.SearchData).not.empty;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{{{token}}}}",
									"type": "string"
								}
							]
						},
						"method": "{{METHOD}}",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{prodentitydata}}"
						},
						"url": {
							"raw": "{{baseUrl}}/apis/getsearchdata",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"apis",
								"getsearchdata"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Search Data - Process",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var solution = pm.collectionVariables.get(\"SolutionCode\");\r",
									"var solname = \"V_SS_\"+solution;\r",
									"var prodlinecode = solname+\".PRODUCTLINE_CODE\";\r",
									"var prodlinename = solname+\".PRODUCTLINE_NAME\";\r",
									"var prodname =solname+\".PRODUCT_NAME\";\r",
									"var prodcode =solname+\".PRODUCT_CODE\";\r",
									"let entitydata = '';\r",
									"\r",
									"if (solution == 'CAPA'){\r",
									"    entitydata = {\r",
									"    \"entityName\": \"Process\",\r",
									"    \"currentPageIndex\": 0,\r",
									"    \"pageSize\": 10,\r",
									"    \"filter\": [],\r",
									"    \"sortExpression\": \"\",\r",
									"    \"referencedColumns\": {\r",
									"        \"V_SS_CAPA.PROCESS_NAME\": \"PRC_NAME\",\r",
									"        \"V_SS_CAPA.STO_NAME\": \"PRC_STO_NAME\",\r",
									"        \"V_SS_CAPA.STO_CODE\": \"PRC_STO_CODE\",\r",
									"        \"V_SS_CAPA.PROCESS_CODE\": \"PRC_CODE\"\r",
									"    },\r",
									"    \"dynamicParamCollection\": {},\r",
									"    \"savedSearchName\": \"\"\r",
									"};\r",
									"}\r",
									"pm.collectionVariables.unset('procentitydata');\r",
									"pm.collectionVariables.set('procentitydata', JSON.stringify(entitydata));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response should be 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.not.empty;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Response should has no error\", () => {\r",
									"    pm.response.to.be.not.empty;\r",
									"    pm.response.to.be.json;\r",
									"\r",
									"    var jsonData = JSON.parse(responseBody)\r",
									"    pm.expect(jsonData.hasError).to.eql(false);\r",
									"});\r",
									"\r",
									"pm.test(\"Response should has the support data information\", () => {\r",
									"    pm.response.to.be.not.empty;\r",
									"    pm.response.to.be.json;\r",
									"\r",
									"    var jsonData = JSON.parse(responseBody)\r",
									"    pm.expect(jsonData.SearchData).not.empty;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{{{token}}}}",
									"type": "string"
								}
							]
						},
						"method": "{{METHOD}}",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{procentitydata}}"
						},
						"url": {
							"raw": "{{baseUrl}}/apis/getsearchdata",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"apis",
								"getsearchdata"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Search Data - PlantArea",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var solution = pm.collectionVariables.get(\"SolutionCode\");\r",
									"var solname = \"V_SS_\"+solution;\r",
									"var prodlinecode = solname+\".PRODUCTLINE_CODE\";\r",
									"var prodlinename = solname+\".PRODUCTLINE_NAME\";\r",
									"var prodname =solname+\".PRODUCT_NAME\";\r",
									"var prodcode =solname+\".PRODUCT_CODE\";\r",
									"let entitydata = '';\r",
									"\r",
									"if (solution == 'CAPA'){\r",
									"    entitydata = {\r",
									"    \"entityName\": \"PlantArea\",\r",
									"    \"currentPageIndex\": 0,\r",
									"    \"pageSize\": 10,\r",
									"    \"filter\": [],\r",
									"    \"sortExpression\": \"\",\r",
									"    \"referencedColumns\": {\r",
									"        \"V_SS_CAPA.PLANT_AREA_NAME\": \"RSR_NAME\",\r",
									"        \"V_SS_CAPA.PLANT_AREA_CODE\": \"RSR_CODE\"\r",
									"    },\r",
									"    \"dynamicParamCollection\": {},\r",
									"    \"savedSearchName\": \"\"\r",
									"};\r",
									"}\r",
									"pm.collectionVariables.unset('PlantAreaentitydata');\r",
									"pm.collectionVariables.set('PlantAreaentitydata', JSON.stringify(entitydata));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response should be 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.not.empty;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Response should has no error\", () => {\r",
									"    pm.response.to.be.not.empty;\r",
									"    pm.response.to.be.json;\r",
									"\r",
									"    var jsonData = JSON.parse(responseBody)\r",
									"    pm.expect(jsonData.hasError).to.eql(false);\r",
									"});\r",
									"\r",
									"pm.test(\"Response should has the support data information\", () => {\r",
									"    pm.response.to.be.not.empty;\r",
									"    pm.response.to.be.json;\r",
									"\r",
									"    var jsonData = JSON.parse(responseBody)\r",
									"    pm.expect(jsonData.SearchData).not.empty;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{{{token}}}}",
									"type": "string"
								}
							]
						},
						"method": "{{METHOD}}",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{PlantAreaentitydata}}"
						},
						"url": {
							"raw": "{{baseUrl}}/apis/getsearchdata",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"apis",
								"getsearchdata"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Submit Workflow",
			"item": [
				{
					"name": "Login2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var solution = pm.collectionVariables.get(\"SolutionCode\");\r",
									" \r",
									"var schema = \r",
									"{\r",
									"    \"type\": \"object\",\r",
									"    \"required\": [\r",
									"        \"ActorFirstName\",\r",
									"        \"ActorLastName\",\r",
									"        \"RequirePasswordChange\",\r",
									"        \"Token\",\r",
									"        \"UserFullName\",\r",
									"        \"ActorCode\",\r",
									"        \"ActorCodeWithDomain\",\r",
									"        \"licId\",\r",
									"        \"sessionExpirationErrorCode\",\r",
									"        \"sessionExpirationErrorMessage\",\r",
									"        \"culture\",\r",
									"        \"LoggedOnRoleCode\",\r",
									"        \"hasError\"\r",
									"    ],\r",
									"    \"additionalProperties\": true,\r",
									"    \"properties\": {\r",
									"        \"ActorFirstName\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"ActorLastName\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"RequirePasswordChange\": {\r",
									"            \"type\": \"boolean\"\r",
									"        },\r",
									"        \"Token\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"UserFullName\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"ActorCode\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"ActorCodeWithDomain\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"licId\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"sessionExpirationErrorCode\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"sessionExpirationErrorMessage\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"culture\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"LoggedOnRoleCode\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"hasError\": {\r",
									"            \"type\": \"boolean\"\r",
									"        }\r",
									"    }\r",
									"};\r",
									"\r",
									"if(schema)\r",
									"{\r",
									" var jsonData = pm.response.json();\r",
									" if(jsonData)\r",
									"    {\r",
									"        if(jsonData.hasError)\r",
									"        {\r",
									"                    pm.test(\"Response should be 200\", () => {\r",
									"                        pm.response.to.have.status(200);\r",
									"                        pm.response.to.be.not.empty;\r",
									"                        pm.response.to.be.json;\r",
									"                    });\r",
									"                    pm.test(\"Response should have error\", ()=> {  \r",
									"                        pm.response.to.be.not.empty;\r",
									"                        pm.response.to.be.json; \r",
									"                        pm.expect(jsonData.hasError).to.be.true;\r",
									"                    });\r",
									"                    pm.test(\"Error properties\", () => { \r",
									"                        pm.expect(jsonData.errors).not.empty;\r",
									"                    _.each(jsonData.errors, (item) => {\r",
									"                        console.log(item.errorNumber);\r",
									"                        console.log(item.errorMessage);\r",
									"                        }); \r",
									"                 });\r",
									"        }\r",
									"        else\r",
									"        {\r",
									"            pm.test(\"Test data type of the response\", () => {                \r",
									"                pm.expect(jsonData).to.be.an(\"object\");\r",
									"                pm.expect(jsonData.hasError).to.be.false;\r",
									"                pm.expect(jsonData.Token).to.be.a(\"string\");\r",
									"                pm.expect(jsonData.ActorCode).to.be.an(\"string\");\r",
									"            });\r",
									"            pm.collectionVariables.set(\"token\", jsonData.Token);\r",
									"            pm.collectionVariables.set(\"culture\", JSON.stringify(jsonData.culture));\r",
									"            pm.collectionVariables.set(\"ActorCode\", jsonData.ActorCode);\r",
									"            switch(solution)\r",
									"            {\r",
									"                case \"CAPA\":\r",
									"                    // pm.collectionVariables.set(\"TYPE\",\"Internal\");\r",
									"                    // pm.collectionVariables.set(\"CATEGORY\",\"Product\");\r",
									"                    // pm.collectionVariables.set(\"SOURCE\",\"General\");\r",
									"                    // pm.collectionVariables.set(\"QUALITY_PORTAL\",false);\r",
									"                    // pm.collectionVariables.set(\"NUMBERING_SCHEME_CODE\",\"Numbering\");\r",
									"                    // pm.collectionVariables.set(\"OWNING_SITE_NAME\",\"AUD Site1\");\r",
									"                    // pm.collectionVariables.set(\"OWNING_SITE_CODE\",\"AUDSITE1\");\r",
									"                    // pm.collectionVariables.set(\"PRODUCTLINE_CODE\",\"AUDproductline33.8\");\r",
									"                    // pm.collectionVariables.set(\"PRODUCTLINE_NAME\",\"Auditee Product Line33.8\");\r",
									"                    // pm.collectionVariables.set(\"PRODUCT_NAME\",\"Aud Part33.8A\");\r",
									"                    // pm.collectionVariables.set(\"PRODUCT_CODE\",\"AUD33.8A\");\r",
									"                    // pm.collectionVariables.set(\"TITLE\",\"Title\");\r",
									"                    // pm.collectionVariables.set(\"PROBLEM_STATEMENT\",\"Desc\");\r",
									"                break;\r",
									"                case \"NC\":\r",
									"                    // pm.collectionVariables.set(\"TYPE\",\"Internal\");\r",
									"                    // pm.collectionVariables.set(\"CATEGORY\",\"Product\");\r",
									"                    // pm.collectionVariables.set(\"SOURCE\",\"General\");\r",
									"                    // pm.collectionVariables.set(\"QUALITY_PORTAL\",false);\r",
									"                    // pm.collectionVariables.set(\"REPORTED_BY_CODE\",\"SMARTADMIN\");\r",
									"                    // pm.collectionVariables.set(\"REPORT_DATE\",\"2022-06-02T00:00:00.000\");\r",
									"                    // pm.collectionVariables.set(\"OCCURRENCE_DATE\",\"2022-06-02T00:00:00.000\");\r",
									"                    // pm.collectionVariables.set(\"PROBLEM_STATEMENT\",1);\r",
									"                    // pm.collectionVariables.set(\"PRODUCT_REVISION\",\"1\");\r",
									"                    // pm.collectionVariables.set(\"NUMBERING_SCHEME_CODE\",\"Numbering\");\r",
									"                    // pm.collectionVariables.set(\"NC_CATEGORY_CODE\",\"PRODUCT\");\r",
									"                    // pm.collectionVariables.set(\"NC_SOURCE_CODE\",\"GENERAL\");\r",
									"                    // pm.collectionVariables.set(\"OWNING_SITE_NAME\",\"NC Site1\");\r",
									"                    // pm.collectionVariables.set(\"OWNING_SITE_CODE\",\"NCSITE1\");\r",
									"                    // pm.collectionVariables.set(\"PRODUCT_CODE\",\"NCPART1\");\r",
									"                    // pm.collectionVariables.set(\"TITLE\",\"\");\r",
									"                    // pm.collectionVariables.set(\"PROBLEM_STATEMENT\",\"Desc\");\r",
									"                break;\r",
									"            }\r",
									"        }\r",
									"        var Ajv = require('ajv');\r",
									"        const ajv = new Ajv();\r",
									"        pm.test(\"Login schema validation\", () => {\r",
									"        const validate = ajv.compile(schema);\r",
									"        console.log(validate);\r",
									"        const valid = validate(jsonData);\r",
									"        if(!valid) console.log(validate.errors);\r",
									"        console.log(valid);\r",
									"        pm.expect(valid).to.be.true;\r",
									"        });       \r",
									"    }\r",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.globals.set(\"METHOD\", \"POST\");\r",
									"console.log(\"value of type from data file is: \"+pm.iterationData.get(\"baseUrl\"));\r",
									"console.log(\"value of type from data file is: \"+pm.iterationData.get(\"SolutionCode\"));\r",
									"console.log(\"value of type from data file is: \"+pm.iterationData.get(\"Username\"));\r",
									"console.log(\"value of type from data file is: \"+pm.iterationData.get(\"Password\"));\r",
									"\r",
									"pm.collectionVariables.set(\"baseUrl\",pm.iterationData.get(\"baseUrl\"));\r",
									"pm.collectionVariables.set(\"SolutionCode\",pm.iterationData.get(\"SolutionCode\"));\r",
									"pm.collectionVariables.set(\"Username\",pm.iterationData.get(\"Username\"));\r",
									"pm.collectionVariables.set(\"Password\",pm.iterationData.get(\"Password\"));\r",
									"\r",
									"// pm.collectionVariables.set(\"TYPE\",pm.iterationData.get(\"TYPE\"));\r",
									"// pm.collectionVariables.set(\"CATEGORY\",pm.iterationData.get(\"CATEGORY\"));\r",
									"// pm.collectionVariables.set(\"SOURCE\",pm.iterationData.get(\"SOURCE\"));\r",
									"// pm.collectionVariables.set(\"QUALITY_PORTAL\",pm.iterationData.get(\"QUALITY_PORTAL\"));\r",
									"// pm.collectionVariables.set(\"NUMBERING_SCHEME_CODE\",pm.iterationData.get(\"NUMBERING_SCHEME_CODE\"));\r",
									"// pm.collectionVariables.set(\"OWNING_SITE_NAME\",pm.iterationData.get(\"OWNING_SITE_NAME\"));\r",
									"// pm.collectionVariables.set(\"OWNING_SITE_CODE\",pm.iterationData.get(\"OWNING_SITE_CODE\"));\r",
									"// pm.collectionVariables.set(\"PRODUCTLINE_CODE\",pm.iterationData.get(\"PRODUCTLINE_CODE\"));\r",
									"// pm.collectionVariables.set(\"PRODUCTLINE_NAME\",pm.iterationData.get(\"PRODUCTLINE_NAME\"));\r",
									"// pm.collectionVariables.set(\"PRODUCT_NAME\",pm.iterationData.get(\"PRODUCT_NAME\"));\r",
									"// pm.collectionVariables.set(\"PRODUCT_CODE\",pm.iterationData.get(\"PRODUCT_CODE\"));\r",
									"// pm.collectionVariables.set(\"TITLE\",pm.iterationData.get(\"TITLE\"));\r",
									"// pm.collectionVariables.set(\"PROBLEM_STATEMENT\",pm.iterationData.get(\"PROBLEM_STATEMENT\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "{{METHOD}}",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"Username\": \"{{Username}}\", \r\n    \"Password\": \"{{Password}}\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/apis/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"apis",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "uploadattachment2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"        if(jsonData)\r",
									"            {\r",
									"                if(jsonData.hasError)\r",
									"                {\r",
									"                    pm.test(\"Has Error\", ()=> {        \r",
									"                        pm.expect(jsonData.hasError).to.be.true;\r",
									"                    });\r",
									"\r",
									"                    pm.test(\"Error properties\", () => {    \r",
									"                        pm.expect(jsonData.errors).not.empty;\r",
									"                        _.each(jsonData.errors, (item) => {\r",
									"                            console.log(item.errorNumber);\r",
									"                            console.log(item.errorMessage);\r",
									"                        });\r",
									"                    });\r",
									"                    \r",
									"                }\r",
									"                else\r",
									"                {\r",
									"                    pm.test(\"Result\", () => { \r",
									"                        pm.expect(jsonData.Result).to.be.an(\"object\");\r",
									"                        pm.expect(jsonData.hasError).to.be.false; \r",
									"                        var result = jsonData[\"Result\"];\r",
									"                        pm.expect(result.ACO_ID).to.be.a(\"string\");\r",
									"                        pm.expect(result.ACO_FILE_NAME).to.be.a(\"string\");\r",
									"                        var ACO_ID = result[\"ACO_ID\"];\r",
									"                        var ACO_FILE_NAME = result[\"ACO_FILE_NAME\"];\r",
									"                        var ACO_DESCRIPTION = result[\"ACO_DESCRIPTION\"];\r",
									"                        var ACO_CREATED_BY = result[\"ACO_CREATED_BY\"];\r",
									"                        var ACO_CREATED_DATE = result[\"ACO_CREATED_DATE\"];\r",
									"                        pm.collectionVariables.set(\"ACO_ID\", ACO_ID);\r",
									"                        pm.collectionVariables.set(\"ACO_FILE_NAME\",ACO_FILE_NAME);\r",
									"                        pm.collectionVariables.set(\"ACO_DESCRIPTION\",ACO_DESCRIPTION);\r",
									"                        pm.collectionVariables.set(\"ACO_CREATED_BY\",ACO_CREATED_BY);\r",
									"                        pm.collectionVariables.set(\"ACO_CREATED_DATE\",ACO_CREATED_DATE);\r",
									"                        });\r",
									"                }\r",
									"            }"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept": true
						}
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{{{token}}}}",
									"type": "string"
								}
							]
						},
						"method": "{{METHOD}}",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/plain, */*",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "multipart/form-data;",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "FileName",
									"value": "TaskFlow_Full.xml",
									"type": "text"
								},
								{
									"key": "FileDescription",
									"value": "\"\"",
									"type": "text"
								},
								{
									"key": "FileStream",
									"type": "file",
									"src": "/C:/Users/rm/Downloads/TaskFlow_Delta (1).xml"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/apis/uploadattachment",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"apis",
								"uploadattachment"
							]
						}
					},
					"response": []
				},
				{
					"name": "Submit Workflow Initiate",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var schema = pm.collectionVariables.get(\"schema\");\r",
									"if(schema)\r",
									"    {\r",
									"        var jsonData = pm.response.json();\r",
									"        if(jsonData)\r",
									"            {\r",
									"                if(jsonData.hasError)\r",
									"                {\r",
									"                    pm.test(\"Has Error\", ()=> {        \r",
									"                        pm.expect(jsonData.hasError).to.be.true;\r",
									"                    });\r",
									"\r",
									"                    pm.test(\"Error properties\", () => {    \r",
									"                        pm.expect(jsonData.errors).not.empty;\r",
									"                        _.each(jsonData.errors, (item) => {\r",
									"                            console.log(item.errorNumber);\r",
									"                            console.log(item.errorMessage);\r",
									"                        });\r",
									"                    });\r",
									"                }\r",
									"                else\r",
									"                {\r",
									"                    pm.test(\"Response should be 200\", () => {\r",
									"                        pm.response.to.have.status(200);\r",
									"                        pm.response.to.be.not.empty;\r",
									"                        pm.response.to.be.json;\r",
									"                    });\r",
									"                    pm.test(\"Response should have no error\", () => {\r",
									"                        pm.response.to.be.not.empty;\r",
									"                        pm.response.to.be.json;                       \r",
									"                        pm.expect(jsonData.hasError).to.eql(false);\r",
									"                    });\r",
									"                    pm.test(\"Response should have WorkflowResult\", () => {\r",
									"                        pm.response.to.be.not.empty;\r",
									"                        pm.response.to.be.json;\r",
									"                        pm.expect(jsonData.SubmitWorkflowResult).not.empty;\r",
									"                    });\r",
									"                    //console.log(\"before\");                             \r",
									"                    var submitWorkflowResult = jsonData[\"SubmitWorkflowResult\"];\r",
									"                    var workflowstepobj = submitWorkflowResult[\"workFlowSteps\"];\r",
									"                    if (workflowstepobj && workflowstepobj.length > 0)\r",
									"                    {\r",
									"                        pm.test(\"Response should have workflowsteps\", () => {   \r",
									"                            var currentWorkflowId = workflowstepobj[0][\"workflowId\"];\r",
									"                            var itmId = workflowstepobj[0][\"itmId\"];\r",
									"                            var stepId = workflowstepobj[0][\"stepId\"];\r",
									"                            var entityType = workflowstepobj[0][\"entityType\"];\r",
									"                            var stepName = workflowstepobj[0][\"stepName\"];\r",
									"\r",
									"                            pm.collectionVariables.set(\"currentWorkflowId\", currentWorkflowId);\r",
									"                            pm.collectionVariables.set(\"itmId\", itmId);\r",
									"                            pm.collectionVariables.set(\"stepId\",stepId);\r",
									"                            pm.collectionVariables.set(\"entityType\",entityType);\r",
									"                            pm.collectionVariables.set(\"stepName\",stepName);\r",
									"                        });\r",
									"                    }\r",
									"                   //console.log(\"after\");\r",
									"                }\r",
									"                var Ajv = require('ajv');\r",
									"                const ajv = new Ajv();  \r",
									"                pm.test(\"Submit Workflow Initiate schema validation\", () => {\r",
									"                    //console.log(schema);\r",
									"                        const validate = ajv.compile(schema);\r",
									"                        const valid = validate(jsonData);\r",
									"                        if(!valid) console.log(validate.errors);\r",
									"                        pm.expect(valid).to.be.true;\r",
									"                });\r",
									"            }\r",
									"}\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var moment = require('moment');\r",
									"var solution = pm.iterationData.get(\"SolutionCode\");\r",
									"var stepName = pm.collectionVariables.get(\"stepName\");\r",
									"var ActorCode = pm.collectionVariables.get(\"ActorCode\");\r",
									"var ACO_ID = pm.collectionVariables.get(\"ACO_ID\");\r",
									"var ACO_FILE_NAME = pm.collectionVariables.get(\"ACO_FILE_NAME\");\r",
									"var ACO_CREATED_BY = pm.collectionVariables.get(\"ACO_CREATED_BY\");\r",
									"var ACO_CREATED_DATE = pm.collectionVariables.get(\"ACO_CREATED_DATE\");\r",
									"let containerWorkflowKey = \"\";\r",
									"let workflowKey = \"\";\r",
									"let stepId = \"\";\r",
									"let rowidvalue = \"NR_1\";\r",
									"let columnName = 'columnName';\r",
									"let originalValue = 'originalValue';\r",
									"let currentValue = 'currentValue';\r",
									"let rowCount = 3;\r",
									"var statevalue = \"ADDED\";\r",
									"var DateColumnName = \"MODIFIED_DATE\";\r",
									"var Attach_DateColumnName = \"BAH_MODIFIED_DATE\";\r",
									"\r",
									"let datamember = \"V_SS_\"+solution;\r",
									"let datafields = [];\r",
									"let datarows = [];\r",
									"let policydatamember = datamember+\"-\"+datamember+\"_POLICY\";\r",
									"let policydatafields = [];\r",
									"let policydatarows = [];\r",
									"\r",
									"let partdatamember = datamember+\"-\"+datamember+\"_PART\";\r",
									"let partdatafields = [];\r",
									"let partdatarows = [];\r",
									"\r",
									"let partlotdatamember = partdatamember+\"-\"+datamember+\"_PART_LOT\";\r",
									"let partlotdatafields = [];\r",
									"let partlotdatarows = [];\r",
									"\r",
									"let partfmdatamember = partdatamember+\"-\"+datamember+\"_PART_FAILURE_MODE\";\r",
									"let partfmdatafields = [];\r",
									"let partfmdatarows = [];\r",
									"\r",
									"let attachdatamember = datamember+\"-V_BAH_BASE_ATTACHMENT_GEN\";\r",
									"let attachdatafields = [];\r",
									"let attachdatarows = [];\r",
									"\r",
									"console.log(\"value of type from data file is: \"+pm.iterationData.get(\"TYPE\"));\r",
									"console.log(\"value of type from data file is: \"+pm.iterationData.get(\"CATEGORY\"));\r",
									"console.log(\"value of type from data file is: \"+pm.iterationData.get(\"SOURCE\"));\r",
									"console.log(\"value of type from data file is: \"+pm.iterationData.get(\"QUALITY_PORTAL\"));\r",
									"console.log(\"value of type from data file is: \"+pm.iterationData.get(\"NUMBERING_SCHEME_CODE\"));\r",
									"console.log(\"value of type from data file is: \"+pm.iterationData.get(\"OWNING_SITE_NAME\"));\r",
									"console.log(\"value of type from data file is: \"+pm.iterationData.get(\"OWNING_SITE_CODE\"));\r",
									"console.log(\"value of type from data file is: \"+pm.iterationData.get(\"PRODUCTLINE_CODE\"));\r",
									"console.log(\"value of type from data file is: \"+pm.iterationData.get(\"PRODUCTLINE_NAME\"));\r",
									"console.log(\"value of type from data file is: \"+pm.iterationData.get(\"PRODUCT_NAME\"));\r",
									"console.log(\"value of type from data file is: \"+pm.iterationData.get(\"PRODUCT_CODE\"));\r",
									"console.log(\"value of type from data file is: \"+pm.iterationData.get(\"TITLE\"));\r",
									"console.log(\"value of type from data file is: \"+pm.iterationData.get(\"PROBLEM_STATEMENT\"));\r",
									"\r",
									"\r",
									"let typevalue =  pm.iterationData.get(\"TYPE\");\r",
									"let categoryvalue =  pm.iterationData.get(\"CATEGORY\");\r",
									"let sourcevalue = pm.iterationData.get(\"SOURCE\");\r",
									"let qpvalue = pm.iterationData.get(\"QUALITY_PORTAL\");\r",
									"let nscvalue = pm.iterationData.get(\"NUMBERING_SCHEME_CODE\");\r",
									"let osnvalue = pm.iterationData.get(\"OWNING_SITE_NAME\");\r",
									"let oscvalue = pm.iterationData.get(\"OWNING_SITE_CODE\");\r",
									"let prodlinecodevalue = pm.iterationData.get(\"PRODUCTLINE_CODE\");\r",
									"let prodlinenamevalue = pm.iterationData.get(\"PRODUCTLINE_NAME\");\r",
									"let prodnamevalue = pm.iterationData.get(\"PRODUCT_NAME\");\r",
									"let prodcodevalue = pm.iterationData.get(\"PRODUCT_CODE\");\r",
									"let titlevalue = pm.iterationData.get(\"TITLE\");\r",
									"let probstatvalue = pm.iterationData.get(\"PROBLEM_STATEMENT\");\r",
									"\r",
									"let BAH_ORG_IDvalue = \"0000000000000000000000003\";\r",
									"\r",
									"let body = {\r",
									"    \"clientChanges\": [],\r",
									"    \"containerWorkflowKey\": \"\",\r",
									"    \"workflowKey\": \"\",\r",
									"    \"parentWorkflowId\": \"\",\r",
									"    \"currentWorkflowId\": \"\",\r",
									"    \"itmId\": \"\",\r",
									"    \"stepId\": \"\",\r",
									"    \"tempDataStoreId\": null,\r",
									"    \"withSignOff\": true,\r",
									"    \"password\": \"\",\r",
									"    \"commandName\": \"\",\r",
									"    \"commandArgument\": \"\"\r",
									"};\r",
									"\r",
									"switch(solution)\r",
									"{\r",
									"    case \"CAPA\":\r",
									"    case \"NC\":\r",
									"        body.containerWorkflowKey = solution+\"WORKFLOW\";\r",
									"        body.workflowKey = solution+\"WORKFLOW_NP_WORKFLOW\";\r",
									"        body.stepId = \"Initiate\"+solution;\r",
									"        \r",
									"        if(solution == 'NC')\r",
									"        {\r",
									"            body.stepId = \"InitiateNonConformance\";\r",
									"            //\"V_SS_NC-V_SS_NC_POLICY\"\r",
									"            policydatafieldsvalues = [\"PILGRIM_INSPECT_MGMT_REQ\",null,pm.iterationData.get(\"PILGRIM_INSPECT_MGMT_REQ\"),\r",
									"                                      \"PK_ID\",null,rowidvalue,\r",
									"                                      \"PARENT_GT_ID\",null,rowidvalue\r",
									"                                      ];\r",
									"            for (let i = 0; i < policydatafieldsvalues.length; i += rowCount) {\r",
									"            // Container to hold current row  \r",
									"                let result = {};\r",
									"                result[columnName] = policydatafieldsvalues[i];\r",
									"                result[originalValue] = policydatafieldsvalues[i+1];\r",
									"                result[currentValue] = policydatafieldsvalues[i+2]; \r",
									"                policydatafields.push(result);    \r",
									"            }\r",
									"            //console.log(policydatafields);\r",
									"\r",
									"            policydatarows.push({\r",
									"                \"state\": statevalue,\r",
									"                \"rowid\": rowidvalue,\r",
									"                \"fields\": policydatafields,\r",
									"                \"modifiedDateColumnName\": DateColumnName,\r",
									"                \"modifiedDate\": null\r",
									"            });\r",
									"\r",
									"            body.clientChanges.push(\r",
									"            {\r",
									"                dataMember: policydatamember,\r",
									"                rows:policydatarows\r",
									"            });            \r",
									"                                      \r",
									"            // \"V_SS_NC-V_SS_NC_PART\"\r",
									"            partdatafieldsvalues = [\"IsNewObject\",null,pm.iterationData.get(\"IsNewObject\"),\r",
									"                                    \"PRODUCT_REVISION\",null,pm.iterationData.get(\"PRODUCT_REVISION\"), \r",
									"                                    \"IS_PRIMARY_PRODUCT\", null,true,pm.iterationData.get(\"IS_PRIMARY_PRODUCT\"),\r",
									"                                    \"PRODUCT_NAME\", null, pm.iterationData.get(\"PRODUCT_NAME_1\"),\r",
									"                                    \"PRODUCTLINE_CODE\", null,pm.iterationData.get(\"PRODUCTLINE_CODE_1\"),\r",
									"                                    \"PRODUCTLINE_NAME\",null,pm.iterationData.get(\"PRODUCTLINE_NAME_1\"),\r",
									"                                    \"PRODUCT_CODE\",null,pm.iterationData.get(\"PRODUCT_CODE_1\"),\r",
									"                                    \"PRODUCT_UNIT_COST\",null,pm.iterationData.get(\"PRODUCT_UNIT_COST\"),\r",
									"                                    \"UOM_CODE\",null,pm.iterationData.get(\"UOM_CODE\"),\r",
									"                                    \"PK_ID\",null,rowidvalue,\r",
									"                                    \"PARENT_GT_ID\",null,rowidvalue\r",
									"                                    ];\r",
									"            for (let i = 0; i < partdatafieldsvalues.length; i += rowCount) {\r",
									"            // Container to hold current row  \r",
									"                let result = {};\r",
									"                result[columnName] = partdatafieldsvalues[i];\r",
									"                result[originalValue] = partdatafieldsvalues[i+1];\r",
									"                result[currentValue] = partdatafieldsvalues[i+2]; \r",
									"                partdatafields.push(result);    \r",
									"            }\r",
									"            //console.log(partdatafields);\r",
									"            partdatarows.push({\r",
									"                \"state\": statevalue,\r",
									"                \"rowid\": rowidvalue,\r",
									"                \"fields\": partdatafields,\r",
									"                \"modifiedDateColumnName\": \"MODIFIED_DATE\",\r",
									"                \"modifiedDate\": null\r",
									"            });            \r",
									"            body.clientChanges.push(\r",
									"            {\r",
									"                dataMember: partdatamember,\r",
									"                rows:partdatarows\r",
									"            });\r",
									"\r",
									"            // \"V_SS_NC-V_SS_NC_PART-V_SS_NC_PART_LOT\"\r",
									"            partlotdatafieldvalues = [\r",
									"                \"IsNewObject\",null, true,\r",
									"                \"UOM_MULTIPLIER\",null,1,\r",
									"                \"LOT_NUMBER\",null,1,\r",
									"                \"UOM_CODE\",null,\"Ea\",\r",
									"                \"BASE_QTY\",null,10,\r",
									"                \"TOTAL_QTY_LEFT_FOR_DISP\",null, 10,\r",
									"                \"LOT_QTY\",null, 10,\r",
									"                \"PK_ID\",null,rowidvalue,\r",
									"                \"PARENT_GT_ID\",null,rowidvalue\r",
									"            ];\r",
									"            for (let i = 0; i < partlotdatafieldvalues.length; i += rowCount) {\r",
									"            // Container to hold current row  \r",
									"                let result = {};\r",
									"                result[columnName] = partlotdatafieldvalues[i];\r",
									"                result[originalValue] = partlotdatafieldvalues[i+1];\r",
									"                result[currentValue] = partlotdatafieldvalues[i+2]; \r",
									"                partlotdatafields.push(result);    \r",
									"            }\r",
									"            //console.log(partlotdatafields);\r",
									"            partlotdatarows.push({\r",
									"                \"state\": statevalue,\r",
									"                \"rowid\": rowidvalue,\r",
									"                \"fields\": partlotdatafields,\r",
									"                \"modifiedDateColumnName\": DateColumnName,\r",
									"                \"modifiedDate\": null\r",
									"            });\r",
									"\r",
									"            body.clientChanges.push(\r",
									"            {\r",
									"                dataMember: partlotdatamember,\r",
									"                rows:partlotdatarows\r",
									"            });\r",
									"\r",
									"            partfmdatafieldvalues = [\"IsNewObject\", null,true,\r",
									"                                     \"IS_PRIMARY_FAILURE_MODE\",null,true,\r",
									"                                     \"FAILURE_MODE\",null,\"NCPartFM1\",\r",
									"                                     \"FAILURE_MODE_CATEGORY\",null,\"SAFETY\",\r",
									"                                     \"SEVERITY_RATING\", null,\"CRITICAL\",\r",
									"                                     \"PK_ID\", null,rowidvalue,\r",
									"                                     \"PARENT_GT_ID\",null,rowidvalue\r",
									"                                     ];\r",
									"\r",
									"            for (let i = 0; i < partfmdatafieldvalues.length; i += rowCount) {\r",
									"            // Container to hold current row  \r",
									"                let result = {};\r",
									"                result[columnName] = partfmdatafieldvalues[i];\r",
									"                result[originalValue] = partfmdatafieldvalues[i+1];\r",
									"                result[currentValue] = partfmdatafieldvalues[i+2]; \r",
									"                partfmdatafields.push(result);    \r",
									"            }\r",
									"            //console.log(partfmdatafields);\r",
									"\r",
									"            partfmdatarows.push({\r",
									"                \"state\": statevalue,\r",
									"                \"rowid\": rowidvalue,\r",
									"                \"fields\": partfmdatafields,\r",
									"                \"modifiedDateColumnName\": DateColumnName,\r",
									"                \"modifiedDate\": null\r",
									"            });  \r",
									"\r",
									"            body.clientChanges.push(\r",
									"            {\r",
									"                dataMember: partfmdatamember,\r",
									"                rows:partfmdatarows\r",
									"            });\r",
									"        }                    \r",
									"    break;       \r",
									"}\r",
									"\r",
									"stepName = \"Initiate \"+solution; \r",
									"datafieldsvalues = [\"PK_ID\",null, rowidvalue,\r",
									"                    solution+\"_TYPE\",null,typevalue,\r",
									"                    solution+\"_CATEGORY\",null,categoryvalue,\r",
									"                    solution+\"_SOURCE\",null,sourcevalue,\r",
									"                    \"QUALITY_PORTAL_\"+solution,null,qpvalue,\r",
									"                    solution+\"AGE\",null,null,\r",
									"                    \"NUMBERING_SCHEME_CODE\",null, solution+\" \"+nscvalue,                    \r",
									"                    \"OWNING_SITE_CODE\",null,oscvalue,\r",
									"                    \"OWNING_SITE_NAME\",null,osnvalue,                    \r",
									"                    \"PRODUCTLINE_CODE\",null,prodlinecodevalue,\r",
									"                    \"PRODUCTLINE_NAME\",null,prodlinenamevalue,\r",
									"                    \"PRODUCT_NAME\", null,prodnamevalue,\r",
									"                    \"PRODUCT_CODE\", null,prodcodevalue,\r",
									"                    \"TITLE\",null, titlevalue,\r",
									"                    \"PROBLEM_STATEMENT\",null,probstatvalue\r",
									"                ];\r",
									"\r",
									"                \r",
									"for (let i = 0; i < datafieldsvalues.length; i += rowCount) {\r",
									"  // Container to hold current row  \r",
									"    let result = {};\r",
									"    result[columnName] = datafieldsvalues[i];\r",
									"    result[originalValue] = datafieldsvalues[i+1];\r",
									"    result[currentValue] = datafieldsvalues[i+2]; \r",
									"    datafields.push(result);    \r",
									"}\r",
									"//console.log(datafields);\r",
									"\r",
									"datarows.push({\r",
									"    \"state\": statevalue,\r",
									"    \"rowid\": rowidvalue,\r",
									"    \"fields\": datafields,\r",
									"    \"modifiedDateColumnName\": DateColumnName\r",
									"});\r",
									"\r",
									"body.clientChanges.push(\r",
									"    // V_SS_CAPA\r",
									"    {\r",
									"    dataMember: datamember,\r",
									"    rows:datarows\r",
									"    }\r",
									");\r",
									"\r",
									"let attachmentvalues = [\"IsNewObject\", null, true,\r",
									"                        \"BAH_ID\",null,rowidvalue,\r",
									"                        \"BAH_OWNER_ID\",null,rowidvalue,\r",
									"                        \"BAH_ORG_ID\",null, BAH_ORG_IDvalue,\r",
									"                        \"BAH_CREATED_DATE\",null,moment().format(\"yyyy-MM-DD'T'HH:mm:ss.SSS\"),\r",
									"                        \"BAH_CREATED_BY\", null, ActorCode,\r",
									"                        \"BAH_MODIFIED_DATE\",null,moment().format(\"yyyy-MM-DD'T'HH:mm:ss.SSS\"),\r",
									"                        \"BAH_MODIFIED_BY\", null, ActorCode,\r",
									"                        \"BAH_STEP_NAME\",null,stepName,\r",
									"                        \"BAH_STEP_ID\",null, stepId,\r",
									"                        \"BAH_WFE_ID\", null, \"\",\r",
									"                        \"BAH_WORKFLOW_KEY\", null,containerWorkflowKey,\r",
									"                        \"BAH_DESCRIPTION\", null,\"\",\r",
									"                        \"ACO_ID\", null, ACO_ID,\r",
									"                        \"ACO_ORG_ID\", null, BAH_ORG_IDvalue,\r",
									"                        \"ACO_BAH_ID\", null, rowidvalue,\r",
									"                        \"ACO_FILE_NAME\", null, ACO_FILE_NAME,\r",
									"                        \"ACO_CREATED_DATE\", null,moment().format(\"yyyy-MM-DD'T'HH:mm:ss.SSS\"),\r",
									"                        \"ACO_CREATED_BY\", null, ACO_CREATED_BY,\r",
									"                        \"ACO_MODIFIED_DATE\", null,moment().format(\"yyyy-MM-DD'T'HH:mm:ss.SSS\"),\r",
									"                        \"IsExistingObject\", null,false,\r",
									"                        \"BAH_ACO_TEMP_ID\",null,ACO_ID,\r",
									"                        \"null\",null,rowidvalue\r",
									"                        ];\r",
									"\r",
									"//console.log(attachmentvalues);\r",
									"\r",
									"for (let i = 0; i < attachmentvalues.length; i += rowCount) {\r",
									"  // Container to hold current row  \r",
									"    let result = {};\r",
									"    result[columnName] = attachmentvalues[i];\r",
									"    result[originalValue] = attachmentvalues[i+1];\r",
									"    result[currentValue] = attachmentvalues[i+2]; \r",
									"    attachdatafields.push(result);    \r",
									"}\r",
									"//console.log(attachdatafields);\r",
									"attachdatarows.push(\r",
									"    {\r",
									"        \"state\": statevalue,\r",
									"        \"rowid\": rowidvalue,\r",
									"        \"fields\":attachdatafields,\r",
									"        \"modifiedDateColumnName\": Attach_DateColumnName,\r",
									"        \"modifiedDate\": null\r",
									"});\r",
									"\r",
									"body.clientChanges.push(\r",
									"    // V_SS_CAPA-V_BAH_BASE_ATTACHMENT_GEN\r",
									"    {\r",
									"    dataMember: attachdatamember,\r",
									"    rows:attachdatarows\r",
									"    }\r",
									");\r",
									"\r",
									"var schema = {\r",
									"    \"type\": \"object\",\r",
									"    \"required\": [\r",
									"        \"SubmitWorkflowResult\",\r",
									"        \"hasError\"\r",
									"    ],\r",
									"    \"properties\": {\r",
									"        \"SubmitWorkflowResult\": {\r",
									"            \"type\": \"object\",\r",
									"            \"required\": [\r",
									"                \"hasError\",\r",
									"                \"reloadPage\",\r",
									"                \"goToStep\",\r",
									"                \"goToDashboardMessage\",\r",
									"                \"signOffSubmittedMessage\",\r",
									"                \"saveOrCreateSubmittedMessage\",\r",
									"                \"copyNewRecordId\",\r",
									"                \"messages\",\r",
									"                \"warnings\",\r",
									"                \"errors\",\r",
									"                \"entities\",\r",
									"                \"workFlowSteps\"\r",
									"            ],\r",
									"            \"properties\": {\r",
									"                \"hasError\": {\r",
									"                    \"type\": \"boolean\"\r",
									"                },\r",
									"                \"reloadPage\": {\r",
									"                    \"type\": \"boolean\"\r",
									"                },\r",
									"                \"goToStep\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"goToDashboardMessage\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"signOffSubmittedMessage\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"saveOrCreateSubmittedMessage\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"copyNewRecordId\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"messages\": {\r",
									"                    \"type\": \"array\",\r",
									"                    \"items\": {\r",
									"                        \"type\": \"object\",\r",
									"                        \"required\": [\r",
									"                            \"messageNumber\",\r",
									"                            \"message\"\r",
									"                        ],\r",
									"                        \"properties\": {\r",
									"                            \"messageNumber\": {\r",
									"                                \"type\": \"string\"\r",
									"                            },\r",
									"                            \"message\": {\r",
									"                                \"type\": \"string\"\r",
									"                            }\r",
									"                        }\r",
									"                    }\r",
									"                },\r",
									"                \"warnings\": {\r",
									"                    \"type\": \"array\",\r",
									"                    \"items\": {}\r",
									"                },\r",
									"                \"errors\": {\r",
									"                    \"type\": \"array\",\r",
									"                    \"items\": {}\r",
									"                },\r",
									"                \"entities\": {\r",
									"                    \"type\": \"array\",\r",
									"                    \"items\": {\r",
									"                        \"type\": \"object\",\r",
									"                        \"required\": [\r",
									"                            \"translatedEntityName\",\r",
									"                            \"goToDetailMessage\",\r",
									"                            \"entityName\",\r",
									"                            \"entityURL\",\r",
									"                            \"itmId\",\r",
									"                            \"entityType\",\r",
									"                            \"formKey\"\r",
									"                        ],\r",
									"                        \"properties\": {\r",
									"                            \"translatedEntityName\": {\r",
									"                                \"type\": \"string\"\r",
									"                            },\r",
									"                            \"goToDetailMessage\": {\r",
									"                                \"type\": \"string\"\r",
									"                            },\r",
									"                            \"entityName\": {\r",
									"                                \"type\": \"string\"\r",
									"                            },\r",
									"                            \"entityURL\": {\r",
									"                                \"type\": \"string\"\r",
									"                            },\r",
									"                            \"itmId\": {\r",
									"                                \"type\": \"string\"\r",
									"                            },\r",
									"                            \"entityType\": {\r",
									"                                \"type\": \"string\"\r",
									"                            },\r",
									"                            \"formKey\": {\r",
									"                                \"type\": \"string\"\r",
									"                            }\r",
									"                        }\r",
									"                    }\r",
									"                },\r",
									"                \"workFlowSteps\": {\r",
									"                    \"type\": \"array\",\r",
									"                    \"items\": {\r",
									"                        \"type\": \"object\",\r",
									"                        \"required\": [\r",
									"                            \"stepName\",\r",
									"                            \"translatedStepName\",\r",
									"                            \"stepURL\",\r",
									"                            \"itmId\",\r",
									"                            \"entityType\",\r",
									"                            \"workflowId\",\r",
									"                            \"stepId\",\r",
									"                            \"formKey\"\r",
									"                        ],\r",
									"                        \"properties\": {\r",
									"                            \"stepName\": {\r",
									"                                \"type\": \"string\"\r",
									"                            },\r",
									"                            \"translatedStepName\": {\r",
									"                                \"type\": \"string\"\r",
									"                            },\r",
									"                            \"stepURL\": {\r",
									"                                \"type\": \"string\"\r",
									"                            },\r",
									"                            \"itmId\": {\r",
									"                                \"type\": \"string\"\r",
									"                            },\r",
									"                            \"entityType\": {\r",
									"                                \"type\": \"string\"\r",
									"                            },\r",
									"                            \"workflowId\": {\r",
									"                                \"type\": \"string\"\r",
									"                            },\r",
									"                            \"stepId\": {\r",
									"                                \"type\": \"string\"\r",
									"                            },\r",
									"                            \"formKey\": {\r",
									"                                \"type\": \"string\"\r",
									"                            }\r",
									"                        }\r",
									"                    }\r",
									"                }\r",
									"            }\r",
									"        },\r",
									"        \"hasError\": {\r",
									"            \"type\": \"boolean\"\r",
									"        }\r",
									"    }\r",
									"};\r",
									"pm.collectionVariables.set(\"schema\", schema);\r",
									"\r",
									"pm.collectionVariables.set('req_body', JSON.stringify(body));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{{{token}}}}",
									"type": "string"
								}
							]
						},
						"method": "{{METHOD}}",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{req_body}}"
						},
						"url": {
							"raw": "{{baseUrl}}/apis/submitworkflowdata",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"apis",
								"submitworkflowdata"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetEntityData",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var solution = pm.collectionVariables.get(\"SolutionCode\");\r",
									"var currentWorkflowId = pm.collectionVariables.get(\"currentWorkflowId\");\r",
									"var itmId = pm.collectionVariables.get(\"itmId\");\r",
									"var stepId = pm.collectionVariables.get(\"stepId\");\r",
									"var entityType = pm.collectionVariables.get(\"entityType\");\r",
									"var stepName = pm.collectionVariables.get(\"stepName\");\r",
									"\r",
									"var entitydata = {\r",
									"    \"entityName\": \"\",\r",
									"    \"entityType\": entityType,\r",
									"    \"formEntityKey\": solution,\r",
									"    \"itmId\": itmId,\r",
									"    \"workflowId\": currentWorkflowId,\r",
									"    \"parentWorkflowId\": \"\",\r",
									"    \"stepId\": stepId,\r",
									"    \"containerWorkflowKey\": \"\",\r",
									"    \"workflowKey\": \"\",\r",
									"    \"formStyle\": \"ClientEnableForm\",\r",
									"    \"userKey\": \"\"\r",
									"};\r",
									"pm.collectionVariables.unset('req_entitydata_body');\r",
									"pm.collectionVariables.set('req_entitydata_body', JSON.stringify(entitydata));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var solution = pm.collectionVariables.get(\"SolutionCode\");\r",
									"// var schema = pm.collectionVariables.get(\"entityschema\");\r",
									"// if(schema)\r",
									"//     {\r",
									"        var jsonData = pm.response.json();\r",
									"        if(jsonData)\r",
									"            {\r",
									"                if(jsonData.hasError)\r",
									"                {\r",
									"                    pm.test(\"Has Error\", ()=> {        \r",
									"                        pm.expect(jsonData.hasError).to.be.true;\r",
									"                    });\r",
									"\r",
									"                    pm.test(\"Error properties\", () => {    \r",
									"                        _.each(jsonData.errors, (item) => {\r",
									"                            console.log(item.errorNumber);\r",
									"                            console.log(item.errorMessage);\r",
									"                        });\r",
									"                    });\r",
									"                }\r",
									"                else\r",
									"                {\r",
									"\r",
									"                    pm.test(\"Response should be 200\", () => {\r",
									"                        pm.response.to.have.status(200);\r",
									"                        pm.response.to.be.not.empty;\r",
									"                        pm.response.to.be.json;\r",
									"                    });\r",
									"                    pm.test(\"Response should have no error\", () => {\r",
									"                        pm.response.to.be.not.empty;\r",
									"                        pm.response.to.be.json;                       \r",
									"                        pm.expect(jsonData.hasError).to.eql(false);\r",
									"                    });\r",
									"\r",
									"                    //console.log(\"here\", jsonData);\r",
									"                    var entityDataStore = jsonData[\"entityDataStore\"];\r",
									"                        if(entityDataStore)\r",
									"                        {\r",
									"                        pm.test(\"Response should have entityDataStore\", () => {\r",
									"                            pm.response.to.be.not.empty;\r",
									"                            pm.response.to.be.json;\r",
									"                            pm.expect(jsonData.entityDataStore).not.empty;\r",
									"                        });\r",
									"                            //console.log(\"after\",entityDataStore);\r",
									"                            var entityData = entityDataStore[\"entityData\"];\r",
									"                            if(entityData)\r",
									"                            {\r",
									"                                pm.test(\"Response should have entityData\", () => {\r",
									"                                    pm.response.to.be.not.empty;\r",
									"                                    pm.response.to.be.json;\r",
									"                                    pm.expect(entityData).not.empty;\r",
									"                                });\r",
									"                                //console.log(\"after\",entityData);\r",
									"                                //V_SS_NC\r",
									"                                var entitydataname = \"V_SS_\"+solution;\r",
									"                                var V_SS_SOL = entityData[entitydataname];\r",
									"                                if(V_SS_SOL)\r",
									"                                {\r",
									"                                pm.test(\"Response should have Data Member\", () => {\r",
									"                                        pm.response.to.be.not.empty;\r",
									"                                        pm.response.to.be.json;\r",
									"                                        pm.expect(V_SS_SOL).not.empty;\r",
									"\r",
									"                                        var V_SS_SOL_PK_ID = V_SS_SOL[\"PK_ID\"];\r",
									"                                        console.log(\"V_SS_NC :-\",V_SS_SOL_PK_ID);\r",
									"                                        pm.collectionVariables.set(\"V_SS_SOL_PK_ID\", V_SS_SOL_PK_ID);\r",
									"\r",
									"                                        //\"V_SS_NC-V_SS_NC_DISPOSITION\"\r",
									"                                        var entitydatanamedisposition =\"V_SS_\"+solution+\"-V_SS_\"+solution+\"_DISPOSITION\";\r",
									"                                        var V_SS_SOL_DISP = V_SS_SOL[entitydatanamedisposition];\r",
									"                                        if(V_SS_SOL_DISP)\r",
									"                                        {\r",
									"                                            var V_SS_SOL_DISP_PK_ID = V_SS_SOL_DISP[\"PK_ID\"]; \r",
									"                                            console.log(\"V_SS_NC-V_SS_NC_DISPOSITION :-\",V_SS_SOL_DISP_PK_ID);\r",
									"                                            pm.collectionVariables.set(\"V_SS_SOL_DISP_PK_ID\", V_SS_SOL_DISP_PK_ID);\r",
									"                                        }\r",
									"                                        //\"V_SS_NC-V_SS_NC_PART\"\r",
									"                                        var entitydatanamepart =\"V_SS_\"+solution+\"-V_SS_\"+solution+\"_PART\";\r",
									"                                        var V_SS_SOL_PART = V_SS_SOL[entitydatanamepart];\r",
									"                                        if(V_SS_SOL_PART)\r",
									"                                        {                                            \r",
									"                                            var V_SS_SOL_PART_PK_ID = V_SS_SOL_PART[\"PK_ID\"]; \r",
									"                                             console.log(\"V_SS_NC-V_SS_NC_PART :-\",V_SS_SOL_PART_PK_ID);\r",
									"                                            pm.collectionVariables.set(\"V_SS_SOL_PART_PK_ID\", V_SS_SOL_PART_PK_ID);\r",
									"                                            //\"V_SS_NC-V_SS_NC_PART-V_SS_NC_PART_LOT\"\r",
									"                                            var entitydatanamepartlot =\"V_SS_\"+solution+\"-V_SS_\"+solution+\"_PART\"+\"-V_SS_\"+solution+\"_PART_LOT\";\r",
									"                                            var V_SS_SOL_PART_LOT = V_SS_SOL_PART[entitydatanamepartlot];\r",
									"                                            if(V_SS_SOL_PART_LOT)\r",
									"                                            {\r",
									"                                                var V_SS_SOL_PART_LOT_PK_ID = V_SS_SOL_PART_LOT[\"PK_ID\"]; \r",
									"                                                console.log(\"V_SS_NC-V_SS_NC_PART-V_SS_NC_PART_LOT :-\",V_SS_SOL_PART_LOT_PK_ID);\r",
									"                                                pm.collectionVariables.set(\"V_SS_SOL_PART_LOT_PK_ID\", V_SS_SOL_PART_LOT_PK_ID);\r",
									"                                            }\r",
									"                                            //\"V_SS_NC-V_SS_NC_PART-V_SS_NC_PART_FAILURE_MODE\" \r",
									"                                            var entitydatanamepartfm =\"V_SS_\"+solution+\"-V_SS_\"+solution+\"_PART\"+\"-V_SS_\"+solution+\"_PART_FAILURE_MODE\";\r",
									"                                            var V_SS_SOL_PART_FM = V_SS_SOL_PART[entitydatanamepartfm];\r",
									"                                            if(V_SS_SOL_PART_FM)\r",
									"                                            {\r",
									"                                                var V_SS_SOL_PART_FM_PK_ID = V_SS_SOL_PART_FM[\"PK_ID\"]; \r",
									"                                                console.log(\"V_SS_NC-V_SS_NC_PART-V_SS_NC_PART_FAILURE_MODE :-\",V_SS_SOL_PART_FM_PK_ID);\r",
									"                                                pm.collectionVariables.set(\"V_SS_SOL_PART_FM_PK_ID\", V_SS_SOL_PART_FM_PK_ID);\r",
									"                                            }\r",
									"                                        }\r",
									"                                        //\"V_SS_NC-V_SS_NC_POLICY\"\r",
									"                                        var entitydatanamepolicy =\"V_SS_\"+solution+\"-V_SS_\"+solution+\"_POLICY\";\r",
									"                                        var V_SS_SOL_POLICY = V_SS_SOL[entitydatanamepolicy];\r",
									"                                        if(V_SS_SOL_POLICY)\r",
									"                                        {\r",
									"                                            var V_SS_SOL_POLICY_PK_ID = V_SS_SOL_POLICY[\"PK_ID\"]; \r",
									"                                            console.log(\"V_SS_NC-V_SS_NC_POLICY :-\",V_SS_SOL_POLICY_PK_ID);\r",
									"                                            pm.collectionVariables.set(\"V_SS_SOL_POLICY_PK_ID\", V_SS_SOL_POLICY_PK_ID);\r",
									"                                        }  \r",
									"\r",
									"                                        //\"V_SS_CAPA-V_SS_CAPA_ACTION\"\r",
									"                                        var entitydatanameaction = \"V_SS_\"+solution+\"-V_SS_\"+solution+\"_ACTION\";\r",
									"                                        var V_SS_SOL_ACTION = V_SS_SOL[entitydatanameaction];\r",
									"                                        if(V_SS_SOL_ACTION)\r",
									"                                        {\r",
									"                                            var V_SS_SOL_ACTION_PK_ID = V_SS_SOL_ACTION[\"PK_ID\"];  \r",
									"                                            console.log(\"V_SS_CAPA-V_SS_CAPA_ACTION :-\",V_SS_SOL_ACTION_PK_ID);                    \r",
									"                                            pm.collectionVariables.set(\"V_SS_SOL_ACTION_PK_ID\", V_SS_SOL_ACTION_PK_ID);\r",
									"                                        }\r",
									"                                        //\"V_SS_NC-V_BAH_BASE_ATTACHMENT_GEN\"\r",
									"                                        var entitydatanameattach =\"V_SS_\"+solution+\"-V_BAH_BASE_ATTACHMENT_GEN\";\r",
									"                                        var V_SS_SOL_ATTACH = V_SS_SOL[entitydatanameattach];\r",
									"                                        if(V_SS_SOL_ATTACH)\r",
									"                                        {\r",
									"                                            var V_SS_SOL_ATTACH_BAH_ID = V_SS_SOL_ATTACH[\"BAH_ID\"]; \r",
									"                                            console.log(\"V_SS_NC-V_BAH_BASE_ATTACHMENT_GEN :-\",V_SS_SOL_ATTACH_BAH_ID);\r",
									"                                            pm.collectionVariables.set(\"V_SS_SOL_ATTACH_BAH_ID\", V_SS_SOL_ATTACH_BAH_ID);\r",
									"                                        }\r",
									"                                    });\r",
									"                                }\r",
									"                            }\r",
									"                        }                                     \r",
									"                }\r",
									"            }\r",
									"//}\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{{{token}}}}",
									"type": "string"
								}
							]
						},
						"method": "{{METHOD}}",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{req_entitydata_body}}"
						},
						"url": {
							"raw": "{{baseUrl}}/apis/getentitydata",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"apis",
								"getentitydata"
							]
						}
					},
					"response": []
				},
				{
					"name": "Workflowdata Submit",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var moment = require('moment');\r",
									"var solution = pm.iterationData.get(\"SolutionCode\");\r",
									"var currentWorkflowId = pm.collectionVariables.get(\"currentWorkflowId\");\r",
									"var itmId = pm.collectionVariables.get(\"itmId\");\r",
									"var stepId = pm.collectionVariables.get(\"stepId\");\r",
									"var V_SS_SOL_PK_ID = pm.collectionVariables.get(\"V_SS_SOL_PK_ID\");\r",
									"var V_SS_SOL_PART_PK_ID = pm.collectionVariables.get(\"V_SS_SOL_PART_PK_ID\");\r",
									"var V_SS_SOL_ATTACH_BAH_ID = pm.collectionVariables.get(\"V_SS_SOL_ATTACH_BAH_ID\");\r",
									"var V_SS_SOL_POLICY_PK_ID = pm.collectionVariables.get(\"V_SS_SOL_POLICY_PK_ID\");\r",
									"var V_SS_SOL_PART_LOT_PK_ID = pm.collectionVariables.get(\"V_SS_SOL_PART_LOT_PK_ID\");\r",
									"var V_SS_SOL_PART_FM_PK_ID = pm.collectionVariables.get(\"V_SS_SOL_PART_FM_PK_ID\");\r",
									"var V_SS_SOL_DISP_PK_ID = pm.collectionVariables.get(\"V_SS_SOL_DISP_PK_ID\");\r",
									"\r",
									"var stepName = pm.collectionVariables.get(\"stepName\");\r",
									"var password = pm.iterationData.get(\"Password\");\r",
									"console.log('step name', stepName);\r",
									"let body = {\r",
									"    \"clientChanges\": [],\r",
									"    \"containerWorkflowKey\": \"\",\r",
									"    \"workflowKey\": \"\",\r",
									"    \"parentWorkflowId\": \"\",\r",
									"    \"currentWorkflowId\": currentWorkflowId,\r",
									"    \"itmId\": itmId,\r",
									"    \"stepId\": stepId,\r",
									"    \"tempDataStoreId\": null,\r",
									"    \"withSignOff\": true,\r",
									"    \"password\": password,\r",
									"    \"commandName\": \"\",\r",
									"    \"commandArgument\": \"\"\r",
									"};\r",
									"\r",
									"let datamember = \"V_SS_\" + solution;\r",
									"let userdatamember = \"V_ENU_NONPERSIS_USER_DATA\";\r",
									"let policydatamember = datamember + \"-\" + datamember + \"_POLICY\";\r",
									"let actiondatamember = datamember + \"-\" + datamember + \"_ACTION\"\r",
									"let riskassessdatamember = datamember + \"-\" + datamember + \"_RISK_ASSESSMENT\";\r",
									"let dispositiondatamember = datamember + \"-\" + datamember + \"_DISPOSITION\";\r",
									"let containmentdatamember = datamember + \"-\" + datamember + \"_CONTAINMENT\";\r",
									"let investresultdatamember = datamember + \"-\" + datamember + \"_INVEST_RESULT\";\r",
									"let rootcausedatamember = datamember + \"-\" + datamember + \"_ROOT_CAUSE\";\r",
									"let executedispdatamember = datamember + \"-\" + datamember +\"_DISPOSITION\";\r",
									"\r",
									"\r",
									"let rowidvalue = \"NR_1\";\r",
									"let columnName = 'columnName';\r",
									"let originalValue = 'originalValue';\r",
									"let currentValue = 'currentValue';\r",
									"let rowCount = 3;\r",
									"var statevalue = \"ADDED\";\r",
									"let DateColumnName = \"ENU_MODIFIED_DATE\";\r",
									"let datafields = [];\r",
									"let datarows = [];\r",
									"let userdatafields = [];\r",
									"let userdatarows = [];\r",
									"let policydatafields = [];\r",
									"let policydatarows = [];\r",
									"let actiondatafields = [];\r",
									"let actiondatarows = [];\r",
									"let riskassessdatafields = [];\r",
									"let riskassessdatarows = [];\r",
									"let dispdatafields = [];\r",
									"let dispdatarows = [];\r",
									"let containmentdatafields = [];\r",
									"let containmentdatarows = [];\r",
									"let investresultdatafields = [];\r",
									"let investresultdatarows = [];\r",
									"let rootcausedatafields = [];\r",
									"let rootcausedatarows = [];\r",
									"let execdispdatafields = [];\r",
									"let execdispdatarows = []; \r",
									"let partlotdatafields = []; \r",
									"let partlotdatarows = [];\r",
									"console.log(stepName);\r",
									"\r",
									"if (stepName == \"Verify \" + solution + \" Initiation\") {\r",
									"    //console.log(stepName);  \r",
									"    //-------------------------------------\r",
									"    // V_ENU_NONPERSIS_USER_DATA\r",
									"    userdatafieldsvalues = [\r",
									"        \"ENU_OWNER_CODE\", null, solution + \"COORDINATION\",\r",
									"        \"ENU_DUE_DATE\", null, moment().format(\"yyyy-MM-DD'T'HH:mm:ss.SSS\"),\r",
									"        \"ENU_ID\", null, rowidvalue,\r",
									"        \"ENU_PARENT_ID\", null, itmId\r",
									"    ];\r",
									"    for (let i = 0; i < userdatafieldsvalues.length; i += rowCount) {\r",
									"        // Container to hold current row  \r",
									"        let result = {};\r",
									"        result[columnName] = userdatafieldsvalues[i];\r",
									"        result[originalValue] = userdatafieldsvalues[i + 1];\r",
									"        result[currentValue] = userdatafieldsvalues[i + 2];\r",
									"        userdatafields.push(result);\r",
									"    }\r",
									"    console.log(userdatafields);\r",
									"    userdatarows.push({\r",
									"        state: statevalue,\r",
									"        rowid: rowidvalue,\r",
									"        fields: userdatafields,\r",
									"        modifiedDateColumnName: \"ENU_MODIFIED_DATE\",\r",
									"        modifiedDate: null\r",
									"    });\r",
									"    body.clientChanges.push(\r",
									"        {\r",
									"            dataMember: userdatamember,\r",
									"            rows: userdatarows\r",
									"        });\r",
									"    // ------------------------------------------\r",
									"    // V_SS_CAPA-V_SS_CAPA_POLICY\r",
									"    console.log(\"value of CLOSURE_DUE_DATE from data file is: \"+pm.iterationData.get(\"CLOSURE_REQ\"));\r",
									"    console.log(\"value of CROSS_SITE from data file is: \"+pm.iterationData.get(\"CROSS_SITE\"));\r",
									"    console.log(\"value of CLOSURE_DUE_DATE from data file is: \"+pm.iterationData.get(\"CLOSURE_DUE_DATE\"));\r",
									"    console.log(\"value of IMPL_DUE_DATE from data file is: \"+pm.iterationData.get(\"IMPL_DUE_DATE\"));\r",
									"    console.log(\"value of INVEST_DUE_DATE from data file is: \"+pm.iterationData.get(\"INVEST_DUE_DATE\"));\r",
									"    console.log(\"value of RISK_BASED_ON from data file is: \"+pm.iterationData.get(\"RISK_BASED_ON\"));\r",
									"    console.log(\"value of HEAT_MAP_CODE from data file is: \"+pm.iterationData.get(\"HEAT_MAP_CODE\"));\r",
									"\r",
									"    let closurereq = pm.iterationData.get(\"CLOSURE_REQ\");\r",
									"    let crosssite = pm.iterationData.get(\"CROSS_SITE\");\r",
									"    let closureduedate = pm.iterationData.get(\"CLOSURE_DUE_DATE\");\r",
									"    let implduedate = pm.iterationData.get(\"IMPL_DUE_DATE\");\r",
									"    let investduedate = pm.iterationData.get(\"INVEST_DUE_DATE\");\r",
									"    let riskbasedon = pm.iterationData.get(\"RISK_BASED_ON\");\r",
									"    let heatmapcode = pm.iterationData.get(\"HEAT_MAP_CODE\");\r",
									"\r",
									"    policydatafieldsvalues = [\r",
									"        solution + \"_CLOSURE_REQ\", null, closurereq,\r",
									"        \"CROSS_SITE_\" + solution + \"_ENABLED\", null, crosssite,\r",
									"        \"CLOSURE_DUE_DATE\", null, closureduedate,\r",
									"        \"IMPL_DUE_DATE\", null, implduedate,\r",
									"        \"INVEST_DUE_DATE\", null, investduedate,\r",
									"        \"RISK_BASED_ON\", null, riskbasedon,\r",
									"        \"HEAT_MAP_CODE\", null,heatmapcode \r",
									"    ];\r",
									"    for (let i = 0; i < policydatafieldsvalues.length; i += rowCount) {\r",
									"        // Container to hold current row  \r",
									"        let result = {};\r",
									"        result[columnName] = policydatafieldsvalues[i];\r",
									"        result[originalValue] = policydatafieldsvalues[i + 1];\r",
									"        result[currentValue] = policydatafieldsvalues[i + 2];\r",
									"        policydatafields.push(result);\r",
									"    }\r",
									"    //console.log(policydatafields);\r",
									"    policydatarows.push({\r",
									"        state: \"MODIFIED\",\r",
									"        rowid: V_SS_SOL_POLICY_PK_ID,\r",
									"        fields: policydatafields,\r",
									"        modifiedDateColumnName: \"MODIFIED_DATE\",\r",
									"        modifiedDate: null\r",
									"    });\r",
									"\r",
									"    body.clientChanges.push(\r",
									"        {\r",
									"            dataMember: policydatamember,\r",
									"            rows: policydatarows\r",
									"        });\r",
									"\r",
									"    console.log(\"value of IS_REPEAT from data file is: \"+pm.iterationData.get(\"IS_REPEAT\"));\r",
									"    let isrepeat = pm.iterationData.get(\"IS_REPEAT\");\r",
									"    \r",
									"    //V_SS_CAPA\r",
									"    datafieldsvalues = [\"IS_REPEAT_\" + solution, null, isrepeat];\r",
									"    for (let i = 0; i < datafieldsvalues.length; i += rowCount) {\r",
									"        // Container to hold current row  \r",
									"        let result = {};\r",
									"        result[columnName] = datafieldsvalues[i];\r",
									"        result[originalValue] = datafieldsvalues[i + 1];\r",
									"        result[currentValue] = datafieldsvalues[i + 2];\r",
									"        datafields.push(result);\r",
									"    }\r",
									"    //console.log(datafields);\r",
									"    datarows.push({\r",
									"        \"state\": \"MODIFIED\",\r",
									"        \"rowid\": itmId,\r",
									"        \"fields\": datafields,\r",
									"        \"modifiedDateColumnName\": \"MODIFIED_DATE\",\r",
									"        \"modifiedDate\": null\r",
									"    });\r",
									"\r",
									"    body.clientChanges.push(\r",
									"        {\r",
									"            dataMember: datamember,\r",
									"            rows: datarows\r",
									"        });\r",
									"}\r",
									"else if (stepName == \"Verify \" + solution) {\r",
									"    //console.log(stepName);\r",
									"    //-------------------------------------\r",
									"    // V_ENU_NONPERSIS_USER_DATA\r",
									"    userdatafieldsvalues = [\r",
									"        \"ENU_OWNER_CODE\", null, solution + \"COORDINATION\",\r",
									"        \"ENU_DUE_DATE\", null, moment().format(\"yyyy-MM-DD'T'HH:mm:ss.SSS\"),\r",
									"        \"ENU_ID\", null, rowidvalue,\r",
									"        \"ENU_PARENT_ID\", null, itmId\r",
									"    ];\r",
									"    for (let i = 0; i < userdatafieldsvalues.length; i += rowCount) {\r",
									"        // Container to hold current row  \r",
									"        let result = {};\r",
									"        result[columnName] = userdatafieldsvalues[i];\r",
									"        result[originalValue] = userdatafieldsvalues[i + 1];\r",
									"        result[currentValue] = userdatafieldsvalues[i + 2];\r",
									"        userdatafields.push(result);\r",
									"    }\r",
									"    //console.log(userdatafields);\r",
									"    userdatarows.push({\r",
									"        state: statevalue,\r",
									"        rowid: rowidvalue,\r",
									"        fields: userdatafields,\r",
									"        modifiedDateColumnName: DateColumnName,\r",
									"        modifiedDate: null\r",
									"    });\r",
									"    //console.log(userdatarows);\r",
									"\r",
									"    body.clientChanges.push(\r",
									"        {\r",
									"            dataMember: userdatamember,\r",
									"            rows: userdatarows\r",
									"        });\r",
									"    //console.log(stepName);    \r",
									"    //console.log(body);\r",
									"\r",
									"    //------------------------------------------------\r",
									"    // V_SS_NC-V_SS_NC_RISK_ASSESSMENT\r",
									"    console.log(\"value of RISK_ASSESSMENT_TYPE from data file is: \"+pm.iterationData.get(\"RISK_ASSESSMENT_TYPE_VERIFY\"));\r",
									"    console.log(\"value of SEVERITY_RATING_NAME from data file is: \"+pm.iterationData.get(\"SEVERITY_RATING_NAME_VERIFY\"));\r",
									"    console.log(\"value of REQUIRED_ACTION from data file is: \"+pm.iterationData.get(\"REQUIRED_ACTION_VERIFY\"));\r",
									"    console.log(\"value of RISK_RPN from data file is: \"+pm.iterationData.get(\"RISK_RPN_VERIFY\"));\r",
									"    console.log(\"value of SEVERITY_RATING from data file is: \"+pm.iterationData.get(\"SEVERITY_RATING_VERIFY\"));\r",
									"    console.log(\"value of OCCURRENCE_RATING_NAME from data file is: \"+pm.iterationData.get(\"OCCURRENCE_RATING_NAME_VERIFY\"));\r",
									"    console.log(\"value of OCCURRENCE_RATING from data file is: \"+pm.iterationData.get(\"OCCURRENCE_RATING_VERIFY\"));\r",
									"    console.log(\"value of HEAT_MAP_VALUES from data file is: \"+pm.iterationData.get(\"HEAT_MAP_VALUES_VERIFY\"));\r",
									"    console.log(\"value of DETECTION_RATING_NAME from data file is: \"+pm.iterationData.get(\"DETECTION_RATING_NAME_VERIFY\"));\r",
									"    console.log(\"value of DETECTION_RATING from data file is: \"+pm.iterationData.get(\"DETECTION_RATING_VERIFY\"));\r",
									"    console.log(\"value of RATIONALE_SEV_SELECTON from data file is: \"+pm.iterationData.get(\"RATIONALE_SEV_SELECTON_VERIFY\"));\r",
									"\r",
									"    let riskassessmenttype = pm.iterationData.get(\"RISK_ASSESSMENT_TYPE_VERIFY\");\r",
									"    let severityratingname = pm.iterationData.get(\"SEVERITY_RATING_NAME_VERIFY\");\r",
									"    let requiredaction = pm.iterationData.get(\"REQUIRED_ACTION_VERIFY\");\r",
									"    let riskrpn = pm.iterationData.get(\"RISK_RPN_VERIFY\");\r",
									"    let sevirityrating = pm.iterationData.get(\"SEVERITY_RATING_VERIFY\");\r",
									"    let occurenceratingname = pm.iterationData.get(\"OCCURRENCE_RATING_NAME_VERIFY\");\r",
									"    let occurencerating = pm.iterationData.get(\"OCCURRENCE_RATING_VERIFY\");\r",
									"    let heatmapvalues = pm.iterationData.get(\"HEAT_MAP_VALUES_VERIFY\");\r",
									"    let detectionratingname = pm.iterationData.get(\"DETECTION_RATING_NAME_VERIFY\");\r",
									"    let detectionrating = pm.iterationData.get(\"DETECTION_RATING_VERIFY\");\r",
									"    let rationalesevselection = pm.iterationData.get(\"RATIONALE_SEV_SELECTON_VERIFY\");\r",
									"\r",
									"    riskassessdatafieldsvalues = [\r",
									"        \"IsNewObject\", null, true,\r",
									"        \"RISK_ASSESSMENT_TYPE\", null, riskassessmenttype,\r",
									"        \"SEVERITY_RATING_NAME\", null, severityratingname,\r",
									"        \"REQUIRED_ACTION\", null, requiredaction,\r",
									"        \"RISK_RPN\", null, riskrpn,\r",
									"        \"SEVERITY_RATING\", null, sevirityrating,\r",
									"        \"OCCURRENCE_RATING_NAME\", null, occurenceratingname,\r",
									"        \"OCCURRENCE_RATING\", null, occurencerating,\r",
									"        \"HEAT_MAP_VALUES\", null, heatmapvalues,\r",
									"        \"DETECTION_RATING_NAME\", null, detectionratingname,\r",
									"        \"DETECTION_RATING\", null, detectionrating,\r",
									"        \"RATIONALE_SEV_SELECTON\", null, rationalesevselection,\r",
									"        \"PK_ID\", null, rowidvalue,\r",
									"        \"PARENT_GT_ID\", null, itmId\r",
									"    ];\r",
									"    for (let i = 0; i < riskassessdatafieldsvalues.length; i += rowCount) {\r",
									"        // Container to hold current row  \r",
									"        let result = {};\r",
									"        result[columnName] = riskassessdatafieldsvalues[i];\r",
									"        result[originalValue] = riskassessdatafieldsvalues[i + 1];\r",
									"        result[currentValue] = riskassessdatafieldsvalues[i + 2];\r",
									"        riskassessdatafields.push(result);\r",
									"    }\r",
									"    //console.log(riskassessdatafields);\r",
									"    riskassessdatarows.push({\r",
									"        state: statevalue,\r",
									"        rowid: rowidvalue,\r",
									"        fields: riskassessdatafields,\r",
									"        modifiedDateColumnName: \"MODIFIED_DATE\",\r",
									"        modifiedDate: null\r",
									"    });\r",
									"    body.clientChanges.push(\r",
									"        {\r",
									"            dataMember: riskassessdatamember,\r",
									"            rows: riskassessdatarows\r",
									"        });\r",
									"    //console.log(stepName);    \r",
									"    //console.log(body);\r",
									"    //------------------------------------------------\r",
									"    // V_SS_NC\r",
									"    datafieldsvalues = [\r",
									"        \"TITLE\", \"NCPartFM1\", \"\"\r",
									"    ];\r",
									"    for (let i = 0; i < datafieldsvalues.length; i += rowCount) {\r",
									"        // Container to hold current row  \r",
									"        let result = {};\r",
									"        result[columnName] = datafieldsvalues[i];\r",
									"        result[originalValue] = datafieldsvalues[i + 1];\r",
									"        result[currentValue] = datafieldsvalues[i + 2];\r",
									"        datafields.push(result);\r",
									"    }\r",
									"    //console.log(datafields);\r",
									"    datarows.push({\r",
									"        state: \"MODIFIED\",\r",
									"        rowid: itmId,\r",
									"        fields: datafields,\r",
									"        modifiedDateColumnName: \"MODIFIED_DATE\",\r",
									"        modifiedDate: moment().format(\"yyyy-MM-DD'T'HH:mm:ss.SSS\")\r",
									"    });\r",
									"    body.clientChanges.push(\r",
									"        {\r",
									"            dataMember: datamember,\r",
									"            rows: datarows\r",
									"        });\r",
									"    //console.log(stepName);    \r",
									"    //console.log(body);\r",
									"    //------------------------------------------------\r",
									"\r",
									"    console.log(\"value of TOTAL_DISPOSITION_QTY from data file is: \"+pm.iterationData.get(\"TOTAL_DISPOSITION_QTY\"));\r",
									"\r",
									"    let totaldispqty = pm.iterationData.get(\"TOTAL_DISPOSITION_QTY\");\r",
									"    \r",
									"\r",
									"    // V_SS_NC-V_SS_NC_PART-V_SS_NC_PART_LOT\r",
									"    partlotdatafieldsvalues = [\r",
									"        \"TOTAL_DISPOSITION_QTY\", null, totaldispqty\r",
									"    ];\r",
									"    for (let i = 0; i < partlotdatafieldsvalues.length; i += rowCount) {\r",
									"        // Container to hold current row  \r",
									"        let result = {};\r",
									"        result[columnName] = partlotdatafieldsvalues[i];\r",
									"        result[originalValue] = partlotdatafieldsvalues[i + 1];\r",
									"        result[currentValue] = partlotdatafieldsvalues[i + 2];\r",
									"        partlotdatafields.push(result);\r",
									"    }\r",
									"    console.log(partlotdatafields);\r",
									"    partlotdatarows.push({\r",
									"        state: \"MODIFIED\",\r",
									"        rowid: V_SS_SOL_PART_LOT_PK_ID,\r",
									"        fields: partlotdatafields,\r",
									"        modifiedDateColumnName: \"MODIFIED_DATE\",\r",
									"        modifiedDate: moment().format(\"yyyy-MM-DD'T'HH:mm:ss.SSS\")\r",
									"    });\r",
									"    body.clientChanges.push(\r",
									"        {\r",
									"            dataMember: \"V_SS_NC-V_SS_NC_PART-V_SS_NC_PART_LOT\",\r",
									"            rows: partlotdatarows\r",
									"        });\r",
									"    //console.log(stepName);    \r",
									"    //console.log(body);\r",
									"    //-----------------------------------------------\r",
									"    console.log(\"value of RISK_ASSESSMENT_REQ from data file is: \"+pm.iterationData.get(\"RISK_ASSESSMENT_REQ\"));\r",
									"    console.log(\"value of RPN_THRESHOLD from data file is: \"+pm.iterationData.get(\"RPN_THRESHOLD\"));\r",
									"    console.log(\"value of HEAT_MAP_CODE from data file is: \"+pm.iterationData.get(\"HEAT_MAP_CODE\"));\r",
									"    \r",
									"    let riskacessmentreq = pm.iterationData.get(\"RISK_ASSESSMENT_REQ\");\r",
									"    let rpnthreshold = pm.iterationData.get(\"RPN_THRESHOLD\");\r",
									"    let heatmapcode = pm.iterationData.get(\"HEAT_MAP_CODE\");\r",
									"\r",
									"    // V_SS_NC-V_SS_NC_POLICY\r",
									"    policydatafieldsvalues = [\r",
									"        \"RISK_ASSESSMENT_REQ\", false, riskacessmentreq,\r",
									"        \"RPN_THRESHOLD\", null, rpnthreshold,\r",
									"        \"HEAT_MAP_CODE\", null, heatmapcode\r",
									"    ];\r",
									"    for (let i = 0; i < policydatafieldsvalues.length; i += rowCount) {\r",
									"        // Container to hold current row  \r",
									"        let result = {};\r",
									"        result[columnName] = policydatafieldsvalues[i];\r",
									"        result[originalValue] = policydatafieldsvalues[i + 1];\r",
									"        result[currentValue] = policydatafieldsvalues[i + 2];\r",
									"        policydatafields.push(result);\r",
									"    }\r",
									"    //console.log(policydatafields);\r",
									"    policydatarows.push({\r",
									"        state: \"MODIFIED\",\r",
									"        rowid: V_SS_SOL_POLICY_PK_ID,\r",
									"        fields: policydatafields,\r",
									"        modifiedDateColumnName: \"MODIFIED_DATE\",\r",
									"        modifiedDate: moment().format(\"yyyy-MM-DD'T'HH:mm:ss.SSS\")\r",
									"    });\r",
									"    body.clientChanges.push(\r",
									"        {\r",
									"            dataMember: policydatamember,\r",
									"            rows: policydatarows\r",
									"        });\r",
									"    //console.log(stepName);    \r",
									"    //console.log(body);\r",
									"    //------------------------------------------------\r",
									"    \r",
									"}\r",
									"else if (stepName == \"Investigate \" + solution) {\r",
									"    console.log(stepName);\r",
									"    //-------------------------------------\r",
									"    console.log(\"value of ENU_OWNER_CODE from data file is: \"+pm.iterationData.get(\"ENU_OWNER_CODE_INV\"));\r",
									"    console.log(\"value of ENU_DUE_DATE from data file is: \"+pm.iterationData.get(\"ENU_DUE_DATE_INV\"));\r",
									"    console.log(\"value of ENU_UDF_INT1 from data file is: \"+pm.iterationData.get(\"ENU_UDF_INT1_INV\"));\r",
									"    console.log(\"value of ENU_UDF_INT2 from data file is: \"+pm.iterationData.get(\"ENU_UDF_INT2_INV\"));\r",
									"\r",
									"    \r",
									"    let enuownercodeinv = pm.iterationData.get(\"ENU_DUE_DATE\");\r",
									"    let enuduedateinv = pm.iterationData.get(\"ENU_DUE_DATE_INV\");\r",
									"    let enuudfint1 = pm.iterationData.get(\"ENU_UDF_INT1_INV\");\r",
									"    let enuudfint2 = pm.iterationData.get(\"ENU_UDF_INT2_INV\");\r",
									"\r",
									"    // V_ENU_NONPERSIS_USER_DATA\r",
									"    userdatafieldsvalues = [\r",
									"        \"ENU_OWNER_CODE\", null, solution + enuownercodeinv,\r",
									"        \"ENU_DUE_DATE\", null, moment().add(enuduedateinv, 'days').format(\"yyyy-MM-DD'T'00:00:00.000\"),\r",
									"        \"ENU_UDF_INT1\", null, enuudfint1,\r",
									"        \"ENU_UDF_INT2\", null, enuudfint2,\r",
									"        \"ENU_ID\", null, rowidvalue,\r",
									"        \"ENU_PARENT_ID\", null, itmId\r",
									"    ];\r",
									"    for (let i = 0; i < userdatafieldsvalues.length; i += rowCount) {\r",
									"        // Container to hold current row  \r",
									"        let result = {};\r",
									"        result[columnName] = userdatafieldsvalues[i];\r",
									"        result[originalValue] = userdatafieldsvalues[i + 1];\r",
									"        result[currentValue] = userdatafieldsvalues[i + 2];\r",
									"        userdatafields.push(result);\r",
									"    }\r",
									"    //console.log(userdatafields);\r",
									"    userdatarows.push({\r",
									"        state: statevalue,\r",
									"        rowid: rowidvalue,\r",
									"        fields: userdatafields,\r",
									"        modifiedDateColumnName: DateColumnName,\r",
									"        modifiedDate: null\r",
									"    });\r",
									"    body.clientChanges.push(\r",
									"        {\r",
									"            dataMember: userdatamember,\r",
									"            rows: userdatarows\r",
									"        });\r",
									"\r",
									"    //-------------------------------------\r",
									"    console.log(\"value of PERFORMED_BY_CODE from data file is: \"+pm.iterationData.get(\"PERFORMED_BY_CODE_INV\"));\r",
									"    console.log(\"value of PERFORMED_DATE from data file is: \"+pm.iterationData.get(\"PERFORMED_DATE_INV\"));\r",
									"    console.log(\"value of RECORDED_BY_CODE from data file is: \"+pm.iterationData.get(\"RECORDED_BY_CODE_INV\"));\r",
									"    console.log(\"value of RESULT_TYPE from data file is: \"+pm.iterationData.get(\"RESULT_TYPE_INV\"));\r",
									"    console.log(\"value of RESULT_COMMENT from data file is: \"+pm.iterationData.get(\"RESULT_COMMENT_INV\"));\r",
									"    \r",
									"    let performedbycode = pm.iterationData.get(\"PERFORMED_BY_CODE_INV\");\r",
									"    let performeddate = pm.iterationData.get(\"PERFORMED_DATE_INV\");\r",
									"    let recordedbycode = pm.iterationData.get(\"RECORDED_BY_CODE_INV\");\r",
									"    let resulttype = pm.iterationData.get(\"RESULT_TYPE_INV\");\r",
									"    let resultcomment = pm.iterationData.get(\"RESULT_COMMENT_INV\");\r",
									"\r",
									"    //\"V_SS_NC-V_SS_NC_INVEST_RESULT\"\r",
									"    investresultdatafieldsvalues = [\r",
									"        \"IsNewObject\", null, true,\r",
									"        \"PERFORMED_BY_CODE\", null, performedbycode,\r",
									"        \"PERFORMED_DATE\", null, performeddate,\r",
									"        \"RECORDED_BY_CODE\", null, recordedbycode,\r",
									"        \"RESULT_TYPE\", null, resulttype,\r",
									"        \"RESULT_COMMENT\", null, resultcomment,\r",
									"        \"PK_ID\", null, rowidvalue,\r",
									"        \"PARENT_GT_ID\", null, itmId\r",
									"    ];\r",
									"    for (let i = 0; i < investresultdatafieldsvalues.length; i += rowCount) {\r",
									"        // Container to hold current row  \r",
									"        let result = {};\r",
									"        result[columnName] = investresultdatafieldsvalues[i];\r",
									"        result[originalValue] = investresultdatafieldsvalues[i + 1];\r",
									"        result[currentValue] = investresultdatafieldsvalues[i + 2];\r",
									"        investresultdatafields.push(result);\r",
									"    }\r",
									"    //console.log(investresultdatafields);\r",
									"    investresultdatarows.push({\r",
									"        state: statevalue,\r",
									"        rowid: rowidvalue,\r",
									"        fields: investresultdatafields,\r",
									"        modifiedDateColumnName: \"MODIFIED_DATE\",\r",
									"        modifiedDate: null\r",
									"    });\r",
									"    body.clientChanges.push(\r",
									"        {\r",
									"            dataMember: investresultdatamember,\r",
									"            rows: investresultdatarows\r",
									"        });\r",
									"    \r",
									"    //------------------------------------------------\r",
									"    console.log(\"value of ROOT_CAUSE_AGAINST from data file is: \"+pm.iterationData.get(\"ROOT_CAUSE_AGAINST_INV\"));\r",
									"    console.log(\"value of PRODUCT_CODE from data file is: \"+pm.iterationData.get(\"PRODUCT_CODE_INV\"));\r",
									"    console.log(\"value of PERCENTAGE from data file is: \"+pm.iterationData.get(\"PERCENTAGE_INV\"));\r",
									"    console.log(\"value of PRODUCTLINE_CODE from data file is: \"+pm.iterationData.get(\"PRODUCTLINE_CODE_INV\"));\r",
									"    console.log(\"value of PRODUCT_NAME from data file is: \"+pm.iterationData.get(\"PRODUCT_NAME_INV\"));\r",
									"    console.log(\"value of FAILURE_MODE_NAME from data file is: \"+pm.iterationData.get(\"FAILURE_MODE_NAME_INV\"));    \r",
									"    console.log(\"value of FAILURE_MODE_DESCRIPTION from data file is: \"+pm.iterationData.get(\"FAILURE_MODE_DESCRIPTION_INV\"));\r",
									"    console.log(\"value of OCCURRENCE_RATING_NAME from data file is: \"+pm.iterationData.get(\"OCCURRENCE_RATING_NAME_INV\"));\r",
									"    console.log(\"value of OCCURRENCE_RATING from data file is: \"+pm.iterationData.get(\"OCCURRENCE_RATING_INV\"));\r",
									"    console.log(\"value of DETECTION_RATING_NAME from data file is: \"+pm.iterationData.get(\"DETECTION_RATING_NAME_INV\"));\r",
									"    console.log(\"value of DETECTION_RATING from data file is: \"+pm.iterationData.get(\"DETECTION_RATING_INV\"));\r",
									"    console.log(\"value of SEVERITY_RATING from data file is: \"+pm.iterationData.get(\"SEVERITY_RATING_INV\"));\r",
									"    console.log(\"value of SEVERITY_RATING_NAME from data file is: \"+pm.iterationData.get(\"SEVERITY_RATING_NAME_INV\"));\r",
									"    console.log(\"value of FAILURE_CAUSE_NAME from data file is: \"+pm.iterationData.get(\"FAILURE_CAUSE_NAME_INV\"));\r",
									"    console.log(\"value of FAILURE_CAUSE_DESCRIPTION from data file is: \"+pm.iterationData.get(\"FAILURE_CAUSE_DESCRIPTION_INV\"));\r",
									"\r",
									"    let rootcauseagainstinv = pm.iterationData.get(\"ROOT_CAUSE_AGAINST_INV\");\r",
									"    let productcodeinv = pm.iterationData.get(\"PRODUCT_CODE_INV\");\r",
									"    let percentageinv = pm.iterationData.get(\"PERCENTAGE_INV\");\r",
									"    let productlinecodeinv = pm.iterationData.get(\"PRODUCTLINE_CODE_INV\");\r",
									"    let productnameinv = pm.iterationData.get(\"PRODUCT_NAME_INV\");\r",
									"    let failuremodenameinv = pm.iterationData.get(\"FAILURE_MODE_NAME_INV\");\r",
									"    let failuremodedescinv = pm.iterationData.get(\"FAILURE_MODE_DESCRIPTION_INV\");\r",
									"    let occurenceratingnameinv = pm.iterationData.get(\"OCCURRENCE_RATING_NAME_INV\");\r",
									"    let occurenceratinginv = pm.iterationData.get(\"OCCURRENCE_RATING_INV\");\r",
									"    let detectionratingnameinv = pm.iterationData.get(\"DETECTION_RATING_NAME_INV\");\r",
									"    let detectionratinginv = pm.iterationData.get(\"DETECTION_RATING_INV\");\r",
									"    let severityratinginv = pm.iterationData.get(\"SEVERITY_RATING_INV\");\r",
									"    let severityratingnameinv = pm.iterationData.get(\"SEVERITY_RATING_NAME_INV\");\r",
									"    let failurecausenameinv = pm.iterationData.get(\"FAILURE_CAUSE_NAME_INV\");\r",
									"    let failurecausedescinv = pm.iterationData.get(\"FAILURE_CAUSE_DESCRIPTION_INV\");\r",
									"\r",
									"    // V_SS_NC-V_SS_NC_ROOT_CAUSE\r",
									"    rootcausedatafieldsvalues = [\r",
									"        \"IsNewObject\", null, true,\r",
									"        \"ROOT_CAUSE_AGAINST\", null, rootcauseagainstinv,\r",
									"        \"PRODUCT_CODE\", null, solution+productcodeinv,\r",
									"        \"PERCENTAGE\", null, percentageinv,\r",
									"        \"PRODUCTLINE_CODE\", null, solution+productlinecodeinv,\r",
									"        \"PRODUCT_NAME\", null, solution+\" \"+productnameinv,\r",
									"        \"FAILURE_MODE_NAME\", null, solution+failuremodenameinv,\r",
									"        \"FAILURE_MODE_DESCRIPTION\", null, solution+\" \"+failuremodedescinv,\r",
									"        \"OCCURRENCE_RATING_NAME\", null, occurenceratingnameinv,\r",
									"        \"OCCURRENCE_RATING\", null, occurenceratinginv,\r",
									"        \"DETECTION_RATING_NAME\", null, detectionratingnameinv,\r",
									"        \"DETECTION_RATING\", null, detectionratinginv,\r",
									"        \"SEVERITY_RATING\", null, severityratinginv,\r",
									"        \"SEVERITY_RATING_NAME\", null, severityratingnameinv,\r",
									"        \"FAILURE_CAUSE_NAME\", null, solution+failurecausenameinv,\r",
									"        \"FAILURE_CAUSE_DESCRIPTION\", null, solution+\" \"+failurecausedescinv,\r",
									"        \"PK_ID\", null, rowidvalue,\r",
									"        \"PARENT_GT_ID\", null, itmId\r",
									"    ];\r",
									"    for (let i = 0; i < rootcausedatafieldsvalues.length; i += rowCount) {\r",
									"        // Container to hold current row  \r",
									"        let result = {};\r",
									"        result[columnName] = rootcausedatafieldsvalues[i];\r",
									"        result[originalValue] = rootcausedatafieldsvalues[i + 1];\r",
									"        result[currentValue] = rootcausedatafieldsvalues[i + 2];\r",
									"        rootcausedatafields.push(result);\r",
									"    }\r",
									"    //console.log(rootcausedatafields);\r",
									"    rootcausedatarows.push({\r",
									"        state: \"ADDED\",\r",
									"        rowid: rowidvalue, // TODO how to identify rowid\r",
									"        fields: rootcausedatafields,\r",
									"        modifiedDateColumnName: \"MODIFIED_DATE\",\r",
									"        modifiedDate: null\r",
									"    });\r",
									"    body.clientChanges.push(\r",
									"        {\r",
									"            dataMember: rootcausedatamember,\r",
									"            rows: rootcausedatarows\r",
									"        });\r",
									"    \r",
									"    //------------------------------------------------\r",
									"    console.log(\"value of RISK_ASSESSMENT_TYPE from data file is: \"+pm.iterationData.get(\"RISK_ASSESSMENT_TYPE_RISK_INV\"));\r",
									"    console.log(\"value of DETECTION_RATING_NAME from data file is: \"+pm.iterationData.get(\"DETECTION_RATING_NAME_RISK_INV\"));    \r",
									"    console.log(\"value of REQUIRED_ACTION from data file is: \"+pm.iterationData.get(\"REQUIRED_ACTION_RISK_INV\"));\r",
									"    console.log(\"value of RISK_RPN from data file is: \"+pm.iterationData.get(\"RISK_RPN_RISK_INV\"));\r",
									"    console.log(\"value of DETECTION_RATING from data file is: \"+pm.iterationData.get(\"DETECTION_RATING_RISK_INV\"));\r",
									"    console.log(\"value of RATIONALE_SEV_SELECTON from data file is: \"+pm.iterationData.get(\"RATIONALE_SEV_SELECTON_RISK_INV\"));\r",
									"    console.log(\"value of OCCURRENCE_RATING_NAME from data file is: \"+pm.iterationData.get(\"OCCURRENCE_RATING_NAME_RISK_INV\"));\r",
									"    console.log(\"value of OCCURRENCE_RATING from data file is: \"+pm.iterationData.get(\"OCCURRENCE_RATING_RISK_INV\"));\r",
									"    console.log(\"value of SEVERITY_RATING from data file is: \"+pm.iterationData.get(\"SEVERITY_RATING_RISK_INV\"));\r",
									"    console.log(\"value of SEVERITY_RATING_NAME from data file is: \"+pm.iterationData.get(\"SEVERITY_RATING_NAME_RISK_INV\"));\r",
									"    console.log(\"value of SEVERITY_RATING_NAME from data file is: \"+pm.iterationData.get(\"HEAT_MAP_VALUES_RISK_INV\"));\r",
									"\r",
									"    let riskassessmenttypeinv = pm.iterationData.get(\"RISK_ASSESSMENT_TYPE_RISK_INV\");    \r",
									"    let detectionratingnameriskinv = pm.iterationData.get(\"DETECTION_RATING_NAME_RISK_INV\");\r",
									"    let requiredactioninv = pm.iterationData.get(\"REQUIRED_ACTION_RISK_INV\");\r",
									"    let riskrpninv = pm.iterationData.get(\"RISK_RPN_RISK_INV\");\r",
									"    let detectionratingriskinv = pm.iterationData.get(\"DETECTION_RATING_RISK_INV\");\r",
									"    let rationalesevselectioninv = pm.iterationData.get(\"RATIONALE_SEV_SELECTON_RISK_INV\");\r",
									"    let occurenceratingnameriskinv = pm.iterationData.get(\"OCCURRENCE_RATING_NAME_RISK_INV\");\r",
									"    let occurenceratingriskinv = pm.iterationData.get(\"OCCURRENCE_RATING_RISK_INV\");\r",
									"    let severityratingriskinv = pm.iterationData.get(\"SEVERITY_RATING_RISK_INV\");\r",
									"    let severityratingnameriskinv = pm.iterationData.get(\"SEVERITY_RATING_NAME_RISK_INV\");\r",
									"    let heatmapvaluesinv = pm.iterationData.get(\"HEAT_MAP_VALUES_RISK_INV\");\r",
									"    \r",
									"    // V_SS_NC-V_SS_NC_RISK_ASSESSMENT\r",
									"    riskassessdatafieldsvalues = [\r",
									"        \"IsNewObject\", null,true,\r",
									"        \"RISK_ASSESSMENT_TYPE\",null,riskassessmenttypeinv,\r",
									"        \"DETECTION_RATING_NAME\",null,detectionratingnameriskinv,\r",
									"        \"REQUIRED_ACTION\",null,requiredactioninv,\r",
									"        \"RISK_RPN\",null, riskrpninv,\r",
									"        \"DETECTION_RATING\",null,detectionratingriskinv,\r",
									"        \"RATIONALE_SEV_SELECTON\", null,rationalesevselectioninv,\r",
									"        \"SEVERITY_RATING_NAME\",null,severityratingnameriskinv,\r",
									"        \"SEVERITY_RATING\",null,severityratingriskinv,\r",
									"        \"OCCURRENCE_RATING_NAME\",null,occurenceratingnameriskinv,\r",
									"        \"OCCURRENCE_RATING\",null,occurenceratingriskinv,\r",
									"        \"HEAT_MAP_VALUES\",null,heatmapvaluesinv,\r",
									"        \"PK_ID\", null,rowidvalue,\r",
									"        \"PARENT_GT_ID\", null,itmId\r",
									"    ];\r",
									"    for (let i = 0; i < riskassessdatafieldsvalues.length; i += rowCount) {\r",
									"        // Container to hold current row  \r",
									"        let result = {};\r",
									"        result[columnName] = riskassessdatafieldsvalues[i];\r",
									"        result[originalValue] = riskassessdatafieldsvalues[i + 1];\r",
									"        result[currentValue] = riskassessdatafieldsvalues[i + 2];\r",
									"        riskassessdatafields.push(result);\r",
									"    }\r",
									"    //console.log(riskassessdatafields);\r",
									"    riskassessdatarows.push({\r",
									"        state: statevalue,\r",
									"        rowid: rowidvalue, // TODO how to identify rowid\r",
									"        fields: riskassessdatafields,\r",
									"        modifiedDateColumnName: \"MODIFIED_DATE\",\r",
									"        modifiedDate: null\r",
									"    });\r",
									"    body.clientChanges.push(\r",
									"        {\r",
									"            dataMember: riskassessdatamember,\r",
									"            rows: riskassessdatarows\r",
									"        });\r",
									"    //------------------------------------------------\r",
									"    // V_SS_NC\r",
									"    datafieldsvalues = [\r",
									"        \"NC_\"+solution+\"_ESCALATION\", null, \"No\",\r",
									"        \"SIMILAR_INVEST_ENTITY\", null, \"None\",\r",
									"        \"SIMILAR_INVEST_EXIST\", null, false\r",
									"    ];\r",
									"    for (let i = 0; i < datafieldsvalues.length; i += rowCount) {\r",
									"        // Container to hold current row  \r",
									"        let result = {};\r",
									"        result[columnName] = datafieldsvalues[i];\r",
									"        result[originalValue] = datafieldsvalues[i + 1];\r",
									"        result[currentValue] = datafieldsvalues[i + 2];\r",
									"        datafields.push(result);\r",
									"    }\r",
									"    //console.log(datafields);\r",
									"    datarows.push({\r",
									"        state: \"MODIFIED\",\r",
									"        rowid: itmId,\r",
									"        fields: datafields,\r",
									"        modifiedDateColumnName: \"MODIFIED_DATE\",\r",
									"        modifiedDate: moment().format(\"yyyy-MM-DD'T'HH:mm:ss.SSS\")\r",
									"    });\r",
									"    body.clientChanges.push(\r",
									"        {\r",
									"            dataMember: datamember,\r",
									"            rows: datarows\r",
									"        });\r",
									"}\r",
									"else if (stepName == \"Approve \" + solution + \" Investigation\") {\r",
									"    //console.log(stepName);\r",
									"    //-------------------------------------\r",
									"    // V_ENU_NONPERSIS_USER_DATA\r",
									"    userdatafieldsvalues = [\r",
									"        \"ENU_OWNER_CODE\", null, solution + \"INVAPPROVAL\",\r",
									"        \"ENU_DUE_DATE\", null, \"2022-06-20T00:00:00.000\",\r",
									"        \"ENU_ACTION\", null, \"Approve\",\r",
									"        \"ENU_ID\", null, rowidvalue,\r",
									"        \"ENU_PARENT_ID\", null, itmId\r",
									"    ];\r",
									"    for (let i = 0; i < userdatafieldsvalues.length; i += rowCount) {\r",
									"        // Container to hold current row  \r",
									"        let result = {};\r",
									"        result[columnName] = userdatafieldsvalues[i];\r",
									"        result[originalValue] = userdatafieldsvalues[i + 1];\r",
									"        result[currentValue] = userdatafieldsvalues[i + 2];\r",
									"        userdatafields.push(result);\r",
									"    }\r",
									"    //console.log(userdatafields);\r",
									"    userdatarows.push({\r",
									"        state: statevalue,\r",
									"        rowid: rowidvalue,\r",
									"        fields: userdatafields,\r",
									"        modifiedDateColumnName: DateColumnName,\r",
									"        modifiedDate: null\r",
									"    });\r",
									"    body.clientChanges.push(\r",
									"        {\r",
									"            dataMember: userdatamember,\r",
									"            rows: userdatarows\r",
									"        });\r",
									"\r",
									"}\r",
									"else if (stepName == \"Plan Disposition\") {\r",
									"    //console.log(stepName);\r",
									"    //-------------------------------------\r",
									"    // V_ENU_NONPERSIS_USER_DATA\r",
									"    userdatafieldsvalues = [\r",
									"        \"ENU_OWNER_CODE\", null, solution + \"DISPPLAN\",\r",
									"        \"ENU_DUE_DATE\", null,  \"2022-06-21T00:00:00.000\",\r",
									"        \"ENU_ID\", null, rowidvalue,\r",
									"        \"ENU_PARENT_ID\", null, itmId\r",
									"    ];\r",
									"    for (let i = 0; i < userdatafieldsvalues.length; i += rowCount) {\r",
									"        // Container to hold current row  \r",
									"        let result = {};\r",
									"        result[columnName] = userdatafieldsvalues[i];\r",
									"        result[originalValue] = userdatafieldsvalues[i + 1];\r",
									"        result[currentValue] = userdatafieldsvalues[i + 2];\r",
									"        userdatafields.push(result);\r",
									"    }\r",
									"    //console.log(userdatafields);\r",
									"    userdatarows.push({\r",
									"        state: statevalue,\r",
									"        rowid: rowidvalue,\r",
									"        fields: userdatafields,\r",
									"        modifiedDateColumnName: DateColumnName,\r",
									"        modifiedDate: null\r",
									"    });\r",
									"    body.clientChanges.push(\r",
									"        {\r",
									"            dataMember: userdatamember,\r",
									"            rows: userdatarows\r",
									"        });\r",
									"\r",
									"    //------------------------------------------------\r",
									"\r",
									"    //-------------------------------------\r",
									"    // V_SS_NC-V_SS_NC_DISPOSITION\r",
									"    dispdatafieldsvalues = [\r",
									"        \"DISPOSITION_JUSTIFICATION\", null, \"Disposition Justification\",\r",
									"        \"DISPOSITION_IN_EXECUTION\", null, false,\r",
									"        \"DISPOSITION_APPROVAL_REQ\", null, true,\r",
									"        \"VALIDATED_QUANTITY\", null, true,\r",
									"        \"DISPOSITION_COMPLETED\", null, false,\r",
									"        \"DISPOSITION_DUE_DATE\", null,  \"2022-06-21T00:00:00.000\",\r",
									"        \"ASSIGNED_ROLE_CODE\", null, \"ADMINISTRATOR\",\r",
									"        \"ASSIGNED_ACT_CODE\", null, \"SMARTADMIN\",\r",
									"        \"DISPOSITION_NAME\", null, \"Use as Is\",\r",
									"        \"ASSIGNED_ROLE_NAME\", null, \"ADMINISTRATOR\",\r",
									"        \"ASSIGNED_ACT_NAME\", null, \"ADMINISTRATOR SYSTEM\",\r",
									"        \"NEED_ERP_TRANS\", null, false,\r",
									"        \"VALIDATE_QUANTITY\", null, false\r",
									"    ];\r",
									"    for (let i = 0; i < dispdatafieldsvalues.length; i += rowCount) {\r",
									"        // Container to hold current row  \r",
									"        let result = {};\r",
									"        result[columnName] = dispdatafieldsvalues[i];\r",
									"        result[originalValue] = dispdatafieldsvalues[i + 1];\r",
									"        result[currentValue] = dispdatafieldsvalues[i + 2];\r",
									"        dispdatafields.push(result);\r",
									"    }\r",
									"    //console.log(dispdatafields);\r",
									"    dispdatarows.push({\r",
									"        state: \"MODIFIED\",\r",
									"        rowid: V_SS_SOL_DISP_PK_ID, // Todo : need to identify to get id\r",
									"        fields: dispdatafields,\r",
									"        modifiedDateColumnName: \"MODIFIED_DATE\",\r",
									"        modifiedDate: moment().format(\"yyyy-MM-DD'T'HH:mm:ss.SSS\")\r",
									"    });\r",
									"    body.clientChanges.push(\r",
									"        {\r",
									"            dataMember: dispositiondatamember,\r",
									"            rows: dispdatarows\r",
									"        });\r",
									"    //------------------------------------------------\r",
									"\r",
									"    // V_SS_NC-V_SS_NC_POLICY\r",
									"    policydatafieldsvalues = [\r",
									"        \"DISPOSITION_APP_REQ\", null, false\r",
									"    ];\r",
									"    for (let i = 0; i < policydatafieldsvalues.length; i += rowCount) {\r",
									"        // Container to hold current row  \r",
									"        let result = {};\r",
									"        result[columnName] = policydatafieldsvalues[i];\r",
									"        result[originalValue] = policydatafieldsvalues[i + 1];\r",
									"        result[currentValue] = policydatafieldsvalues[i + 2];\r",
									"        policydatafields.push(result);\r",
									"    }\r",
									"    //console.log(policydatafields);\r",
									"    policydatarows.push({\r",
									"        state: \"MODIFIED\",\r",
									"        rowid: V_SS_SOL_POLICY_PK_ID,// need to get the id for policy\r",
									"        fields: policydatafields,\r",
									"        modifiedDateColumnName: \"MODIFIED_DATE\",\r",
									"        modifiedDate: \"2022-06-13T07:56:35.140\"\r",
									"    });\r",
									"    body.clientChanges.push(\r",
									"        {\r",
									"            dataMember: policydatamember,\r",
									"            rows: policydatarows\r",
									"        });\r",
									"    //------------------------------------------------\r",
									"}\r",
									"else if (stepName == \"Approve Disposition Plan\") {\r",
									"    // console.log(stepName);\r",
									"    //-------------------------------------\r",
									"    // V_ENU_NONPERSIS_USER_DATA\r",
									"    userdatafieldsvalues = [\r",
									"        \"ENU_OWNER_CODE\", null, solution + \"ACTOR2\",\r",
									"        \"ENU_DUE_DATE\", null, \"2022-06-20T00:00:00.000\",\r",
									"        \"ENU_ACTION\", null, \"Approve\",\r",
									"        \"ENU_COMMENT\", null, \"done\",\r",
									"        \"ENU_ID\", null, rowidvalue,\r",
									"        \"ENU_PARENT_ID\", null, itmId\r",
									"    ];\r",
									"    for (let i = 0; i < userdatafieldsvalues.length; i += rowCount) {\r",
									"        // Container to hold current row  \r",
									"        let result = {};\r",
									"        result[columnName] = userdatafieldsvalues[i];\r",
									"        result[originalValue] = userdatafieldsvalues[i + 1];\r",
									"        result[currentValue] = userdatafieldsvalues[i + 2];\r",
									"        userdatafields.push(result);\r",
									"    }\r",
									"    // console.log(userdatafields);\r",
									"    userdatarows.push({\r",
									"        state: statevalue,\r",
									"        rowid: rowidvalue,\r",
									"        fields: userdatafields,\r",
									"        modifiedDateColumnName: DateColumnName,\r",
									"        modifiedDate: null\r",
									"    });\r",
									"    body.clientChanges.push(\r",
									"        {\r",
									"            dataMember: userdatamember,\r",
									"            rows: userdatarows\r",
									"        });\r",
									"\r",
									"    //------------------------------------------------ \r",
									"}\r",
									"else if (stepName == \"Execute Disposition\"){\r",
									"    console.log(stepName);\r",
									"    //-------------------------------------\r",
									"    // V_ENU_NONPERSIS_USER_DATA\r",
									"    userdatafieldsvalues = [\r",
									"        \"ENU_OWNER_CODE\", null, \"SMARTADMIN\",\r",
									"        \"ENU_DUE_DATE\", null, \"2022-06-20T00:00:00.000\",\r",
									"        \"ENU_ID\", null, rowidvalue,\r",
									"        \"ENU_PARENT_ID\", null, itmId\r",
									"    ];\r",
									"    for (let i = 0; i < userdatafieldsvalues.length; i += rowCount) {\r",
									"        // Container to hold current row  \r",
									"        let result = {};\r",
									"        result[columnName] = userdatafieldsvalues[i];\r",
									"        result[originalValue] = userdatafieldsvalues[i + 1];\r",
									"        result[currentValue] = userdatafieldsvalues[i + 2];\r",
									"        userdatafields.push(result);\r",
									"    }\r",
									"    console.log(userdatafields);\r",
									"    userdatarows.push({\r",
									"        state: statevalue,\r",
									"        rowid: rowidvalue,\r",
									"        fields: userdatafields,\r",
									"        modifiedDateColumnName: \"ENU_MODIFIED_DATE\",\r",
									"        modifiedDate: null\r",
									"    });\r",
									"    body.clientChanges.push(\r",
									"        {\r",
									"            dataMember: userdatamember,\r",
									"            rows: userdatarows\r",
									"        });\r",
									"    //------------------------------------------------\r",
									"\r",
									"    //-------------------------------------\r",
									"    // V_SS_NC-V_SS_NC_DISPOSITION\r",
									"    execdispdatafieldsvalues = [\r",
									"        \"DISPOSITIONED_QTY\",null,5,\r",
									"        \"DISPOSITION_COMP_DATE\",null,\"2022-06-14T00:00:00.000\"\r",
									"    ];\r",
									"    for (let i = 0; i < execdispdatafieldsvalues.length; i += rowCount) {\r",
									"        // Container to hold current row  \r",
									"        let result = {};\r",
									"        result[columnName] = execdispdatafieldsvalues[i];\r",
									"        result[originalValue] = execdispdatafieldsvalues[i + 1];\r",
									"        result[currentValue] = execdispdatafieldsvalues[i + 2];\r",
									"        execdispdatafields.push(result);\r",
									"    }\r",
									"    console.log(execdispdatafields);\r",
									"    execdispdatarows.push({\r",
									"        state: \"MODIFIED\",\r",
									"        rowid: rowidvalue,\r",
									"        fields: execdispdatafields,\r",
									"        modifiedDateColumnName: \"MODIFIED_DATE\",\r",
									"        modifiedDate: \"2022-06-14T00:48:54.417\"\r",
									"    });\r",
									"    body.clientChanges.push(\r",
									"        {\r",
									"            dataMember: executedispdatamember,\r",
									"            rows: execdispdatarows\r",
									"        });\r",
									"    //------------------------------------------------\r",
									"    \r",
									"\r",
									"}\r",
									"else if (stepName == \"Containment Action\") {\r",
									"    console.log(stepName);\r",
									"    //-------------------------------------\r",
									"    // V_ENU_NONPERSIS_USER_DATA\r",
									"    userdatafieldsvalues = [\r",
									"        \"ENU_OWNER_CODE\", null, solution + \"CONTAINMENT\",\r",
									"        \"ENU_DUE_DATE\", null, \"2022-06-14T00:00:00.000\",\r",
									"        \"ENU_ID\", null, rowidvalue,\r",
									"        \"ENU_PARENT_ID\", null, itmId\r",
									"    ];\r",
									"    for (let i = 0; i < userdatafieldsvalues.length; i += rowCount) {\r",
									"        // Container to hold current row  \r",
									"        let result = {};\r",
									"        result[columnName] = userdatafieldsvalues[i];\r",
									"        result[originalValue] = userdatafieldsvalues[i + 1];\r",
									"        result[currentValue] = userdatafieldsvalues[i + 2];\r",
									"        userdatafields.push(result);\r",
									"    }\r",
									"    console.log(userdatafields);\r",
									"    userdatarows.push({\r",
									"        state: statevalue,\r",
									"        rowid: rowidvalue,\r",
									"        fields: userdatafields,\r",
									"        modifiedDateColumnName: DateColumnName,\r",
									"        modifiedDate: null\r",
									"    });\r",
									"    body.clientChanges.push(\r",
									"        {\r",
									"            dataMember: userdatamember,\r",
									"            rows: userdatarows\r",
									"        });\r",
									"    //------------------------------------------------\r",
									"    // \"V_SS_NC-V_SS_NC_CONTAINMENT\"\r",
									"    containmentdatafieldsvalues = [\r",
									"        \"IsNewObject\", null, true,\r",
									"        \"PERFORMED_BY_CODE\", null, \"SMARTADMIN\",\r",
									"        \"PERFORMED_DATE\", null, \"2022-06-13T00:00:00.000\",\r",
									"        \"NC_COMMENT\", null, \"cont action\",\r",
									"        \"PK_ID\", null, rowidvalue,\r",
									"        \"PARENT_GT_ID\", null, itmId\r",
									"    ];\r",
									"    for (let i = 0; i < containmentdatafieldsvalues.length; i += rowCount) {\r",
									"        // Container to hold current row  \r",
									"        let result = {};\r",
									"        result[columnName] = containmentdatafieldsvalues[i];\r",
									"        result[originalValue] = containmentdatafieldsvalues[i + 1];\r",
									"        result[currentValue] = containmentdatafieldsvalues[i + 2];\r",
									"        containmentdatafields.push(result);\r",
									"    }\r",
									"    console.log(containmentdatafields);\r",
									"    containmentdatarows.push({\r",
									"        state: statevalue,\r",
									"        rowid: rowidvalue,\r",
									"        fields: containmentdatafields,\r",
									"        modifiedDateColumnName: DateColumnName,\r",
									"        modifiedDate: null\r",
									"    });\r",
									"    body.clientChanges.push(\r",
									"        {\r",
									"            dataMember: containmentdatamember,\r",
									"            rows: containmentdatarows\r",
									"        });\r",
									"\r",
									"}\r",
									"else if (stepName == 'Develop Action Plans') {\r",
									"    console.log(stepName);\r",
									"    //console.log('step name', stepName);\r",
									"    console.log('policy id ', V_SS_SOL_POLICY_PK_ID);\r",
									"\r",
									"    //-------------------------------------\r",
									"    console.log(\"value of ENU_OWNER_CODE from data file is: \"+pm.iterationData.get(\"ENU_OWNER_CODE_DEVACTIONPLAN\"));\r",
									"    console.log(\"value of ENU_DUE_DATE from data file is: \"+pm.iterationData.get(\"ENU_DUE_DATE_DEVACTIONPLAN\"));\r",
									"    let enuownercodedevactionplan = pm.iterationData.get(\"ENU_OWNER_CODE_DEVACTIONPLAN\");\r",
									"    let enuduedatedevactionplan = pm.iterationData.get(\"ENU_DUE_DATE_DEVACTIONPLAN\");\r",
									"    // V_ENU_NONPERSIS_USER_DATA\r",
									"    userdatafieldsvalues = [\r",
									"        \"ENU_OWNER_CODE\", null, solution + enuownercodedevactionplan,\r",
									"        \"ENU_DUE_DATE\", null, enuduedatedevactionplan,\r",
									"        \"ENU_ID\", null, rowidvalue,\r",
									"        \"ENU_PARENT_ID\", null, itmId\r",
									"    ];\r",
									"    for (let i = 0; i < userdatafieldsvalues.length; i += rowCount) {\r",
									"        // Container to hold current row  \r",
									"        let result = {};\r",
									"        result[columnName] = userdatafieldsvalues[i];\r",
									"        result[originalValue] = userdatafieldsvalues[i + 1];\r",
									"        result[currentValue] = userdatafieldsvalues[i + 2];\r",
									"        userdatafields.push(result);\r",
									"    }\r",
									"    console.log(userdatafields);\r",
									"    userdatarows.push({\r",
									"        state: statevalue,\r",
									"        rowid: rowidvalue,\r",
									"        fields: userdatafields,\r",
									"        modifiedDateColumnName: \"ENU_MODIFIED_DATE\",\r",
									"        modifiedDate: null\r",
									"    });\r",
									"\r",
									"    //-------------------------------------\r",
									"    console.log(\"value of VERIFICATION_RESULT from data file is: \"+pm.iterationData.get(\"VERIFICATION_RESULT_DEVACTIONPLAN\"));\r",
									"    console.log(\"value of ACTION_TYPE from data file is: \"+pm.iterationData.get(\"ACTION_TYPE_DEVACTIONPLAN\"));\r",
									"    console.log(\"value of TRANSFERED_RECORD from data file is: \"+pm.iterationData.get(\"TRANSFERED_RECORD_DEVACTIONPLAN\"));\r",
									"    console.log(\"value of TITLE from data file is: \"+pm.iterationData.get(\"TITLE_DEVACTIONPLAN\"));\r",
									"    console.log(\"value of PLAN_DESCRIPTION from data file is: \"+pm.iterationData.get(\"PLAN_DESCRIPTION_DEVACTIONPLAN\"));\r",
									"    console.log(\"value of ASSIGNED_ROLE_NAME from data file is: \"+pm.iterationData.get(\"ASSIGNED_ROLE_NAME_DEVACTIONPLAN\"));\r",
									"    console.log(\"value of ASSIGNED_ROLE_CODE from data file is: \"+pm.iterationData.get(\"ASSIGNED_ROLE_CODE_DEVACTIONPLAN\"));\r",
									"    console.log(\"value of ASSIGNED_ACT_CODE from data file is: \"+pm.iterationData.get(\"ASSIGNED_ACT_CODE_DEVACTIONPLAN\"));\r",
									"    console.log(\"value of ASSIGNED_ACT_NAME from data file is: \"+pm.iterationData.get(\"ASSIGNED_ACT_NAME_DEVACTIONPLAN\"));    \r",
									"    console.log(\"value of DUE_DATE from data file is: \"+pm.iterationData.get(\"DUE_DATE_DEVACTIONPLAN\"));    \r",
									"    \r",
									"    \r",
									"    let verificationresultdevplan = pm.iterationData.get(\"VERIFICATION_RESULT_DEVACTIONPLAN\");\r",
									"    let actiontypedevplan = pm.iterationData.get(\"ACTION_TYPE_DEVACTIONPLAN\");\r",
									"    let transferedrecorddevplan = pm.iterationData.get(\"TRANSFERED_RECORD_DEVACTIONPLAN\");\r",
									"    let titledevplan = pm.iterationData.get(\"TITLE_DEVACTIONPLAN\");\r",
									"    let plandescriptiondevplan = pm.iterationData.get(\"PLAN_DESCRIPTION_DEVACTIONPLAN\");\r",
									"    let assignedrolenamedevplan = pm.iterationData.get(\"ASSIGNED_ROLE_NAME_DEVACTIONPLAN\");\r",
									"    let assignedrolecodedevplan = pm.iterationData.get(\"ASSIGNED_ROLE_CODE_DEVACTIONPLAN\");\r",
									"    let assignedactcodedevplan = pm.iterationData.get(\"ASSIGNED_ACT_CODE_DEVACTIONPLAN\");\r",
									"    let assignedactnamedevplan = pm.iterationData.get(\"ASSIGNED_ACT_NAME_DEVACTIONPLAN\");\r",
									"    let duedatedevplan = pm.iterationData.get(\"DUE_DATE_DEVACTIONPLAN\");\r",
									"\r",
									"    actiondatafieldsvalues = [\r",
									"        \"IsNewObject\", null, true,\r",
									"        \"VERIFICATION_RESULT\", null, verificationresultdevplan,\r",
									"        \"PLAN_TYPE\", null, rowidvalue,\r",
									"        \"STATUS\", null, itmId,\r",
									"        \"ADDED_PHASE\", null, itmId,\r",
									"        \"ACTION_TYPE\", null, actiontypedevplan,\r",
									"        \"TRANSFERED_RECORD\", null, transferedrecorddevplan,\r",
									"        \"TITLE\", null, titledevplan,\r",
									"        \"PLAN_DESCRIPTION\", null, plandescriptiondevplan,\r",
									"        \"ASSIGNED_ROLE_NAME\", null, assignedrolenamedevplan,\r",
									"        \"ASSIGNED_ROLE_CODE\", null, solution + assignedrolecodedevplan,\r",
									"        \"ASSIGNED_ACT_CODE\", null, solution + assignedactcodedevplan,\r",
									"        \"ASSIGNED_ACT_NAME\", null, solution + \" \"+assignedactnamedevplan,\r",
									"        \"DUE_DATE\", null, duedatedevplan,\r",
									"        \"PK_ID\", null, rowidvalue,\r",
									"        \"PARENT_GT_ID\", null, itmId\r",
									"    ];\r",
									"    for (let i = 0; i < actiondatafieldsvalues.length; i += rowCount) {\r",
									"        // Container to hold current row  \r",
									"        let result = {};\r",
									"        result[columnName] = actiondatafieldsvalues[i];\r",
									"        result[originalValue] = actiondatafieldsvalues[i + 1];\r",
									"        result[currentValue] = actiondatafieldsvalues[i + 2];\r",
									"        actiondatafields.push(result);\r",
									"    }\r",
									"    console.log(actiondatafields);\r",
									"    actiondatarows.push({\r",
									"        state: statevalue,\r",
									"        rowid: rowidvalue,\r",
									"        fields: actiondatafields,\r",
									"        modifiedDateColumnName: \"ENU_MODIFIED_DATE\",\r",
									"        modifiedDate: null\r",
									"    });\r",
									"\r",
									"    //-------------------------------------\r",
									"    console.log(\"value of RISK_ASSESSMENT_TYPE from data file is:\"+pm.iterationData.get(\"RISK_ASSESSMENT_TYPE_DEVACTIONPLAN\"));          \r",
									"    let riskassessmenttype = pm.iterationData.get(\"RISK_ASSESSMENT_TYPE_DEVACTIONPLAN\");\r",
									"\r",
									"    riskassessdatafieldsvalues = [\r",
									"        \"IsNewObject\", null, true,\r",
									"        \"RISK_ASSESSMENT_TYPE\", null, riskassessmenttype,\r",
									"        \"PK_ID\", null, rowidvalue,\r",
									"        \"PARENT_GT_ID\", null, itmId\r",
									"    ];\r",
									"    for (let i = 0; i < riskassessdatafieldsvalues.length; i += rowCount) {\r",
									"        // Container to hold current row  \r",
									"        let result = {};\r",
									"        result[columnName] = riskassessdatafieldsvalues[i];\r",
									"        result[originalValue] = riskassessdatafieldsvalues[i + 1];\r",
									"        result[currentValue] = riskassessdatafieldsvalues[i + 2];\r",
									"        riskassessdatafields.push(result);\r",
									"    }\r",
									"    console.log(riskassessdatafields);\r",
									"    riskassessdatarows.push({\r",
									"        state: statevalue,\r",
									"        rowid: rowidvalue,\r",
									"        fields: riskassessdatafields,\r",
									"        modifiedDateColumnName: \"MODIFIED_DATE\",\r",
									"        modifiedDate: null\r",
									"    });\r",
									"    //-------------------------------------\r",
									"    body.clientChanges.push(\r",
									"        {\r",
									"            dataMember: userdatamember,\r",
									"            rows: userdatarows\r",
									"        },\r",
									"        {\r",
									"            dataMember: actiondatamember,\r",
									"            rows: actiondatarows\r",
									"        },\r",
									"        {\r",
									"            dataMember: riskassessdatamember,\r",
									"            rows: riskassessdatarows\r",
									"        });\r",
									"}\r",
									"else if (stepName == 'Implement Action Plans') {\r",
									"    console.log(stepName);\r",
									"    currentWorkflowId = pm.collectionVariables.get(\"currentWorkflowId\");\r",
									"    itmId = pm.collectionVariables.get(\"itmId\");\r",
									"    stepId = pm.collectionVariables.get(\"stepId\");\r",
									"    V_SS_SOL_ACTION_PK_ID = pm.collectionVariables.get(\"V_SS_SOL_ACTION_PK_ID\");\r",
									"    V_SS_SOL_ACTION_PK_ID = pm.collectionVariables.get(\"V_SS_SOL_POLICY_PK_ID\");\r",
									"    //console.log('step name', stepName);\r",
									"    console.log('policy id ', V_SS_SOL_ACTION_PK_ID);\r",
									"    let ENU_OWNER_CODE = pm.environment.get(\"ENU_OWNER_CODE\");\r",
									"    //\r",
									"    //-------------------------------------\r",
									"    console.log(\"value of ENU_OWNER_CODE from data file is: \"+pm.iterationData.get(\"ENU_OWNER_CODE_IMPL_ACT_PLN\"));\r",
									"    console.log(\"value of ENU_DUE_DATE from data file is: \"+pm.iterationData.get(\"ENU_DUE_DATE_IMPL_ACT_PLN\"));\r",
									"    let enuownercodeimplactionplan = pm.iterationData.get(\"ENU_OWNER_CODE_IMPL_ACT_PLN\");\r",
									"    let enuduedateimplactionplan = pm.iterationData.get(\"ENU_DUE_DATE_IMPL_ACT_PLN\");\r",
									"    \r",
									"    // V_ENU_NONPERSIS_USER_DATA\r",
									"    userdatafieldsvalues = [\r",
									"        \"ENU_OWNER_CODE\", null, enuownercodeimplactionplan,\r",
									"        \"ENU_DUE_DATE\", null, enuduedateimplactionplan,\r",
									"        \"ENU_ID\", null, rowidvalue,\r",
									"        \"ENU_PARENT_ID\", null, itmId\r",
									"    ];\r",
									"\r",
									"    for (let i = 0; i < userdatafieldsvalues.length; i += rowCount) {\r",
									"        // Container to hold current row  \r",
									"        let result = {};\r",
									"        result[columnName] = userdatafieldsvalues[i];\r",
									"        result[originalValue] = userdatafieldsvalues[i + 1];\r",
									"        result[currentValue] = userdatafieldsvalues[i + 2];\r",
									"        userdatafields.push(result);\r",
									"    }\r",
									"    console.log(userdatafields);\r",
									"    userdatarows.push({\r",
									"        state: statevalue,\r",
									"        rowid: rowidvalue,\r",
									"        fields: userdatafields,\r",
									"        modifiedDateColumnName: \"ENU_MODIFIED_DATE\",\r",
									"        modifiedDate: null\r",
									"    });\r",
									"\r",
									"    //-------------------------------------  \r",
									"    console.log(\"value of STATUS from data file is: \"+pm.iterationData.get(\"STATUS_IMPL_ACT_PLN\"));\r",
									"    console.log(\"value of COMPLETION_COMMENT from data file is: \"+pm.iterationData.get(\"COMPLETION_COMMENT_IMPL_ACT_PLN\"));\r",
									"    console.log(\"value of COMPLETED_DATE from data file is: \"+pm.iterationData.get(\"COMPLETED_DATE_IMPL_ACT_PLN\"));\r",
									"    console.log(\"value of COMPLETED_BY_CODE from data file is: \"+pm.iterationData.get(\"COMPLETED_BY_CODE_IMPL_ACT_PLN\"));\r",
									"    console.log(\"value of COMPLETED_BY_NAME from data file is: \"+pm.iterationData.get(\"COMPLETED_BY_NAME_IMPL_ACT_PLN\"));\r",
									"    console.log(\"value of REQUIREMENT_FULFILLED from data file is: \"+pm.iterationData.get(\"REQUIREMENT_FULFILLED_IMPL_ACT_PLN\"));\r",
									"    let statusimplactionplan = pm.iterationData.get(\"STATUS_IMPL_ACT_PLN\");\r",
									"    let completioncomment = pm.iterationData.get(\"COMPLETION_COMMENT_IMPL_ACT_PLN\");\r",
									"    let completeddateimplactionplan = pm.iterationData.get(\"COMPLETED_DATE_IMPL_ACT_PLN\");\r",
									"    let completedcodeimplactionplan = pm.iterationData.get(\"COMPLETED_BY_CODE_IMPL_ACT_PLN\");\r",
									"    let completednameimplactionplan = pm.iterationData.get(\"COMPLETED_BY_NAME_IMPL_ACT_PLN\");\r",
									"    let requirementfulfilled = pm.iterationData.get(\"REQUIREMENT_FULFILLED_IMPL_ACT_PLN\");\r",
									"      \r",
									"    actiondatafieldsvalues = [\r",
									"        \"STATUS\", No, statusimplactionplan,\r",
									"        \"COMPLETION_COMMENT\", null, completioncomment,\r",
									"        \"COMPLETED_DATE\", null, completeddateimplactionplan,\r",
									"        \"COMPLETED_BY_CODE\", null, completedcodeimplactionplan,\r",
									"        \"COMPLETED_BY_NAME\", null, completednameimplactionplan,\r",
									"        \"REQUIREMENT_FULFILLED\", null, requirementfulfilled\r",
									"    ];\r",
									"\r",
									"    for (let i = 0; i < actiondatafieldsvalues.length; i += rowCount) {\r",
									"        // Container to hold current row  \r",
									"        let result = {};\r",
									"        result[columnName] = actiondatafieldsvalues[i];\r",
									"        result[originalValue] = actiondatafieldsvalues[i + 1];\r",
									"        result[currentValue] = actiondatafieldsvalues[i + 2];\r",
									"        actiondatafields.push(result);\r",
									"    }\r",
									"    console.log(actiondatafields);\r",
									"    actiondatarows.push({\r",
									"        state: statevalue,\r",
									"        rowid: rowidvalue,\r",
									"        fields: actiondatafields,\r",
									"        modifiedDateColumnName: \"ENU_MODIFIED_DATE\",\r",
									"        modifiedDate: null\r",
									"    });\r",
									"\r",
									"    body.clientChanges.push(\r",
									"        {\r",
									"            dataMember: V_SS_SOL_ACTION_PK_ID,\r",
									"            rows: userdatarows\r",
									"        },\r",
									"        {\r",
									"            dataMember: actiondatamember,\r",
									"            rows: actiondatarows\r",
									"        });\r",
									"}\r",
									"else if (stepName == \"Verify \" + solution + \" Completion\") {\r",
									"    console.log(stepName);\r",
									"    currentWorkflowId = pm.collectionVariables.get(\"currentWorkflowId\");\r",
									"    itmId = pm.collectionVariables.get(\"itmId\");\r",
									"    stepId = pm.collectionVariables.get(\"stepId\");\r",
									"    V_SS_SOL_ACTION_PK_ID = pm.collectionVariables.get(\"V_SS_SOL_ACTION_PK_ID\");\r",
									"    V_SS_SOL_POLICY_PK_ID = pm.collectionVariables.get(\"V_SS_SOL_POLICY_PK_ID\");\r",
									"    //console.log('step name', stepName);\r",
									"    console.log('policy id ', V_SS_SOL_ACTION_PK_ID);\r",
									"\r",
									"    //\r",
									"    //-------------------------------------\r",
									"    console.log(\"value of ENU_OWNER_CODE from data file is: \"+pm.iterationData.get(\"ENU_OWNER_CODE_COMPLETION\"));\r",
									"    console.log(\"value of ENU_DUE_DATE from data file is: \"+pm.iterationData.get(\"ENU_DUE_DATE_COMPLETION\"));\r",
									"    let enuownercodeeffectreview = pm.iterationData.get(\"ENU_OWNER_CODE_COMPLETION\");\r",
									"    let enuduedateeffectreview = pm.iterationData.get(\"ENU_DUE_DATE_COMPLETION\");\r",
									"    // V_ENU_NONPERSIS_USER_DATA\r",
									"    userdatafieldsvalues = [\r",
									"        \"ENU_OWNER_CODE\", null, enuownercodeeffectreview,\r",
									"        \"ENU_DUE_DATE\", null, enuduedateeffectreview,\r",
									"        \"ENU_ID\", null, rowidvalue,\r",
									"        \"ENU_PARENT_ID\", null, itmId\r",
									"    ];\r",
									"\r",
									"    for (let i = 0; i < userdatafieldsvalues.length; i += rowCount) {\r",
									"        // Container to hold current row  \r",
									"        let result = {};\r",
									"        result[columnName] = userdatafieldsvalues[i];\r",
									"        result[originalValue] = userdatafieldsvalues[i + 1];\r",
									"        result[currentValue] = userdatafieldsvalues[i + 2];\r",
									"        userdatafields.push(result);\r",
									"    }\r",
									"    console.log(userdatafields);\r",
									"    userdatarows.push({\r",
									"        state: statevalue,\r",
									"        rowid: rowidvalue,\r",
									"        fields: userdatafields,\r",
									"        modifiedDateColumnName: \"ENU_MODIFIED_DATE\",\r",
									"        modifiedDate: null\r",
									"    });\r",
									"\r",
									"    // ------------------------------------------\r",
									"     console.log(\"value of EFFECT_VERIFICATION_REQ from data file is: \"+pm.iterationData.get(\"EFFECT_VERIFICATION_REQ_COMPLETION\"));\r",
									"    let effectverificationreq = pm.iterationData.get(\"EFFECT_VERIFICATION_REQ_COMPLETION\");\r",
									"    policydatafieldsvalues = [\r",
									"        \"EFFECT_VERIFICATION_REQ\", null, effectverificationreq\r",
									"    ];\r",
									"    for (let i = 0; i < policydatafieldsvalues.length; i += rowCount) {\r",
									"        // Container to hold current row  \r",
									"        let result = {};\r",
									"        result[columnName] = policydatafieldsvalues[i];\r",
									"        result[originalValue] = policydatafieldsvalues[i + 1];\r",
									"        result[currentValue] = policydatafieldsvalues[i + 2];\r",
									"        policydatafields.push(result);\r",
									"    }\r",
									"    console.log(policydatafields);\r",
									"    policydatarows.push({\r",
									"        state: \"MODIFIED\",\r",
									"        rowid: V_SS_SOL_POLICY_PK_ID,\r",
									"        fields: policydatafields,\r",
									"        modifiedDateColumnName: \"MODIFIED_DATE\",\r",
									"        modifiedDate: \"2022-05-18T03:22:36.087\"\r",
									"    });\r",
									"\r",
									"    //-------------------------------------\r",
									"    console.log(\"value of CLOSURE_COMMENT from data file is: \"+pm.iterationData.get(\"CLOSURE_COMMENT_COMPLETION\"));\r",
									"    console.log(\"value of EFFECT_REVIEW_INTERVAL from data file is: \"+pm.iterationData.get(\"EFFECT_REVIEW_INTERVAL_COMPLETION\"));\r",
									"    console.log(\"value of EFFECT_REVIEW_INTVL_UNIT from data file is: \"+pm.iterationData.get(\"EFFECT_REVIEW_INTVL_UNIT_COMPLETION\"));\r",
									"    let closurecomment = pm.iterationData.get(\"CLOSURE_COMMENT_COMPLETION\");\r",
									"    let effectreviewinterval = pm.iterationData.get(\"EFFECT_REVIEW_INTERVAL_COMPLETION\");\r",
									"    let effectreviewintvlunit = pm.iterationData.get(\"EFFECT_REVIEW_INTVL_UNIT_COMPLETION\");\r",
									"    datafieldsvalues = [\r",
									"        \"CLOSURE_COMMENT\", null, closurecomment,\r",
									"        \"EFFECT_REVIEW_INTERVAL\", null, effectreviewinterval,\r",
									"        \"EFFECT_REVIEW_INTVL_UNIT\", null, effectreviewintvlunit\r",
									"    ];\r",
									"    for (let i = 0; i < datafieldsvalues.length; i += rowCount) {\r",
									"        // Container to hold current row  \r",
									"        let result = {};\r",
									"        result[columnName] = datafieldsvalues[i];\r",
									"        result[originalValue] = datafieldsvalues[i + 1];\r",
									"        result[currentValue] = datafieldsvalues[i + 2];\r",
									"        datafields.push(result);\r",
									"    }\r",
									"    console.log(datafields);\r",
									"\r",
									"    datarows.push({\r",
									"        \"state\": \"MODIFIED\",\r",
									"        \"rowid\": itmId,\r",
									"        \"fields\": datafields,\r",
									"        \"modifiedDateColumnName\": \"MODIFIED_DATE\",\r",
									"        \"modifiedDate\": null\r",
									"    });\r",
									"\r",
									"    body.clientChanges.push({\r",
									"        dataMember: datamember,\r",
									"        rows: datarows\r",
									"    });\r",
									"\r",
									"}\r",
									"else if (stepName == \"Verify \" + solution + \" Effectiveness\") {\r",
									"    console.log(stepName);\r",
									"    currentWorkflowId = pm.collectionVariables.get(\"currentWorkflowId\");\r",
									"    itmId = pm.collectionVariables.get(\"itmId\");\r",
									"    stepId = pm.collectionVariables.get(\"stepId\");\r",
									"    V_SS_SOL_ACTION_PK_ID = pm.collectionVariables.get(\"V_SS_SOL_ACTION_PK_ID\");\r",
									"    V_SS_SOL_POLICY_PK_ID = pm.collectionVariables.get(\"V_SS_SOL_POLICY_PK_ID\");\r",
									"    // console.log('step name', stepName);\r",
									"    console.log('policy id ', V_SS_SOL_ACTION_PK_ID);\r",
									"    //-------------------------------------\r",
									"    console.log(\"value of ENU_OWNER_CODE from data file is: \"+pm.iterationData.get(\"ENU_OWNER_CODE_EFFECTREVIEW\"));\r",
									"    console.log(\"value of ENU_DUE_DATE from data file is: \"+pm.iterationData.get(\"ENU_DUE_DATE_EFFECTREVIEW\"));\r",
									"    console.log(\"value of ENU_ACTION from data file is: \"+pm.iterationData.get(\"ENU_ACTION_EFFECTREVIEW\"));\r",
									"    console.log(\"value of ENU_COMMENT from data file is: \"+pm.iterationData.get(\"ENU_COMMENT_EFFECTREVIEW\"));\r",
									"\r",
									"    let enuownercodeeffectreview = pm.iterationData.get(\"ENU_OWNER_CODE_EFFECTREVIEW\");\r",
									"    let enuduedateeffectreview = pm.iterationData.get(\"ENU_DUE_DATE_EFFECTREVIEW\");\r",
									"    let enuactioneffectreview = pm.iterationData.get(\"ENU_ACTION_EFFECTREVIEW\");\r",
									"    let enucommenteffectreview = pm.iterationData.get(\"ENU_COMMENT_EFFECTREVIEW\");\r",
									"    \r",
									"    // V_ENU_NONPERSIS_USER_DATA\r",
									"    userdatafieldsvalues = [\r",
									"        \"ENU_OWNER_CODE\", null, solution+enuownercodeeffectreview,\r",
									"        \"ENU_DUE_DATE\", null, enuduedateeffectreview,\r",
									"        \"ENU_ACTION\", null, enuactioneffectreview,\r",
									"        \"ENU_COMMENT\", null, enucommenteffectreview,\r",
									"        \"ENU_ID\", null, rowidvalue,\r",
									"        \"ENU_PARENT_ID\", null, itmId\r",
									"    ];\r",
									"\r",
									"    for (let i = 0; i < userdatafieldsvalues.length; i += rowCount) {\r",
									"        // Container to hold current row  \r",
									"        let result = {};\r",
									"        result[columnName] = userdatafieldsvalues[i];\r",
									"        result[originalValue] = userdatafieldsvalues[i + 1];\r",
									"        result[currentValue] = userdatafieldsvalues[i + 2];\r",
									"        userdatafields.push(result);\r",
									"    }\r",
									"    console.log(userdatafields);\r",
									"    userdatarows.push({\r",
									"        state: statevalue,\r",
									"        rowid: rowidvalue,\r",
									"        fields: userdatafields,\r",
									"        modifiedDateColumnName: \"ENU_MODIFIED_DATE\",\r",
									"        modifiedDate: null\r",
									"    });\r",
									"\r",
									"    // ------------------------------------------\r",
									"    console.log(\"value of EFFECT_FOLLOWUP_REQ from data file is: \"+pm.iterationData.get(\"EFFECT_FOLLOWUP_REQ\"));\r",
									"    let effectfollowupreq = pm.iterationData.get(\"EFFECT_FOLLOWUP_REQ\");\r",
									"    policydatafieldsvalues = [\"EFFECT_FOLLOWUP_REQ\", null, effectfollowupreq];\r",
									"    for (let i = 0; i < policydatafieldsvalues.length; i += rowCount) {\r",
									"        // Container to hold current row  \r",
									"        let result = {};\r",
									"        result[columnName] = policydatafieldsvalues[i];\r",
									"        result[originalValue] = policydatafieldsvalues[i + 1];\r",
									"        result[currentValue] = policydatafieldsvalues[i + 2];\r",
									"        policydatafields.push(result);\r",
									"    }\r",
									"    console.log(policydatafields);\r",
									"    policydatarows.push({\r",
									"        state: \"MODIFIED\",\r",
									"        rowid: V_SS_SOL_POLICY_PK_ID,\r",
									"        fields: policydatafields,\r",
									"        modifiedDateColumnName: \"MODIFIED_DATE\",\r",
									"        modifiedDate: \"2022-05-18T03:22:36.087\"\r",
									"    });\r",
									"\r",
									"    //-------------------------------------\r",
									"    console.log(\"value of is_sol_judged_effective from data file is: \"+pm.iterationData.get(\"JUDGED_EFFECTIVE\"));\r",
									"    let judgeeffective = pm.iterationData.get(\"JUDGED_EFFECTIVE\");\r",
									"\r",
									"    var is_sol_judged_effective = \"IS_\"+solution+\"+_JUDGED_EFFECTIVE\";\r",
									"    datafieldsvalues = [is_sol_judged_effective, null, judgeeffective];\r",
									"    for (let i = 0; i < datafieldsvalues.length; i += rowCount) {\r",
									"        // Container to hold current row  \r",
									"        let result = {};\r",
									"        result[columnName] = datafieldsvalues[i];\r",
									"        result[originalValue] = datafieldsvalues[i + 1];\r",
									"        result[currentValue] = datafieldsvalues[i + 2];\r",
									"        datafields.push(result);\r",
									"    }\r",
									"    console.log(datafields);\r",
									"    datarows.push({\r",
									"        \"state\": \"MODIFIED\",\r",
									"        \"rowid\": itmId,\r",
									"        \"fields\": datafields,\r",
									"        \"modifiedDateColumnName\": \"MODIFIED_DATE\",\r",
									"        \"modifiedDate\": null\r",
									"    });\r",
									"\r",
									"    body.clientChanges.push(\r",
									"        {\r",
									"            dataMember: userdatamember,\r",
									"            rows: userdatarows\r",
									"        },\r",
									"        {\r",
									"            dataMember: policydatamember,\r",
									"            rows: policydatarows\r",
									"        },\r",
									"        {\r",
									"            dataMember: datamember,\r",
									"            rows: datarows\r",
									"        });\r",
									"\r",
									"}\r",
									"//console.log(JSON.stringify(body));\r",
									"pm.collectionVariables.unset('reg_verify_body');\r",
									"pm.collectionVariables.set('reg_verify_body', JSON.stringify(body));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var solution = pm.environment.get(\"SolutionCode\");\r",
									"var schema = pm.collectionVariables.get(\"schema\");\r",
									"var stepName = null;\r",
									"if(schema)\r",
									"    {\r",
									"        var jsonData = pm.response.json();\r",
									"        if(jsonData)\r",
									"            {\r",
									"                if(jsonData.hasError)\r",
									"                {\r",
									"                    pm.test(\"Has Error\", ()=> {        \r",
									"                        pm.expect(jsonData.hasError).to.be.true;\r",
									"                    });\r",
									"\r",
									"                    pm.test(\"Error properties\", () => {    \r",
									"                        _.each(jsonData.errors, (item) => {\r",
									"                            console.log(item.errorNumber);\r",
									"                            console.log(item.errorMessage);\r",
									"                        });\r",
									"                    });\r",
									"                }\r",
									"                else\r",
									"                {\r",
									"                    pm.test(\"Response should be 200\", () => {\r",
									"                        pm.response.to.have.status(200);\r",
									"                        pm.response.to.be.not.empty;\r",
									"                        pm.response.to.be.json;\r",
									"                    });\r",
									"                    pm.test(\"Response should have no error\", () => {\r",
									"                        pm.response.to.be.not.empty;\r",
									"                        pm.response.to.be.json;                       \r",
									"                        pm.expect(jsonData.hasError).to.eql(false);\r",
									"                    });\r",
									"                    pm.test(\"Response should have WorkflowResult\", () => {\r",
									"                        pm.response.to.be.not.empty;\r",
									"                        pm.response.to.be.json;\r",
									"                        pm.expect(jsonData.SubmitWorkflowResult).not.empty;\r",
									"                    });\r",
									"\r",
									"                    //(\"inside else block\");\r",
									"                    var submitWorkflowResult = jsonData[\"SubmitWorkflowResult\"];\r",
									"                    var workflowstepobj = submitWorkflowResult[\"workFlowSteps\"];\r",
									"                    if (workflowstepobj && workflowstepobj.length > 0)\r",
									"                    {\r",
									"                        pm.test(\"Response should have workflowsteps\", () => {  \r",
									"                            var currentWorkflowId = workflowstepobj[0][\"workflowId\"];\r",
									"                            var itmId = workflowstepobj[0][\"itmId\"];\r",
									"                            var stepId = workflowstepobj[0][\"stepId\"];\r",
									"                            var entityType = workflowstepobj[0][\"entityType\"];\r",
									"                            stepName = workflowstepobj[0][\"stepName\"];\r",
									"                                                    \r",
									"                            pm.collectionVariables.set(\"currentWorkflowId\", currentWorkflowId);\r",
									"                            pm.collectionVariables.set(\"itmId\", itmId);\r",
									"                            pm.collectionVariables.set(\"stepId\",stepId);\r",
									"                            pm.collectionVariables.set(\"entityType\",entityType);\r",
									"                            pm.collectionVariables.set(\"stepName\",stepName);\r",
									"                            //console.log(\"has stepname \" ,stepName); \r",
									"                         });                       \r",
									"                    }\r",
									"                    else\r",
									"                    {\r",
									"                        console.log(\"workflow empty stepname \" ,stepName);\r",
									"                        pm.collectionVariables.set(\"stepName\",null);\r",
									"                        //postman.setNextRequest(null); \r",
									"                    }                   \r",
									"                   \r",
									"                }\r",
									"                if(stepName!= undefined)\r",
									"                    {\r",
									"                        var Ajv = require('ajv');\r",
									"                        const ajv = new Ajv({logger: console, allErrors: true});  \r",
									"                            pm.test(\"Submit Workflow schema validation\", () => {\r",
									"                                    //console.log(schema);\r",
									"                                    const validate = ajv.compile(schema);\r",
									"                                    const valid = validate(jsonData);\r",
									"                                    if(!valid) console.log(validate.errors);\r",
									"                                    pm.expect(valid).to.be.true;\r",
									"                            });\r",
									"                            if(stepName != undefined)\r",
									"                            {\r",
									"                                console.log(\"inside if stepname is not empty\", stepName);\r",
									"                                postman.setNextRequest(\"GetEntityData\");\r",
									"                                //postman.setNextRequest(\"Submit Workflow Verification Signoff\");\r",
									"                            }\r",
									"                    }\r",
									"                    else\r",
									"                    {\r",
									"                        postman.setNextRequest(\"Logout\");\r",
									"                    }                              \r",
									"            }\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{{{token}}}}",
									"type": "string"
								}
							]
						},
						"method": "{{METHOD}}",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{reg_verify_body}}"
						},
						"url": {
							"raw": "{{baseUrl}}/apis/submitworkflowdata",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"apis",
								"submitworkflowdata"
							]
						}
					},
					"response": []
				},
				{
					"name": "Logout",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.globals.unset(\"METHOD\");\r",
									" var jsonData = pm.response.json();\r",
									"  if(!jsonData.hasError)\r",
									"{\r",
									"    pm.test(\"Logout successful\", ()=> {        \r",
									"    pm.expect(!jsonData.hasError).to.be.true;\r",
									"    });\r",
									"}\r",
									"else\r",
									"{\r",
									"    pm.test(\"Logout schema validation\", ()=> {        \r",
									"    pm.expect(jsonData.hasError).to.be.true;\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"\r",
									"function clearVariables() {\r",
									"    // Get all the names of our env variables and put them in an array\r",
									"    const environmentVariables = pm.collectionVariables.values.map(function(variable) {\r",
									"        return variable.key;\r",
									"    });\r",
									"    \r",
									"    // Filter through the above array but don't add variables as per conditions    \r",
									"    const binTheseVariablesOff = environmentVariables.filter(function(variable) {        \r",
									"        return !variable.toLowerCase().includes(\"token\");\r",
									"    });\r",
									"\r",
									"    // Now go through this new array and clear these env variables\r",
									"    return binTheseVariablesOff.forEach(function(variableName) {        \r",
									"        //pm.environment.set(variableName, \"\");\r",
									"        pm.collectionVariables.unset(variableName);\r",
									"    });\r",
									"}\r",
									"// Call the function\r",
									"clearVariables();"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{{{token}}}}",
									"type": "string"
								}
							]
						},
						"method": "{{METHOD}}",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/apis/logout",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"apis",
								"logout"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "ACO_ID",
			"value": ""
		},
		{
			"key": "ACO_FILE_NAME",
			"value": ""
		},
		{
			"key": "ACO_DESCRIPTION",
			"value": ""
		},
		{
			"key": "ACO_CREATED_BY",
			"value": ""
		},
		{
			"key": "ACO_CREATED_DATE",
			"value": ""
		},
		{
			"key": "Language",
			"value": ""
		},
		{
			"key": "baseUrl",
			"value": ""
		},
		{
			"key": "Username",
			"value": ""
		},
		{
			"key": "Password",
			"value": ""
		},
		{
			"key": "token",
			"value": ""
		},
		{
			"key": "culture",
			"value": ""
		},
		{
			"key": "ActorCode",
			"value": ""
		}
	]
}