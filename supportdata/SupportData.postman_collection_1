{
	"info": {
		"_postman_id": "e0267aed-a81a-48e1-8329-6c1c481738ee",
		"name": "SupportData",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							" if(pm.collectionVariables.get(\"iterationNumber\")==1) \r",
							" {\r",
							"    var solution = pm.collectionVariables.get(\"SolutionCode\");    \r",
							"    var schema = \r",
							"    {\r",
							"        \"type\": \"object\",\r",
							"        \"required\": [\r",
							"            \"ActorFirstName\",\r",
							"            \"ActorLastName\",\r",
							"            \"RequirePasswordChange\",\r",
							"            \"Token\",\r",
							"            \"UserFullName\",\r",
							"            \"ActorCode\",\r",
							"            \"ActorCodeWithDomain\",\r",
							"            \"licId\",\r",
							"            \"sessionExpirationErrorCode\",\r",
							"            \"sessionExpirationErrorMessage\",\r",
							"            \"culture\",\r",
							"            \"LoggedOnRoleCode\",\r",
							"            \"hasError\"\r",
							"        ],\r",
							"        \"additionalProperties\": true,\r",
							"        \"properties\": {\r",
							"            \"ActorFirstName\": {\r",
							"                \"type\": \"string\"\r",
							"            },\r",
							"            \"ActorLastName\": {\r",
							"                \"type\": \"string\"\r",
							"            },\r",
							"            \"RequirePasswordChange\": {\r",
							"                \"type\": \"boolean\"\r",
							"            },\r",
							"            \"Token\": {\r",
							"                \"type\": \"string\"\r",
							"            },\r",
							"            \"UserFullName\": {\r",
							"                \"type\": \"string\"\r",
							"            },\r",
							"            \"ActorCode\": {\r",
							"                \"type\": \"string\"\r",
							"            },\r",
							"            \"ActorCodeWithDomain\": {\r",
							"                \"type\": \"string\"\r",
							"            },\r",
							"            \"licId\": {\r",
							"                \"type\": \"string\"\r",
							"            },\r",
							"            \"sessionExpirationErrorCode\": {\r",
							"                \"type\": \"string\"\r",
							"            },\r",
							"            \"sessionExpirationErrorMessage\": {\r",
							"                \"type\": \"string\"\r",
							"            },\r",
							"            \"culture\": {\r",
							"                \"type\": \"string\"\r",
							"            },\r",
							"            \"LoggedOnRoleCode\": {\r",
							"                \"type\": \"string\"\r",
							"            },\r",
							"            \"hasError\": {\r",
							"                \"type\": \"boolean\"\r",
							"            }\r",
							"        }\r",
							"    };\r",
							"\r",
							"    if(schema)\r",
							"    {\r",
							"    var jsonData = pm.response.json();\r",
							"    if(jsonData)\r",
							"        {\r",
							"            if(jsonData.hasError)\r",
							"            {\r",
							"                        pm.test(\"Response should be 200\", () => {\r",
							"                            pm.response.to.have.status(200);\r",
							"                            pm.response.to.be.not.empty;\r",
							"                            pm.response.to.be.json;\r",
							"                        });\r",
							"                        pm.test(\"Response should have error\", ()=> {  \r",
							"                            pm.response.to.be.not.empty;\r",
							"                            pm.response.to.be.json; \r",
							"                            pm.expect(jsonData.hasError).to.be.true;\r",
							"                        });\r",
							"                        pm.test(\"Error properties\", () => { \r",
							"                            pm.expect(jsonData.errors).not.empty;\r",
							"                        _.each(jsonData.errors, (item) => {\r",
							"                            console.log(item.errorNumber);\r",
							"                            console.log(item.errorMessage);\r",
							"                            }); \r",
							"                    });\r",
							"                    \r",
							"            }\r",
							"            else\r",
							"            {\r",
							"                pm.test(\"Test data type of the response\", () => {                \r",
							"                    pm.expect(jsonData).to.be.an(\"object\");\r",
							"                    pm.expect(jsonData.hasError).to.be.false;\r",
							"                    pm.expect(jsonData.Token).to.be.a(\"string\");\r",
							"                    pm.expect(jsonData.ActorCode).to.be.an(\"string\");\r",
							"                });\r",
							"                //pm.collectionVariables.set(\"token\", jsonData.Token);                \r",
							"                pm.collectionVariables.set(\"token\", jsonData.Token);\r",
							"                pm.collectionVariables.set(\"culture\", JSON.stringify(jsonData.culture));\r",
							"                pm.collectionVariables.set(\"ActorCode\", jsonData.ActorCode);\r",
							"                switch(solution)\r",
							"                {\r",
							"                    case \"CAPA\":\r",
							"                        // pm.collectionVariables.set(\"TYPE\",\"Internal\");\r",
							"                        // pm.collectionVariables.set(\"CATEGORY\",\"Product\");\r",
							"                        // pm.collectionVariables.set(\"SOURCE\",\"General\");\r",
							"                        // pm.collectionVariables.set(\"QUALITY_PORTAL\",false);\r",
							"                        // pm.collectionVariables.set(\"NUMBERING_SCHEME_CODE\",\"Numbering\");\r",
							"                        // pm.collectionVariables.set(\"OWNING_SITE_NAME\",\"AUD Site1\");\r",
							"                        // pm.collectionVariables.set(\"OWNING_SITE_CODE\",\"AUDSITE1\");\r",
							"                        // pm.collectionVariables.set(\"PRODUCTLINE_CODE\",\"AUDproductline33.8\");\r",
							"                        // pm.collectionVariables.set(\"PRODUCTLINE_NAME\",\"Auditee Product Line33.8\");\r",
							"                        // pm.collectionVariables.set(\"PRODUCT_NAME\",\"Aud Part33.8A\");\r",
							"                        // pm.collectionVariables.set(\"PRODUCT_CODE\",\"AUD33.8A\");\r",
							"                        // pm.collectionVariables.set(\"TITLE\",\"Title\");\r",
							"                        // pm.collectionVariables.set(\"PROBLEM_STATEMENT\",\"Desc\");\r",
							"                    break;\r",
							"                    case \"NC\":\r",
							"                        // pm.collectionVariables.set(\"TYPE\",\"Internal\");\r",
							"                        // pm.collectionVariables.set(\"CATEGORY\",\"Product\");\r",
							"                        // pm.collectionVariables.set(\"SOURCE\",\"General\");\r",
							"                        // pm.collectionVariables.set(\"QUALITY_PORTAL\",false);\r",
							"                        // pm.collectionVariables.set(\"REPORTED_BY_CODE\",\"SMARTADMIN\");\r",
							"                        // pm.collectionVariables.set(\"REPORT_DATE\",\"2022-06-02T00:00:00.000\");\r",
							"                        // pm.collectionVariables.set(\"OCCURRENCE_DATE\",\"2022-06-02T00:00:00.000\");\r",
							"                        // pm.collectionVariables.set(\"PROBLEM_STATEMENT\",1);\r",
							"                        // pm.collectionVariables.set(\"PRODUCT_REVISION\",\"1\");\r",
							"                        // pm.collectionVariables.set(\"NUMBERING_SCHEME_CODE\",\"Numbering\");\r",
							"                        // pm.collectionVariables.set(\"NC_CATEGORY_CODE\",\"PRODUCT\");\r",
							"                        // pm.collectionVariables.set(\"NC_SOURCE_CODE\",\"GENERAL\");\r",
							"                        // pm.collectionVariables.set(\"OWNING_SITE_NAME\",\"NC Site1\");\r",
							"                        // pm.collectionVariables.set(\"OWNING_SITE_CODE\",\"NCSITE1\");\r",
							"                        // pm.collectionVariables.set(\"PRODUCT_CODE\",\"NCPART1\");\r",
							"                        // pm.collectionVariables.set(\"TITLE\",\"\");\r",
							"                        // pm.collectionVariables.set(\"PROBLEM_STATEMENT\",\"Desc\");\r",
							"                    break;\r",
							"                }            \r",
							"            }\r",
							"            var Ajv = require('ajv');\r",
							"            const ajv = new Ajv();\r",
							"            pm.test(\"Login schema validation\", () => {\r",
							"            const validate = ajv.compile(schema);\r",
							"            //console.log(validate);\r",
							"            const valid = validate(jsonData);\r",
							"            if(!valid) console.log(validate.errors);\r",
							"            //console.log(valid);\r",
							"            pm.expect(valid).to.be.true;        \r",
							"            });       \r",
							"        }\r",
							"    }    \r",
							" }"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.collectionVariables.set(\"METHOD\", \"POST\");\r",
							"\r",
							"if ( pm.iterationData.has(\"iterationNumber\") && pm.iterationData.get(\"iterationNumber\") ){\r",
							"    if(pm.iterationData.get(\"iterationNumber\")!= \"\" &&  pm.iterationData.get(\"iterationNumber\") == 1)\r",
							"    pm.collectionVariables.set(\"iterationNumber\", pm.iterationData.get(\"iterationNumber\"));\r",
							"}\r",
							"if(pm.collectionVariables.get(\"iterationNumber\")!= 2){\r",
							"    pm.collectionVariables.set(\"baseUrl\",pm.iterationData.get(\"baseUrl\"));\r",
							"    pm.collectionVariables.set(\"SolutionCode\",pm.iterationData.get(\"SolutionCode\"));\r",
							"    pm.collectionVariables.set(\"Username\",pm.iterationData.get(\"Username\"));\r",
							"    pm.collectionVariables.set(\"Password\",pm.iterationData.get(\"Password\"));  \r",
							"    console.log(\"iterationNumber - \"+ pm.collectionVariables.get(\"iterationNumber\"));\r",
							"    console.log(\"baseUrl - \"+ pm.collectionVariables.get(\"baseUrl\"));\r",
							"    console.log(\"SolutionCode - \"+ pm.collectionVariables.get(\"SolutionCode\"));\r",
							"    console.log(\"Username - \"+ pm.collectionVariables.get(\"Username\"));\r",
							"    console.log(\"Password - \"+ pm.collectionVariables.get(\"Password\"));\r",
							"}\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "{{METHOD}}",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"Username\": \"{{Username}}\", \r\n    \"Password\": \"{{Password}}\"\r\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/apis/login",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"apis",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "GetSupportDataType",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);\r",
							" //console.log(\"jsonData: \" + JSON.stringify(jsonData)); \r",
							" if(jsonData)\r",
							"    {\r",
							"        if(jsonData.hasError)\r",
							"        {\r",
							"                    pm.test(\"Response should be 200\", () => {\r",
							"                        pm.response.to.have.status(200);\r",
							"                        pm.response.to.be.not.empty;\r",
							"                        pm.response.to.be.json;\r",
							"                    });\r",
							"                    pm.test(\"Response should have error\", ()=> {  \r",
							"                        pm.response.to.be.not.empty;\r",
							"                        pm.response.to.be.json; \r",
							"                        pm.expect(jsonData.hasError).to.be.true;\r",
							"                    });\r",
							"                    pm.test(\"Error properties\", () => { \r",
							"                        pm.expect(jsonData.errors).not.empty;\r",
							"                    _.each(jsonData.errors, (item) => {\r",
							"                        console.log(item.errorNumber);\r",
							"                        console.log(item.errorMessage);\r",
							"                        }); \r",
							"                 });\r",
							"        }\r",
							"        else\r",
							"        {\r",
							"            var getSupportData = jsonData[\"GetSupportData\"];\r",
							"            var rows = getSupportData.rows;\r",
							"            var records = getSupportData.records; \r",
							"            var rowcount = Object.keys(rows).length;\r",
							"            var errorscount = Object.keys(getSupportData.errors).length;\r",
							"\r",
							"            pm.test(\"1. Response should be 200\", () => {\r",
							"                pm.response.to.have.status(200);\r",
							"                pm.response.to.be.not.empty;\r",
							"                pm.response.to.be.json;\r",
							"            });\r",
							"\r",
							"            pm.test(\"2. check response for no error\", () => {\r",
							"                pm.response.to.be.not.empty;\r",
							"                pm.response.to.be.json;\r",
							"                //var jsonData = JSON.parse(responseBody)\r",
							"                pm.expect(jsonData.hasError).to.eql(false);\r",
							"            });\r",
							"\r",
							"            pm.test(\"3. check response for support data object\", () => {\r",
							"                pm.response.to.be.not.empty;\r",
							"                pm.response.to.be.json;\r",
							"                //var jsonData = JSON.parse(responseBody)\r",
							"                pm.expect(jsonData.GetSupportData).not.empty;\r",
							"            });\r",
							"\r",
							"            if(errorscount != 0)\r",
							"            {\r",
							"                pm.test(\"4a. check response when invalid parameters for error list\", () => {\r",
							"                    pm.response.to.be.not.empty;\r",
							"                    pm.response.to.be.json;\r",
							"                    //var jsonData = JSON.parse(responseBody)\r",
							"                    pm.expect(jsonData.GetSupportData.errors).not.empty;\r",
							"                });\r",
							"            }\r",
							"            else if(errorscount == 0)\r",
							"            {\r",
							"                pm.test(\"4b. check response for empty error list\", () => {\r",
							"                    pm.response.to.be.not.empty;\r",
							"                    pm.response.to.be.json;\r",
							"                    //var jsonData = JSON.parse(responseBody)\r",
							"                    pm.expect(jsonData.GetSupportData.errors).empty;\r",
							"                });\r",
							"            }\r",
							"\r",
							"            if (parseInt(rowcount) != 0)\r",
							"            {\r",
							"                if(parseInt(rowcount) != parseInt(records))\r",
							"                {\r",
							"                console.log(\"rowcount = \" +rowcount);\r",
							"                pm.test(\"5a. Response when valid data input\", () => {  \r",
							"                        console.log('row count = '+ rows.length);    \r",
							"                        pm.expect(rows).not.empty;   \r",
							"                        //console.log(\"count\" + rowcount);\r",
							"                        pm.expect(rowcount).to.eql(records);  \r",
							"                    });\r",
							"                }\r",
							"                else\r",
							"                {\r",
							"                  pm.test(\"5c. Response when valid data input\", () => {  \r",
							"                        console.log('row count - '+ rows.length);    \r",
							"                        pm.expect(rows).not.empty; \r",
							"                         pm.expect(rowcount).to.eql(records);   \r",
							"                    });  \r",
							"                }\r",
							"            }\r",
							"            else if (rowcount == 0)\r",
							"            { \r",
							"                pm.test(\"5b. Response when invalid data input\", () => \r",
							"                { \r",
							"                console.log(\"count before\" + rowcount);           \r",
							"                //console.log(\"inside\" + rowcount);    \r",
							"                pm.expect(rows).empty;\r",
							"                pm.expect(records).to.eql(0);        \r",
							"                console.log(\"after\" + rowcount);\r",
							"                });\r",
							"            } \r",
							"        }\r",
							"    pm.collectionVariables.unset(\"iterationNumber\");\r",
							"    pm.collectionVariables.set(\"iterationNumber\", 2);\r",
							"    }\r",
							"// pm.test(\"5. Check response for records and record count when invalid data\", () => {\r",
							"//     var jsonData = JSON.parse(responseBody);\r",
							"//     var getSupportData = jsonData[\"GetSupportData\"];\r",
							"//     var rows = getSupportData[\"rows\"];\r",
							"//     var records = getSupportData[\"records\"]; \r",
							"//     console.log('row count - '+ rows.length);   \r",
							"//     if (records == 0)\r",
							"//     {  \r",
							"//         console.log(\"count before\" + rowcount);\r",
							"//         pm.test(\"5b. Response when invalid data input\", () => \r",
							"//         {    \r",
							"//             console.log(\"inside\" + rowcount);    \r",
							"//             pm.expect(rows).empty;\r",
							"//             pm.expect(records).to.eql(0);\r",
							"//         });\r",
							"//         console.log(\"after\" + rowcount);\r",
							"//     }\r",
							"// });\r",
							"\r",
							"// pm.test(\"Response should have records when data is valid\", () => {\r",
							"//     pm.response.to.be.not.empty;\r",
							"//     pm.response.to.be.json;\r",
							"//     var jsonData = JSON.parse(responseBody);\r",
							"//     pm.expect(jsonData.GetSupportData.rows).not.empty;\r",
							"// });"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"    pm.collectionVariables.set(\"METHOD\", \"POST\");\r",
							"    var solution = pm.collectionVariables.get(\"SolutionCode\");\r",
							"   \r",
							"    // console.log(\"value of COLUMNLIST from data file is: \"+pm.iterationData.get(\"COLUMNLIST\"));\r",
							"    // console.log(\"value of DATASOURCENAME from data file is: \"+pm.iterationData.get(\"DATASOURCENAME\"));\r",
							"    // console.log(\"value of DATASOURCETYPE from data file is: \"+pm.iterationData.get(\"DATASOURCETYPE\"));\r",
							"    // console.log(\"value of DATASOURCETYPESTR from data file is: \"+pm.iterationData.get(\"DATASOURCETYPESTR\"));\r",
							"    // console.log(\"value of DATAKEYFIELD from data file is: \"+pm.iterationData.get(\"DATAKEYFIELD\"));    \r",
							"    // console.log(\"value of FILTER from data file is: \"+pm.iterationData.get(\"FILTER\"));\r",
							"    // console.log(\"value of GETTOTALROWS from data file is: \"+pm.iterationData.get(\"GETTOTALROWS\"));\r",
							"    // console.log(\"value of ORDERBY from data file is: \"+pm.iterationData.get(\"ORDERBY\"));\r",
							"    // console.log(\"value of SORTEXPRESSION from data file is: \"+pm.iterationData.get(\"SORTEXPRESSION\"));\r",
							"    // console.log(\"value of PAGENUMBER from data file is: \"+pm.iterationData.get(\"PAGENUMBER\"));\r",
							"    // console.log(\"value of PAGESIZE from data file is: \"+pm.iterationData.get(\"PAGESIZE\"));\r",
							"    // console.log(\"value of QUERYNAME from data file is: \"+pm.iterationData.get(\"QUERYNAME\"));\r",
							"    // console.log(\"value of SEARCHOPTION from data file is: \"+pm.iterationData.get(\"SEARCHOPTION\"));\r",
							"    // console.log(\"value of SEARCHTEXT from data file is: \"+pm.iterationData.get(\"SEARCHTEXT\"));\r",
							"\r",
							"    let filterlst = [];\r",
							"    let columnlist = [];\r",
							"    let datakeyfield = '';\r",
							"    let orderby = [];\r",
							"    columnlist =  pm.iterationData.get(\"COLUMNLIST\").split(\",\");\r",
							"    let entitydata = { };\r",
							"    // if(columnlist!== null && columnlist !== '')\r",
							"    // {\r",
							"        let datasourcename =  pm.iterationData.get(\"DATASOURCENAME\");\r",
							"        let datasourcetype = pm.iterationData.get(\"DATASOURCETYPE\");\r",
							"        let datasourcetypestr = pm.iterationData.get(\"DATASOURCETYPESTR\");\r",
							"        if(datasourcetypestr==null || datasourcetypestr=='')\r",
							"        {\r",
							"         //console.log('datakeyfield ' + datakeyfield);\r",
							"         datakeyfield = pm.iterationData.get(\"DATAKEYFIELD\");\r",
							"        }\r",
							"        //let filter = pm.iterationData.get(\"FILTERS\");\r",
							"        let gettotalrows = pm.iterationData.get(\"GETTOTALROWS\");\r",
							"        var orderbylst = JSON.parse(pm.iterationData.get(\"ORDERBY\"));\r",
							"        if(orderbylst!=null && orderbylst.length>0)\r",
							"        {\r",
							"            console.log('orderby lst '+ JSON.stringify(orderbylst));\r",
							"            orderby = orderbylst.split(\",\");\r",
							"            console.log('orderby '+ JSON.stringify(orderby));\r",
							"        }\r",
							"        let sortexpression = pm.iterationData.get(\"SORTEXPRESSION\");\r",
							"        let pagenumber = pm.iterationData.get(\"PAGENUMBER\");\r",
							"        let pagesize = pm.iterationData.get(\"PAGESIZE\");\r",
							"        let queryname = pm.iterationData.get(\"QUERYNAME\");\r",
							"        let searchoption = pm.iterationData.get(\"SEARCHOPTION\");\r",
							"        let searchtext = pm.iterationData.get(\"SEARCHTEXT\");\r",
							"        //console.log('filter: ' + filter);\r",
							"        //if(filter !=null || filter != '')\r",
							"        //{\r",
							"        let filteritems = JSON.parse(pm.iterationData.get(\"FILTERS\"));\r",
							"        //console.log('Current JSON object: ' + filteritems);\r",
							"        for (let itemdata of filteritems)\r",
							"        {\r",
							"        let item = {\r",
							"\t\t\t\"openGroup\": itemdata.openGroup,\r",
							"\t\t\t\"leftType\": itemdata.leftType,\r",
							"\t\t\t\"leftValue\": itemdata.leftValue,\r",
							"\t\t\t\"op\": itemdata.op,\r",
							"\t\t\t\"rightType\": itemdata.rightType,\r",
							"\t\t\t\"rightValue\": itemdata.rightValue,\r",
							"\t\t\t\"closeGroup\": itemdata.closeGroup,\r",
							"\t\t\t\"relationalOp\": itemdata.relationalOp\r",
							"            }\r",
							"        filterlst.push(item);\r",
							"        }\r",
							"        //console.log('filter item '+ JSON.stringify(filterlst));\r",
							"\t\t//}\r",
							"        entitydata.cacheData = false;\r",
							"        entitydata.caseInsensitiveSearch = false;\r",
							"        entitydata.columnList =  columnlist;\r",
							"        const dontappendsolution = [\"Group Member Type\",\"Priority\",\"Actor\",\"SS_HEAT_MAP_SETUP\",\"SS_HEAT_MAP_DETAIL_REPORT\"];\r",
							"        const hasIndex = dontappendsolution.findIndex(item => item === datasourcename);\r",
							"        if(hasIndex == -1)\r",
							"        {\r",
							"            //console.log('append solution for :'+ datasourcename);\r",
							"            datasourcename = solution + \" \"+datasourcename;\r",
							"        }\r",
							"        entitydata.dataSourceName = datasourcename;\r",
							"        entitydata.dataSourceType = datasourcetype;\r",
							"        if(datasourcetypestr != null || datakeyfield != '')\r",
							"        {\r",
							"        entitydata.datakeyfield = datakeyfield;\r",
							"        }\r",
							"        if (datasourcetypestr != null || datasourcetypestr != '')\r",
							"        {\r",
							"        entitydata.dataSourceTypeStr = datasourcetypestr;\r",
							"        }\r",
							"        entitydata.filter = filterlst;\r",
							"        entitydata.getTotalRows = gettotalrows;\r",
							"        entitydata.orderBy = orderby;\r",
							"        entitydata.sortExpression = sortexpression;\r",
							"        entitydata.pageNumber = pagenumber;\r",
							"        entitydata.pageSize = pagesize;\r",
							"        entitydata.queryName = queryname;\r",
							"        entitydata.searchOption = searchoption;\r",
							"        entitydata.searchText = searchtext;\r",
							"    //}\r",
							"    //console.log(\"entity object :\"+ JSON.stringify(entitydata))\r",
							"    pm.collectionVariables.unset('searchdata');\r",
							"    pm.collectionVariables.set('searchdata', JSON.stringify(entitydata));\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						},
						{
							"key": "password",
							"value": "{{{{token}}}}",
							"type": "string"
						}
					]
				},
				"method": "{{METHOD}}",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{{searchdata}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/apis/getSupportData",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"apis",
						"getSupportData"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "METHOD",
			"value": ""
		},
		{
			"key": "token",
			"value": ""
		},
		{
			"key": "culture",
			"value": ""
		},
		{
			"key": "ActorCode",
			"value": ""
		},
		{
			"key": "searchdata",
			"value": ""
		},
		{
			"key": "iterationNumber",
			"value": ""
		},
		{
			"key": "baseUrl",
			"value": ""
		},
		{
			"key": "SolutionCode",
			"value": ""
		},
		{
			"key": "Username",
			"value": ""
		},
		{
			"key": "Password",
			"value": ""
		}
	]
}